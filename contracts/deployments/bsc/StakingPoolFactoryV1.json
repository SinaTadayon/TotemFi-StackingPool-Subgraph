{
  "address": "0x492eDE9b0f9c5bfD50400c5b220a730dc107469f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TotemToken",
          "name": "_totemToken",
          "type": "address"
        },
        {
          "internalType": "contract RewardManager",
          "name": "_rewardManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeApr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdPrizeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "potentialCollabReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingPoolTaxRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sizeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdPrizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "potentialCollabReward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPoolCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract RewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimuntToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        }
      ],
      "name": "setOracleContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakingPoolTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolTaxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "contract TotemToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1fd4bc97a7f742e7241fb06152adafbd3e1a76edee1e050427351769ba1c49b",
  "receipt": {
    "to": null,
    "from": "0x6aB29B1766256F01df388B3a25d02C24f454020c",
    "contractAddress": "0x492eDE9b0f9c5bfD50400c5b220a730dc107469f",
    "transactionIndex": 0,
    "gasUsed": "5062902",
    "logsBloom": "0x
    "blockHash": "0x7b388def6b5733227197918dca1874fb3ffd3f4517eb364dd5f49ea297f6613e",
    "transactionHash": "0xc1fd4bc97a7f742e7241fb06152adafbd3e1a76edee1e050427351769ba1c49b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10069252,
        "transactionHash": "0xc1fd4bc97a7f742e7241fb06152adafbd3e1a76edee1e050427351769ba1c49b",
        "address": "0x492eDE9b0f9c5bfD50400c5b220a730dc107469f",
        "topics": [
          "0xac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b61",
          "0x0000000000000000000000006ab29b1766256f01df388b3a25d02c24f454020c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7b388def6b5733227197918dca1874fb3ffd3f4517eb364dd5f49ea297f6613e"
      }
    ],
    "blockNumber": 10069252,
    "cumulativeGasUsed": "5062902",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6FF1BFa14A57594a5874B37ff6AC5efbD9F9599A",
    "0xe59930296DB36f4659850c5d5504B4A571a5669E",
    "0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf",
    "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    "0xe9e7cea3dedca5984780bafc599bd69add087d56",
    "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"
  ],
  "solcInputHash": "c6ac247c365a57ab02c0240f203f09bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"_totemToken\",\"type\":\"address\"},{\"internalType\":\"contract RewardManager\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdPrizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"potentialCollabReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPoolTaxRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"potentialCollabReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPoolCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract RewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimuntToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingPoolTaxRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x62c8752bb170233359e653c61d491d6a79fe1d7d7281377c5ac4e9c03ce811ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0x8344571960f250b1c03ba9f259c452b26b04370ac4723ef262969d822174bee6\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/BTCDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../PancakeSwap/IPancakeRouter.sol\\\";\\n\\n// TODO: this contract should handle other coins like ETH too\\ncontract BTCDistributor {\\n    IPancakeRouter02 internal swapRouter;\\n    address internal USDC_CONTRACT_ADDRESS;\\n    address internal WBTC_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    constructor(\\n        address swapRouterAddress,\\n        address USDCContractAddress,\\n        address wBTCContractAddress\\n    ) {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        USDC_CONTRACT_ADDRESS = USDCContractAddress;\\n        WBTC_CONTRACT_ADDRESS = wBTCContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _btcAmount BTC Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _btcAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _btcAmount,\\n            getPathForUSDToBTC(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedBTCForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory btcAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToBTC());\\n        // since in the path the btc is the second one, so we should retuen the second one also here    \\n        return btcAmount[1];\\n    }\\n\\n    function getPathForUSDToBTC() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = USDC_CONTRACT_ADDRESS;\\n        path[1] = WBTC_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    // the function should be rename to getSwapRouter\\n    function getswapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0xf6d599415d5fdd448b560a389feb2cf807508be0306cf11727d52394cf793e20\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0x5f65c50276ea5c113b1e51e0d646d7e91c9aa15d12214543ddd320769de308f2\",\"license\":\"UNLICENSED\"},\"contracts/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILocker {\\n    /**\\n     * @dev Fails if transaction is not allowed.\\n     * Return values can be ignored for AntiBot launches\\n     */\\n    function lockOrGetPenalty(address source, address dest)\\n        external\\n        returns (bool, uint256);\\n}\\n\\ninterface ILockerUser {\\n    function locker() external view returns (ILocker);\\n\\n    /**\\n     * @dev Emitted when setLocker is called.\\n     */\\n    event SetLocker(address indexed locker);\\n}\\n\\n\",\"keccak256\":\"0x51a18df7a6b1708e8d614f547eb09dd79e64093413bb0081dbb8f0f411ce0e96\",\"license\":\"UNLICENSED\"},\"contracts/PancakeSwap/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2b582633995bad7e354c4a36176081b0a41b234e75ed9458ac9ac53afd82e84e\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumer {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n     */\\n    constructor(address _oracle) {\\n        require(_oracle != address(0));\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * Returns decimals for oracle contract\\n     */\\n    function getDecimals() external view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * Returns the latest price from oracle contract\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n\\n    // TODO: a function must be added to get the price on a specific timestamp\\n    // at the moment chainlink provide a function to get the price on a round ID\\n    // but all round IDs don't return a valid price and mapping the round IDs to\\n    // timestamps is not very well defined\\n}\\n\",\"keccak256\":\"0x8c901b68ad33e7cffb2fcdfc58db252abad119fc7e404f9f7e6a485456df2380\",\"license\":\"UNLICENSED\"},\"contracts/Role/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Operator is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n        if (!isOperator(_msgSender())) {\\n            _addOperator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()),\\n            \\\"OperatorRole: caller does not have the Operator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function addOperator(address account) public onlyOperator {\\n        _addOperator(account);\\n    }\\n\\n    function renounceOperator() public {\\n        _removeOperator(_msgSender());\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe3ed3896ec9e9cc477f1318e9e5f109704eac51255bca6caa36e20fed6965de9\",\"license\":\"UNLICENSED\"},\"contracts/Role/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\ncontract PoolCreator is Context {\\n    using Roles for Roles.Role;\\n\\n    event PoolCreatorAdded(address indexed account);\\n    event PoolCreatorRemoved(address indexed account);\\n\\n    Roles.Role private _poolCreators;\\n\\n    constructor() {\\n        if (!isPoolCreator(_msgSender())) {\\n            _addPoolCreator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyPoolCreator() {\\n        require(\\n            isPoolCreator(_msgSender()),\\n            \\\"PoolCreatorRole: caller does not have the PoolCreator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isPoolCreator(address account) public view returns (bool) {\\n        return _poolCreators.has(account);\\n    }\\n\\n    function addPoolCreator(address account) public onlyPoolCreator {\\n        _addPoolCreator(account);\\n    }\\n\\n    function renouncePoolCreator() public {\\n        _removePoolCreator(_msgSender());\\n    }\\n\\n    function _addPoolCreator(address account) internal {\\n        _poolCreators.add(account);\\n        emit PoolCreatorAdded(account);\\n    }\\n\\n    function _removePoolCreator(address account) internal {\\n        _poolCreators.remove(account);\\n        emit PoolCreatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xd5af536f903c3145a6919765e6b0ab0084d52ac0e30b2d3b7795f44a8434f848\",\"license\":\"UNLICENSED\"},\"contracts/Role/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Rewarder is Context {\\n    using Roles for Roles.Role;\\n\\n    event RewarderAdded(address indexed account);\\n    event RewarderRemoved(address indexed account);\\n\\n    Roles.Role private _rewarders;\\n\\n    constructor() {\\n        if (!isRewarder(_msgSender())) {\\n            _addRewarder(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyRewarder() {\\n        require(\\n            isRewarder(_msgSender()),\\n            \\\"RewarderRole: caller does not have the Rewarder role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isRewarder(address account) public view returns (bool) {\\n        return _rewarders.has(account);\\n    }\\n\\n    function addRewarder(address account) public onlyRewarder {\\n        _addRewarder(account);\\n    }\\n\\n    function renounceRewarder() public {\\n        _removeRewarder(_msgSender());\\n    }\\n\\n    function _addRewarder(address account) internal {\\n        _rewarders.add(account);\\n        emit RewarderAdded(account);\\n    }\\n\\n    function _removeRewarder(address account) internal {\\n        _rewarders.remove(account);\\n        emit RewarderRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x854556cd27f92d4f52e87247d947760942df133464e01f580d4716cc64fe4e5c\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1156e37e7835772537d5dfb53649b1e39b1eff5791f6bd759664168fcc7c8462\",\"license\":\"UNLICENSED\"},\"contracts/Staking/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../TotemToken.sol\\\";\\nimport \\\"../Role/Operator.sol\\\";\\nimport \\\"../Role/Rewarder.sol\\\";\\n\\ncontract RewardManager is Context, Ownable, Operator, Rewarder {\\n    TotemToken totemToken;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n    constructor(TotemToken _totemToken) {\\n        totemToken = _totemToken;\\n    }\\n\\n    function setOperator(address _newOperator) public onlyOwner {\\n        require(\\n            _newOperator != address(0),\\n            \\\"0200 New Operator address cannot be zero.\\\"\\n        );\\n\\n        addOperator(_newOperator);\\n        emit SetOperator(_newOperator);\\n    }\\n\\n    function addPool(address _poolAddress) public onlyOperator {\\n        require(\\n            _poolAddress != address(0),\\n            \\\"0210 Pool address cannot be zero.\\\"\\n        );\\n\\n        addRewarder(_poolAddress);\\n        emit SetRewarder(_poolAddress);\\n    }\\n\\n    function rewardUser(address _user, uint256 _amount) public onlyRewarder {\\n        require(_user != address(0), \\\"0230 User address cannot be zero.\\\");\\n\\n        require(totemToken.transfer(_user, _amount));\\n    }\\n}\",\"keccak256\":\"0x8022b860bf7f1c529cf76ea3c5cd6a9ea5a0ca663c40550effa98b6aa9d74d60\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../Price/PriceConsumer.sol\\\";\\nimport \\\"../Distribution/BTCDistributor.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\n\\ncontract StakingPool is\\n    Context,\\n    Ownable,\\n    PriceConsumer,\\n    USDRetriever,\\n    BTCDistributor\\n{\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    TotemToken public immutable totemToken;\\n    RewardManager public immutable rewardManager;\\n    IERC20 public immutable btcToken;\\n\\n    uint256 public immutable startDate;\\n    uint256 public immutable lockTime;\\n    uint256 public immutable maturityTime;\\n\\n    uint256 public immutable sizeAllocation;\\n    uint256 public immutable stakeApr;\\n\\n    uint256 public immutable prizeAmount;\\n\\n    // usdPrizeAmount is the enabler of BTC rewarder if it would be 0 then the pool is only TOTM rewarder\\n    uint256 public immutable usdPrizeAmount;\\n\\n    uint256 public immutable stakeTaxRate;\\n    uint256 public immutable minimumStakeAmount;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    uint256 public totalStaked;\\n\\n    // TODO: the maturing price is not the real maturity price and it depends on\\n    // the calling endPool function\\n    uint256 public maturingPrice;\\n    uint256 public constant sizeLimitRangeRate = 5;\\n    // TODO: implement a mechanism to get the decimals from the oracle\\n    uint256 public constant oracleDecimal = 8;\\n\\n    uint256 public immutable potentialCollabReward;\\n    // based on the white paper the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500)\\n    uint256 public collaborativeReward;\\n\\n    address public poolCreator;\\n\\n    bool public immutable isEnhancedEnabled;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n\\n    event Stake(address indexed user, uint256 amount, uint256 pricePrediction);\\n\\n    event Withdraw(address indexed user, uint256 amount, uint256 btcAmount);\\n\\n    event Unstake(address indexed user, uint256 amount);\\n\\n    event PoolLocked();\\n\\n    event PoolSorted();\\n\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    constructor(\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _poolCreator,\\n        address _swapRouter,\\n        address _oracleContract,\\n        address _usdToken,\\n        address _btcToken,\\n        uint256[9] memory _variables,\\n        bool _isEnhancedEnabled\\n    )\\n        PriceConsumer(_oracleContract)\\n        BTCDistributor(_swapRouter, _usdToken, _btcToken)\\n    {\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n\\n        poolCreator = _poolCreator;\\n\\n        setUSDToken(_usdToken);\\n        btcToken = IERC20(_btcToken);\\n\\n        startDate = block.timestamp;\\n        maturityTime = _variables[0];\\n        lockTime = _variables[1];\\n\\n        sizeAllocation = _variables[2];\\n        stakeApr = _variables[3];\\n        prizeAmount = _variables[4];\\n        usdPrizeAmount = _variables[5];\\n        potentialCollabReward = _variables[6];\\n        stakeTaxRate = _variables[7];\\n        minimumStakeAmount = _variables[8];   \\n\\n        isEnhancedEnabled = _isEnhancedEnabled; \\n\\n        prizeRewardRates.push(PrizeRewardRate({rank: 1, percentage: 3750}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 2, percentage: 2000}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 3, percentage: 1000}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 10, percentage: 250}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 25, percentage: 100}));\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        require(!isLocked, \\\"0310 Pool is locked\\\");\\n        require(_amount >= minimumStakeAmount, \\\"0311 Amount can't be less than the minimum\\\");\\n\\n        uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 stakeTaxAmount;\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : _amount.mulBP(taxRate);\\n    \\n        require(\\n            // the total amount of stakes can exceed size allocation by 5%\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange),\\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        // now the stakeTaxAmount is the staking tax and the _amount is initial amount minus the staking tax\\n        (stakeTaxAmount, _amount) = getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n\\n        // This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        stakers.push(\\n            Staker({\\n                stakerAddress: _msgSender(),\\n                index: predictions[_msgSender()].length\\n            })\\n        );\\n\\n        predictions[_msgSender()].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                // maybe it's better to use the max number available for rank and differece\\n                // because the 0 is the best number\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n\\n        if (totalStaked >= sizeAllocation.sub(limitRange)) {\\n            // if the staking pool has not anymore capacity then it is locked\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction);\\n    }\\n\\n    function claimReward() external {\\n        (uint256 reward, uint256 btcReward) = _getTotalReward(_msgSender());\\n\\n        if (reward > 0) {\\n            if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n                // all transfers should be in require, rewardUser is using require\\n                rewardManager.rewardUser(_msgSender(), reward);\\n            }\\n        }\\n        \\n        // _wthdraw don't withdraw actually, and only update the array in the map\\n        _withdrawStakingReward(_msgSender());\\n        \\n\\n        if (isMatured) {\\n\\n            if (usdPrizeAmount > 0) {\\n                if (btcReward > 0) require(btcToken.transfer(_msgSender(), btcReward), \\\"0320\\\");\\n\\n                // _wthdraw don't withdraw actually, and only update the array in the map\\n                _withdrawPrizeReward(_msgSender());\\n            }\\n\\n            // Users can't unstake until the pool matures\\n            uint256 stakedBalance = _getTotalStakedBalance(_msgSender());\\n            if (stakedBalance > 0) {\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                // _wthdraw don't withdraw actually, and only update the array in the map\\n                _withdrawStakedBalance(_msgSender());\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        emit Withdraw(_msgSender(), reward, btcReward);\\n    }\\n\\n    function indexedClaimReward(uint256 stakeIndex) external {\\n        (uint256 reward, uint256 btcReward) = _getIndexedReward(_msgSender(), stakeIndex);\\n\\n        if (reward > 0) {\\n            // Send the token reward only when the rewardManager has the enough fund\\n            if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n                rewardManager.rewardUser(_msgSender(), reward);\\n            }\\n        }\\n        \\n        _withdrawIndexedStakingReward(_msgSender(), stakeIndex);\\n        \\n\\n        if (isMatured) {\\n            \\n            if (usdPrizeAmount > 0) {\\n                if (btcReward > 0) require(btcToken.transfer(_msgSender(), btcReward), \\\"0330\\\");\\n\\n                _withdrawIndexedPrizeReward(_msgSender(), stakeIndex);\\n            }\\n\\n\\n            uint256 stakedBalance = _getIndexedStakedBalance(_msgSender(), stakeIndex);\\n            if (stakedBalance > 0) {\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                _withdrawIndexedStakedBalance(_msgSender(), stakeIndex);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        emit Withdraw(_msgSender(), reward, btcReward);\\n    }\\n\\n    function purchaseBTC(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(usdPrizeAmount > 0, \\\"0340 The pool is not BTC rewarder\\\");\\n        \\n        require(usdAmount > 0, \\\"0341 Amount can't be zero\\\");\\n\\n        require(deadline >= block.timestamp, \\\"0342 deadline is low\\\");\\n\\n        // This approves tokens to swap router\\n        address swapRouterAddress = getswapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n        // Get equivalent USD amount for BTC\\n        uint256 btcAmount = getEstimatedBTCForUSD(usdAmount);\\n\\n        uint256 btcAmountWithSlippage =\\n            btcAmount.sub(btcAmount.mulBP(300));\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            btcAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getBTCBalance() public view returns (uint256) {\\n        return btcToken.balanceOf(address(this));\\n    }\\n\\n    function getPredictionRange(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256[4] memory steps =\\n            [uint256(27500), 30000, 17500, type(uint256).max];\\n        uint256[4] memory ranges = [uint256(1000), 700, 375, 200];\\n        uint256 totalRange = 0;\\n\\n        for (uint256 i = 0; i < steps.length; i++) {\\n            uint256 stepAmount =\\n                i == steps.length - 1 ? amount : steps[i].mul(10**18);\\n            uint256 step = amount > stepAmount ? stepAmount : amount;\\n            totalRange = totalRange.add(\\n                // the use of oracleDecimal -2 is because of ranges element (100 = 1 dollar range)\\n                step.mul(ranges[i]).mul(10**(oracleDecimal-2)).div(500).div(10**18)\\n            );\\n\\n            if (amount <= stepAmount) break;\\n\\n            amount = amount.sub(stepAmount);\\n        }\\n        return totalRange;\\n    }\\n\\n    // This function is to get the avg price prediction for calculating collaborative reward\\n    function getAveragePricePrediction() public view returns (uint256) {\\n        if (totalStaked == 0) return 0;\\n        uint256 avgPricePrediction = 0;\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            StakeWithPrediction memory prediction =\\n                predictions[stakers[i].stakerAddress][stakers[i].index];\\n\\n            avgPricePrediction = avgPricePrediction.add(\\n                prediction.pricePrediction.mul(prediction.stakedBalance)\\n            );\\n        }\\n\\n        avgPricePrediction = avgPricePrediction.div(totalStaked);\\n\\n        return avgPricePrediction;\\n    }\\n\\n    function lockPool() public onlyPoolCreator {\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    function updateMaturingPrice() external onlyPoolCreator {\\n\\n        require(\\n            block.timestamp >= startDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        maturingPrice = getLatestPrice();\\n    }\\n    function endPool() external onlyPoolCreator {\\n                require(\\n            block.timestamp >= startDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n        \\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getBTCBalance() != 0, \\n                \\\"0361 BTC Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(\\n                sortedStakers.length != 0,\\n                \\\"0362 first should sort\\\"\\n            );\\n        }\\n\\n        // potentialCollabReward allows the admin to set the collaborateive reward \\n        if (potentialCollabReward > 0) {\\n            // the collaborative reward only gave to the pools that the average price predicted with \\n            // the accuracy of 25 $\\n            uint256 avgPricePrediction = getAveragePricePrediction();\\n            if (_getDifference(avgPricePrediction, 25 * (10**8)) == 0) {\\n                collaborativeReward = potentialCollabReward;\\n            }\\n        }\\n\\n        // TODO: this function should be removed\\n        // _sortStakers();\\n        uint256 max = sortedStakers.length > 25 ? 25 : sortedStakers.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            predictions[sortedStakers[i].stakerAddress][sortedStakers[i].index].rank =\\n                i + 1;\\n        }\\n\\n        // there is possibility that the size allocation is not reached \\n        // and the isLocked is not set to ture\\n        isLocked = true;\\n        isMatured = true;\\n\\n        emit PoolMatured();\\n    }\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function _getDifference(uint256 prediction, uint256 range)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(range) <= maturingPrice) return 0;\\n            else return prediction.sub(range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(range));\\n        }\\n    }\\n\\n    function setSortedStakers(address[25] calldata addrArray, uint256[25] calldata indexArray)\\n        external \\n        onlyPoolCreator \\n    {\\n\\n        for (uint256 i = 0; i < addrArray.length; i++) {\\n\\n            // the first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n            Staker({\\n                stakerAddress: addrArray[i],\\n                index: indexArray[i]\\n                })\\n            );\\n        }\\n\\n        emit PoolSorted();\\n    }\\n\\n    function getStakers() \\n        public \\n        view \\n        returns(address[] memory, uint256[] memory) \\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function _getStakingRewardPerStake(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction memory userStake = predictions[staker][stakeIndex];\\n        uint256 maturityDate = startDate + lockTime + maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr = _getEnhancedRewardRate(userStake.stakedTime);\\n\\n        // the reward formula is ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            stakeApr.add(enhancedApr),\\n            timeTo.sub(userStake.stakedTime),\\n            userStake.stakedBalance\\n            );\\n\\n        rewardPerStake = rewardPerStake.sub(userStake.amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getStakingReward(address staker) public view returns (uint256) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function _getIndexedStakingReward(address staker, uint256 stakeIndex) public view returns (uint256) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n        if (stakeIndex >= userStakes.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function _withdrawStakingReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            userStakes[i].lastWithdrawalTime = block.timestamp;\\n            userStakes[i].amountWithdrawn = userStakes[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function _withdrawIndexedStakingReward(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (stakeIndex >= userStakes.length) return;\\n\\n        uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n\\n        userStakes[stakeIndex].lastWithdrawalTime = block.timestamp;\\n        userStakes[stakeIndex].amountWithdrawn = userStakes[stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function _getEnhancedRewardRate(uint256 stakedTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        // if the enhanced reward is not enabled so consider enhanced raward 0\\n        if (!isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = startDate.add(lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _getPrizeReward(address staker)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // wihtout the maturing price calculating prize is impossible\\n        if (!isMatured) return (0, 0);\\n\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        // users that don't stake don't get any prize also\\n        if (userStakes.length == 0) return (0, 0);\\n\\n        uint256 maturingBTCPrizeAmount =\\n            (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 btcReward = 0;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            // only calculate the prize amount for stakes that are not withdrawn yet\\n            if (!userStakes[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = _getPercentageReward(userStakes[i].rank);\\n\\n                reward = reward.add(\\n                            prizeAmount.mulBP(_percent)\\n                        );\\n\\n                btcReward = btcReward.add(\\n                            maturingBTCPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (collaborativeReward > 0) {\\n            reward = reward.addBP(collaborativeReward);\\n            btcReward = btcReward.addBP(collaborativeReward);\\n        }\\n\\n        return (reward, btcReward);\\n    }\\n\\n    function _getPercentageReward(uint256 _rank)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_rank <= prizeRewardRates[0].rank) {\\n            return prizeRewardRates[0].percentage;\\n        } else if (_rank <= prizeRewardRates[1].rank) {\\n            return prizeRewardRates[1].percentage;\\n        } else if (_rank <= prizeRewardRates[2].rank) {\\n            return prizeRewardRates[2].percentage;\\n        } else if (_rank <= prizeRewardRates[3].rank) {\\n            return prizeRewardRates[3].percentage;\\n        } else if (_rank <= prizeRewardRates[4].rank) {\\n            return prizeRewardRates[4].percentage;\\n        } else {\\n            return 0;\\n        }\\n    }        \\n\\n    function _getIndexedPrizeReward(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // wihtout the maturing price calculating prize is impossible\\n        if (!isMatured) return (0, 0);\\n\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        // users that don't stake don't get any prize also\\n        if (userStakes.length == 0) return (0, 0);\\n\\n        // the prize reward considered 0 if stakeIndex exceeds\\n        if (stakeIndex >= userStakes.length) return (0,0);\\n\\n        // If the first prize reward is withdrawn, we can assume that all the prize/collaborative rewards are withdrawn\\n        if (userStakes[stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingBTCPrizeAmount =\\n            (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 btcReward = 0;\\n\\n        uint256 _percent = _getPercentageReward(userStakes[stakeIndex].rank);\\n\\n        reward = reward.add(\\n                        prizeAmount.mulBP(_percent)\\n                    );\\n\\n        btcReward = btcReward.add(\\n                        maturingBTCPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (collaborativeReward > 0) {\\n            reward = reward.addBP(collaborativeReward);\\n            btcReward = btcReward.addBP(collaborativeReward);\\n        }\\n\\n        return (reward, btcReward);\\n    }\\n\\n    function _withdrawPrizeReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function _withdrawIndexedPrizeReward(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (userStakes[stakeIndex].prizeRewardWithdrawn) return;\\n\\n        userStakes[stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    // getTotalStakedBalance return remained staked balance\\n    function _getTotalStakedBalance(address staker)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            if (!userStakes[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    userStakes[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    // getIndexedStakedBalance return the remained staked amount\\n    function _getIndexedStakedBalance(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n        if (stakeIndex >= userStakes.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!userStakes[stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                userStakes[stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function _withdrawStakedBalance(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].didUnstake = true;\\n        }\\n    }\\n\\n    function _withdrawIndexedStakedBalance(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (stakeIndex >= userStakes.length) return;\\n\\n        userStakes[stakeIndex].didUnstake = true;\\n    }\\n\\n    function _getTotalReward(address staker)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // since in the getPrizeReward function the maturingPrice is used\\n        // so we got error if it would not be maturityDate\\n        uint256 prizeReward;\\n        uint256 btcPrizeReward;\\n        uint256 stakingReward = _getStakingReward(staker);\\n        (prizeReward, btcPrizeReward) = _getPrizeReward(staker);\\n\\n        return (stakingReward.add(prizeReward), btcPrizeReward);\\n    }\\n\\n    \\n    function _getIndexedReward(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // since in the getPrizeReward function the maturingPrice is used\\n        // so we got error if it would not be maturityDate\\n        uint256 prizeReward;\\n        uint256 btcPrizeReward;\\n        uint256 stakingReward = _getIndexedStakingReward(staker, stakeIndex);\\n        (prizeReward, btcPrizeReward) = _getIndexedPrizeReward(staker, stakeIndex);\\n\\n        return (stakingReward.add(prizeReward), btcPrizeReward);\\n    }\\n\\n    function getStakingReward() external view returns (uint256) {\\n        return _getStakingReward(_msgSender());\\n    }\\n    function getIndexedStakingReward(uint256 stakeIndex) external view returns (uint256) {\\n        return _getIndexedStakingReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getPrizeReward() external view returns (uint256, uint256) {\\n        return _getPrizeReward(_msgSender());\\n    }\\n    function getIndexedPrizeReward(uint256 stakeIndex) external view returns (uint256, uint256) {\\n        return _getIndexedPrizeReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getTotalStakedBalance() external view returns (uint256) {\\n        return _getTotalStakedBalance(_msgSender());\\n    }\\n    function getIndexedStakedBalance(uint256 stakeIndex) external view returns (uint256) {\\n        return _getIndexedStakedBalance(_msgSender(), stakeIndex);\\n    }\\n\\n    function getTotalReward() external view returns (uint256, uint256) {\\n        return _getTotalReward(_msgSender());\\n    }\\n    function getIndexedReward(uint256 stakeIndex) external view returns (uint256, uint256) {\\n        return _getIndexedReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate =\\n            stakeTaxRate > tokenTaxRate ? stakeTaxRate.sub(tokenTaxRate) : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function withdrawStuckTokens(address _stuckToken, uint256 amount, address receiver)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            _stuckToken != address(totemToken), \\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n    // hasUnStaked return true if the user staked in the pool and then has unStaked it (in claim usecase)\\n    function hasUnStaked(address staker, uint256 stakeIndex) external view returns (bool) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        require(\\n            userStakes.length > 0,\\n            \\\"0380 this address didn't stake in this pool\\\"\\n        );\\n\\n        require(\\n            stakeIndex < userStakes.length,\\n            \\\"0381 this index exceeds\\\"\\n        );\\n    \\n\\n        if (userStakes[stakeIndex].didUnstake) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyPoolCreator {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25273497056f9124a750eaa930d10dec2d139c71de9413c18fbfce45a0feb7cd\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../Role/PoolCreator.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\n\\ncontract StakingPoolFactory is PoolCreator {\\n    TotemToken public immutable totemToken;\\n    RewardManager public immutable rewardManager;\\n    address public swapRouter;\\n    address public oracleContract;\\n    // TODO: we can add a mechanism to predict price of other top market coins \\n    // like ETH, so it would be better not to use immutable addresses.\\n    address immutable usdToken;\\n    address immutable btcToken;\\n    uint256 public stakingPoolTaxRate;\\n    uint256 public minimumStakeAmount;\\n\\n    event PoolCreated(\\n        address indexed pool,\\n        uint256 maturityTime,\\n        uint256 lockTime,\\n        uint256 sizeAllocation,\\n        uint256 stakeApr,\\n        uint256 prizeAmount,\\n        uint256 usdPrizeAmount,\\n        uint256 potentialCollabReward,\\n        uint256 stakingPoolTaxRate,\\n        uint256 minimumStakeAmount,\\n        bool isEnhancedEnabled\\n    );\\n\\n    constructor(\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _oracleContract,\\n        address _swapRouter,\\n        address _usdToken,\\n        address _btcToken\\n    ) {\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n        oracleContract = _oracleContract;\\n        swapRouter = _swapRouter;\\n        usdToken = _usdToken;\\n        btcToken = _btcToken;\\n        \\n        stakingPoolTaxRate = 300;\\n\\n        // minimum amount of totem can be staked is 250 TOTM,\\n        // it's a mechanism to prevent DDOS attack\\n        minimumStakeAmount = 250*(10**18);\\n    }\\n\\n    function create(\\n        uint256 maturityTime,\\n        uint256 lockTime,\\n        uint256 sizeAllocation,\\n        uint256 stakeApr,\\n        uint256 prizeAmount,\\n        uint256 usdPrizeAmount,\\n        uint256 potentialCollabReward,\\n        bool isEnhancedEnabled\\n    ) external onlyPoolCreator returns (address) {\\n\\n        // TODO: should the stakeApr and potential collab reward be checked?\\n        uint256[9] memory variables =\\n            [\\n                maturityTime,\\n                lockTime,\\n                sizeAllocation,\\n                stakeApr,\\n                prizeAmount,\\n                usdPrizeAmount,\\n                potentialCollabReward,\\n                stakingPoolTaxRate,\\n                minimumStakeAmount\\n            ];\\n\\n        address newPool =\\n            address(\\n                new StakingPool(\\n                    totemToken,\\n                    rewardManager,\\n                    _msgSender(),\\n                    swapRouter,\\n                    oracleContract,\\n                    usdToken,\\n                    btcToken,\\n                    variables,\\n                    isEnhancedEnabled\\n                )\\n            );\\n\\n        emit PoolCreated(\\n            newPool,\\n            maturityTime,\\n            lockTime,\\n            sizeAllocation,\\n            stakeApr,\\n            prizeAmount,\\n            usdPrizeAmount,\\n            potentialCollabReward,\\n            stakingPoolTaxRate,\\n            minimumStakeAmount,\\n            isEnhancedEnabled\\n        );\\n\\n        rewardManager.addPool(newPool);\\n\\n        return newPool;\\n    }\\n\\n    function setOracleContract(address _oracleContract)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(_oracleContract != address(0), \\\"0400\\\");\\n        oracleContract = _oracleContract;\\n    }\\n\\n    function setSwapRouter(address _swapRouter) external onlyPoolCreator {\\n        require(_swapRouter != address(0), \\\"0410\\\");\\n        swapRouter = _swapRouter;\\n    }\\n\\n    function setTaxRate(uint256 newStakingPoolTaxRate)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            newStakingPoolTaxRate < 10000,\\n            \\\"0420 Tax connot be over 100% (10000 BP)\\\"\\n        );\\n        stakingPoolTaxRate = newStakingPoolTaxRate;\\n    }\\n\\n    function setMinimuntToStake(uint256 newMinimumStakeAmount)\\n        external\\n        onlyPoolCreator\\n    {\\n        // TODO: any condition can be applied to check the minimum amount\\n        minimumStakeAmount = newMinimumStakeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x6ab4a8dcee67eb3c59ea45a5916cae0d905488981b75f37460530aa9d242e35e\",\"license\":\"UNLICENSED\"},\"contracts/TotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\nimport \\\"./BasisPoints.sol\\\";\\n\\ncontract TotemToken is ILockerUser, Context, ERC20, Ownable {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"Totem Token\\\";\\n    string public constant SYMBOL = \\\"TOTM\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY = 10000000 * (10**uint256(DECIMALS));\\n\\n    address public CommunityDevelopmentAddr;\\n    address public StakingRewardsAddr;\\n    address public LiquidityPoolAddr;\\n    address public PublicSaleAddr;\\n    address public AdvisorsAddr;\\n    address public SeedInvestmentAddr;\\n    address public PrivateSaleAddr;\\n    address public TeamAllocationAddr;\\n    address public StrategicRoundAddr;\\n\\n    uint256 public constant COMMUNITY_DEVELOPMENT =\\n        1000000 * (10**uint256(DECIMALS)); // 10% for Community development\\n    uint256 public constant STAKING_REWARDS = 1650000 * (10**uint256(DECIMALS)); // 16.5% for Staking Revawards\\n    uint256 public constant LIQUIDITY_POOL = 600000 * (10**uint256(DECIMALS)); // 6% for Liquidity pool\\n    uint256 public constant ADVISORS = 850000 * (10**uint256(DECIMALS)); // 8.5% for Advisors\\n    uint256 public constant SEED_INVESTMENT = 450000 * (10**uint256(DECIMALS)); // 4.5% for Seed investment\\n    uint256 public constant PRIVATE_SALE = 2000000 * (10**uint256(DECIMALS)); // 20% for Private Sale\\n    uint256 public constant TEAM_ALLOCATION = 1500000 * (10**uint256(DECIMALS)); // 15% for Team allocation\\n\\n    uint256 public constant LAUNCH_POOL =\\n        5882352941 * (10**uint256(DECIMALS - 5)); // 58823.52941 for LaunchPool\\n    uint256 public constant PUBLIC_SALE =\\n        450000 * (10**uint256(DECIMALS)) + LAUNCH_POOL; // 4.5% for Public Sale\\n    uint256 public constant STRATEGIC_ROUND =\\n        1500000 * (10**uint256(DECIMALS)) - LAUNCH_POOL; // 15% for Strategic Round\\n    uint256 public taxRate = 300;\\n    address public taxationWallet;\\n\\n    bool private _isDistributionComplete = false;\\n\\n    mapping(address => bool) public taxExempt;\\n\\n    ILocker public override locker;\\n\\n    constructor() ERC20(NAME, SYMBOL) {\\n        taxationWallet = _msgSender();\\n\\n        _mint(address(this), INITIAL_SUPPLY);\\n    }\\n\\n    function setLocker(address _locker) external onlyOwner() {\\n        require(_locker != address(0), \\\"_locker cannot be address(0)\\\");\\n        locker = ILocker(_locker);\\n        emit SetLocker(_locker);\\n    }\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) public onlyOwner {\\n        require(!_isDistributionComplete);\\n\\n        require(_CommunityDevelopmentAddr != address(0));\\n        require(_StakingRewardsAddr != address(0));\\n        require(_LiquidityPoolAddr != address(0));\\n        require(_PublicSaleAddr != address(0));\\n        require(_AdvisorsAddr != address(0));\\n        require(_SeedInvestmentAddr != address(0));\\n        require(_PrivateSaleAddr != address(0));\\n        require(_TeamAllocationAddr != address(0));\\n        require(_StrategicRoundAddr != address(0));\\n        // set parnters addresses\\n        CommunityDevelopmentAddr = _CommunityDevelopmentAddr;\\n        StakingRewardsAddr = _StakingRewardsAddr;\\n        LiquidityPoolAddr = _LiquidityPoolAddr;\\n        PublicSaleAddr = _PublicSaleAddr;\\n        AdvisorsAddr = _AdvisorsAddr;\\n        SeedInvestmentAddr = _SeedInvestmentAddr;\\n        PrivateSaleAddr = _PrivateSaleAddr;\\n        TeamAllocationAddr = _TeamAllocationAddr;\\n        StrategicRoundAddr = _StrategicRoundAddr;\\n    }\\n\\n    function distributeTokens() public onlyOwner {\\n        require((!_isDistributionComplete));\\n\\n        _transfer(\\n            address(this),\\n            CommunityDevelopmentAddr,\\n            COMMUNITY_DEVELOPMENT\\n        );\\n        _transfer(address(this), StakingRewardsAddr, STAKING_REWARDS);\\n        _transfer(address(this), LiquidityPoolAddr, LIQUIDITY_POOL);\\n        _transfer(address(this), PublicSaleAddr, PUBLIC_SALE);\\n        _transfer(address(this), AdvisorsAddr, ADVISORS);\\n        _transfer(address(this), SeedInvestmentAddr, SEED_INVESTMENT);\\n        _transfer(address(this), PrivateSaleAddr, PRIVATE_SALE);\\n        _transfer(address(this), TeamAllocationAddr, TEAM_ALLOCATION);\\n        _transfer(address(this), StrategicRoundAddr, STRATEGIC_ROUND);\\n\\n        // Whitelist these addresses as tex exempt\\n        setTaxExemptStatus(CommunityDevelopmentAddr, true);\\n        setTaxExemptStatus(StakingRewardsAddr, true);\\n        setTaxExemptStatus(LiquidityPoolAddr, true);\\n        setTaxExemptStatus(PublicSaleAddr, true);\\n        setTaxExemptStatus(AdvisorsAddr, true);\\n        setTaxExemptStatus(SeedInvestmentAddr, true);\\n        setTaxExemptStatus(PrivateSaleAddr, true);\\n        setTaxExemptStatus(TeamAllocationAddr, true);\\n        setTaxExemptStatus(StrategicRoundAddr, true);\\n\\n        _isDistributionComplete = true;\\n    }\\n\\n    function setTaxRate(uint256 newTaxRate) public onlyOwner {\\n        require(newTaxRate < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\n        taxRate = newTaxRate;\\n    }\\n\\n    function setTaxExemptStatus(address account, bool status) public onlyOwner {\\n        require(account != address(0));\\n        taxExempt[account] = status;\\n    }\\n\\n    function setTaxationWallet(address newTaxationWallet) public onlyOwner {\\n        require(newTaxationWallet != address(0));\\n        taxationWallet = newTaxationWallet;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (address(locker) != address(0)) {\\n            locker.lockOrGetPenalty(sender, recipient);\\n        }\\n        ERC20._transfer(sender, recipient, amount);\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(sender != recipient, \\\"Cannot self transfer\\\");\\n\\n        uint256 tax = amount.mulBP(taxRate);\\n        uint256 tokensToTransfer = amount.sub(tax);\\n\\n        _transfer(sender, taxationWallet, tax);\\n        _transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_msgSender() != recipient, \\\"ERC20: cannot self transfer\\\");\\n        !taxExempt[_msgSender()]\\n            ? _transferWithTax(_msgSender(), recipient, amount)\\n            : _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        !taxExempt[sender]\\n            ? _transferWithTax(sender, recipient, amount)\\n            : _transfer(sender, recipient, amount);\\n\\n        approve(\\n            _msgSender(),\\n            allowance(sender, _msgSender()).sub(\\n                amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfa21ba84a53a411dd96bf813d4c25a1168b631e1e5d098bb892c7e46a5e83ab0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005bc838038062005bc8833981810160405260c08110156200003857600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091620000716200006b620000fd565b62000101565b6200008a576200008a62000084620000fd565b62000124565b6001600160601b0319606096871b811660805294861b851660a052600280546001600160a01b039586166001600160a01b031991821617909155600180549490951693169290921790925590831b821660c05290911b1660e05261012c600355680d8d726b7177a8000060045562000263565b3390565b60006200011e8260006200017660201b6200090e1790919060201c565b92915050565b6200013f816000620001df60201b620009771790919060201c565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b60006001600160a01b038216620001bf5760405162461bcd60e51b815260040180806020018281038252602281526020018062005ba66022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b620001eb828262000176565b156200023e576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60805160601c60a05160601c60c05160601c60e05160601c6158f2620002b4600039806106375250806106155250806102c252806105d1528061078e5250806105b052806108ec52506158f26000f3fe60806040523480156200001157600080fd5b5060043610620001005760003560e01c80639a94775d1162000099578063c31c9c07116200006f578063c31c9c071462000282578063c6d69a30146200028c578063e281cc7e14620002ac578063e8153c9314620002b65762000100565b80639a94775d14620001ee578063b9603d6a146200022b578063bece753214620002785762000100565b8063441f5c6511620000db578063441f5c651462000176578063496ccd9b14620001925780636b036f4514620001bb5780638c2d741c14620001c55762000100565b80630f4ef8a6146200010557806337e77675146200012b57806341273657146200014d575b600080fd5b6200010f620002c0565b604080516001600160a01b039092168252519081900360200190f35b6200014b600480360360208110156200014357600080fd5b5035620002e4565b005b6200014b600480360360208110156200016557600080fd5b50356001600160a01b03166200033a565b62000180620003ec565b60408051918252519081900360200190f35b6200014b60048036036020811015620001aa57600080fd5b50356001600160a01b0316620003f2565b62000180620004a4565b6200014b60048036036020811015620001dd57600080fd5b50356001600160a01b0316620004aa565b62000217600480360360208110156200020657600080fd5b50356001600160a01b031662000503565b604080519115158252519081900360200190f35b6200010f60048036036101008110156200024457600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e00135151562000517565b6200010f62000824565b6200010f62000833565b6200014b60048036036020811015620002a457600080fd5b503562000842565b6200014b620008d4565b6200010f620008ea565b7f000000000000000000000000000000000000000000000000000000000000000081565b620002f8620002f2620009fb565b62000503565b620003355760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b600455565b62000348620002f2620009fb565b620003855760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6001600160a01b038116620003ca576040805162461bcd60e51b815260206004808301919091526024820152630303431360e41b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60035481565b62000400620002f2620009fb565b6200043d5760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6001600160a01b03811662000482576040805162461bcd60e51b815260206004808301919091526024820152630303430360e41b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b620004b8620002f2620009fb565b620004f55760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6200050081620009ff565b50565b60006200051181836200090e565b92915050565b600062000527620002f2620009fb565b620005645760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b60006040518061012001604052808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020016003548152602001600454815250905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000620005fa620009fb565b6001546002546040516001600160a01b0392831692909116907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009089908c90620006669062000af2565b6001600160a01b03808b168252898116602083015288811660408301528781166060830152868116608083015285811660a0830152841660c082015260e081018361012080838360005b83811015620006ca578181015183820152602001620006b0565b5050505090500182151581526020019950505050505050505050604051809103906000f08015801562000701573d6000803e3d6000fd5b50600354600454604080518f8152602081018f90528082018e9052606081018d9052608081018c905260a081018b905260c081018a905260e0810193909352610100830191909152861515610120830152519192506001600160a01b038316917f75243069ec60d1b18edc96a68bc98623353ebb06c41582ecbcaa59e4ec8df221918190036101400190a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d914cd4b826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015620007fc57600080fd5b505af115801562000811573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b6002546001600160a01b031681565b6001546001600160a01b031681565b62000850620002f2620009fb565b6200088d5760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6127108110620008cf5760405162461bcd60e51b8152600401808060200182810382526027815260200180620058196027913960400191505060405180910390fd5b600355565b620008e8620008e2620009fb565b62000a43565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216620009575760405162461bcd60e51b81526004018080602001828103825260228152602001806200589b6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6200098382826200090e565b15620009d6576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b3390565b62000a0c60008262000977565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b62000a5060008262000a87565b6040516001600160a01b038216907f2bc71cc60b543df5fdd80ef5a45e1cdb344843769b649e9d901de3be24aeb24e90600090a250565b62000a9382826200090e565b62000ad05760405162461bcd60e51b81526004018080602001828103825260218152602001806200587a6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b614d188062000b018339019056fe6102406040523480156200001257600080fd5b5060405162004d1838038062004d1883398181016040526102208110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c0870151610200880151969795969495939492939192909160e001908584848760006200008262000311565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038116620000e057600080fd5b600180546001600160a01b03199081166001600160a01b0393841617909155600380548216958316959095179094556004805485169382169390931790925560058054841691831691909117905560608b811b6001600160601b0319908116608052908b901b1660a052600c8054909216908916179055620001628462000315565b606092831b6001600160601b03191660c09081524260e090815283516101205260208085015161010090815260408087015161014052968601516101605260808601516101805260a08601516101a0529285015161020052908401516101c0529201516101e052151560f81b61022052815180830183526001808252610ea6828401908152600d80548084018255600082815294517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb560029283028181019290925593517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb691820155875180890189528281526107d081890190815284548088018655858952915191840280870192909255519082015587518089018952600381526103e881890190815284548088018655858952915191840280870192909255519082015587518089018952600a815260fa818901908152845480880186558589529151918402808701929092555190820155875180890190985260198852606496880196875282549485018355919094529451919092029182015590519101555062000337945050505050565b3390565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205160f81c614855620004c3600039806113e7528061433d525080610d455280610d895280612fb75250806117e65280611a795250806117c252806135fb528061362b525080610c7152806118c852806121e952806126ff5280612b285280613a395280614274525080611a005280613abb52806142bd525080612549528061340252508061142f5280611ae25280611c595280612060525080610bce528061140b528061171252806133b5525080610b145280610bef528061173352806133935280614390525080610af05280610c1052806117545280613372528061436f52508061094b5280610eba528061272b5280612b54525080610b3852806125b6528061264552806129e05280612a6f5250806115c35280611b155280611ba65280611cf25280611db55280611de45280612587528061283b52806129b15280612c625280612fdb52506148556000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c8063857b21ee116101f4578063c6c1decd1161011a578063eee39403116100ad578063f3d9dc0d1161007c578063f3d9dc0d14610914578063f5e96fc91461091c578063fd5e6dd114610924578063fd8fd47f14610941576103af565b8063eee3940314610896578063f0141d84146108b3578063f1b17a8b146108d1578063f2fde38b146108ee576103af565b8063de09ee20116100e9578063de09ee201461083e578063e425df8c1461087e578063e8153c9314610886578063eda2d4241461088e576103af565b8063c6c1decd14610809578063d025188b14610811578063d7efb6b714610819578063d83db49f14610821576103af565b8063a150194b11610192578063b1b1e1c011610161578063b1b1e1c0146107d4578063b88a802f146107f1578063bf852196146107f9578063c120105414610801576103af565b8063a150194b14610764578063a4e2d6341461076c578063a508bc7114610774578063aa7bcb57146107cc576103af565b80638e15f473116101ce5780638e15f4731461072f5780639234a39a1461073757806395c2ba471461073f5780639d9a62df14610747576103af565b8063857b21ee146106fc5780638bfbbcbe1461071f5780638da5cb5b14610727576103af565b806351eacbf0116102d957806373f31703116102775780637d1fcbfa116102465780637d1fcbfa146106545780637f2b6a0d14610675578063817b1cd21461067d578063850fa7cb14610685576103af565b806373f31703146105f5578063765e14d8146105fd578063785fa627146106295780637b0472f014610631576103af565b80635e2e2ffc116102b35780635e2e2ffc146105d55780636847d0c5146105dd5780636b036f45146105e5578063715018a6146105ed576103af565b806351eacbf0146105715780635b9f4f90146105795780635d2631e21461059f576103af565b80632e577d0711610351578063444a490211610320578063444a4902146104ff57806345e91319146105215780634bc4eeb2146105615780634e8bfdaa14610569576103af565b80632e577d071461044657806331769ef71461044e5780634026478e1461045657806343352d611461045e576103af565b80630d6680871161038d5780630d6680871461040f5780630f4ef8a6146104175780631898a1a71461041f5780632d42cf7d1461043c576103af565b8063074bc101146103b457806309082c29146103d85780630b97bc8614610407575b600080fd5b6103bc610949565b604080516001600160a01b039092168252519081900360200190f35b6103f5600480360360208110156103ee57600080fd5b503561096d565b60408051918252519081900360200190f35b6103f5610aee565b6103f5610b12565b6103bc610b36565b6103f56004803603602081101561043557600080fd5b5035610b5a565b610444610b73565b005b6103bc610ea6565b6103f5610eb6565b610444610f56565b610466610fb9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104aa578181015183820152602001610492565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104e95781810151838201526020016104d1565b5050505090500194505050505060405180910390f35b610444600480360361064081101561051657600080fd5b5061032081016110fe565b61054d6004803603604081101561053757600080fd5b506001600160a01b038135169060200135611253565b604080519115158252519081900360200190f35b61054d6113e5565b6103f5611409565b6103f561142d565b6103f56004803603602081101561058f57600080fd5b50356001600160a01b0316611451565b610444600480360360608110156105b557600080fd5b506001600160a01b03813581169160208101359160409091013516611568565b6104446116b7565b6103f56117c0565b6103f56117e4565b610444611808565b6103f56118c6565b6103f56004803603604081101561061357600080fd5b506001600160a01b0381351690602001356118ea565b6103f56119fe565b6104446004803603604081101561064757600080fd5b5080359060200135611a22565b61065c6120ed565b6040805192835260208301919091528051918290030190f35b61054d612108565b6103f5612118565b6106b16004803603604081101561069b57600080fd5b506001600160a01b03813516906020013561211e565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015251908190036101200190f35b6104446004803603604081101561071257600080fd5b508035906020013561218c565b610444612335565b6103bc6123cc565b6103f56123db565b61065c612475565b6103f5612488565b61065c6004803603602081101561075d57600080fd5b503561248d565b6103f56124ab565b61054d6124b0565b61077c6124c0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107b85781810151838201526020016107a0565b505050509050019250505060405180910390f35b6103f5612547565b610444600480360360208110156107ea57600080fd5b503561256b565b610444612995565b6103f5612dba565b6103f5612efa565b6103bc612f45565b6103f5612f54565b61054d612f5a565b6103f56004803603602081101561083757600080fd5b5035612f6a565b61085b6004803603602081101561085457600080fd5b5035612f7d565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103f5612fb5565b6103bc612fd9565b6103f5612ffd565b61065c600480360360208110156108ac57600080fd5b5035613014565b6108bb613028565b6040805160ff9092168252519081900360200190f35b61065c600480360360208110156108e757600080fd5b50356130ab565b6104446004803603602081101561090457600080fd5b50356001600160a01b03166130d9565b6103f56131ed565b6103bc6131f3565b61085b6004803603602081101561093a57600080fd5b5035613202565b6103f5613212565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035460009081906001600160a01b031663d06ca61f8461098c6124c0565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109e15781810151838201526020016109c9565b50505050905001935050505060006040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610a4257600080fd5b8101908080516040519392919084640100000000821115610a6257600080fd5b908301906020820185811115610a7757600080fd5b8251866020820283011164010000000082111715610a9457600080fd5b82525081516020918201928201910280838360005b83811015610ac1578181015183820152602001610aa9565b50505050905001604052505050905080600181518110610add57fe5b60200260200101519150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610b6d610b6761321b565b836118ea565b92915050565b600c546001600160a01b0316610b8761321b565b6001600160a01b031614610bcc5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000101421015610c6f5760405162461bcd60e51b815260040180806020018281038252602c8152602001806146bf602c913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000015610cee57610c9d610eb6565b610cee576040805162461bcd60e51b815260206004820152601e60248201527f30333631204254432052657761726473206e6f7420617661696c61626c650000604482015290519081900360640190fd5b60075415610d4357600854610d43576040805162461bcd60e51b81526020600482015260166024820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000015610dae576000610d73612dba565b9050610d8381639502f90061321f565b610dac577f0000000000000000000000000000000000000000000000000000000000000000600b555b505b600854600090601910610dc357600854610dc6565b60195b905060005b81811015610e5757806001016006600060088481548110610de857fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206008805484908110610e1f57fe5b90600052602060002090600202016001015481548110610e3b57fe5b6000918252602090912060066008909202010155600101610dcb565b50600c805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b1790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6003546001600160a01b03165b90565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d6020811015610f4f57600080fd5b5051905090565b600c546001600160a01b0316610f6a61321b565b6001600160a01b031614610faf5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b610fb761328d565b565b606080600060078054905067ffffffffffffffff81118015610fda57600080fd5b50604051908082528060200260200182016040528015611004578160200160208202803683370190505b5060075490915060009067ffffffffffffffff8111801561102457600080fd5b5060405190808252806020026020018201604052801561104e578160200160208202803683370190505b50905060005b6007548110156110f4576007818154811061106b57fe5b600091825260209091206002909102015483516001600160a01b039091169084908390811061109657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600781815481106110c357fe5b9060005260206000209060020201600101548282815181106110e157fe5b6020908102919091010152600101611054565b5090925090509091565b600c546001600160a01b031661111261321b565b6001600160a01b0316146111575760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b60005b601981101561122557600083826019811061117157fe5b60200201356001600160a01b03166001600160a01b0316141561119357611225565b600860405180604001604052808584601981106111ac57fe5b60200201356001600160a01b03166001600160a01b031681526020018484601981106111d457fe5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201550161115a565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561131857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611286565b505050509050600081511161135e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614795602b913960400191505060405180910390fd5b805183106113b3576040805162461bcd60e51b815260206004820152601760248201527f30333831207468697320696e6465782065786365656473000000000000000000604482015290519081900360640190fd5b8083815181106113bf57fe5b60200260200101516101000151156113db576001915050610b6d565b5060009392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038116600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561151657600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611484565b505050509050805160001415611530576000915050610ae9565b6000805b825181101561156057600061154986836132cb565b90506115558382613463565b925050600101611534565b509392505050565b600c546001600160a01b031661157c61321b565b6001600160a01b0316146115c15760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156116325760405162461bcd60e51b81526004018080602001828103825260218152602001806147116021913960400191505060405180910390fd5b6040805163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529151859283169163a9059cbb9160448083019260209291908290030181600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d60208110156116af57600080fd5b505050505050565b600c546001600160a01b03166116cb61321b565b6001600160a01b0316146117105760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000001014210156117b35760405162461bcd60e51b81526004018080602001828103825260368152602001806147ea6036913960400191505060405180910390fd5b6117bb6123db565b600a55565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61181061321b565b6001600160a01b03166118216123cc565b6001600160a01b03161461187c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b828210156119af57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161191d565b5050505090508051600014156119c9576000915050610b6d565b805183106119db576000915050610b6d565b6000806119e886866132cb565b90506119f48282613463565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600160a01b900460ff1615611a77576040805162461bcd60e51b81526020600482015260136024820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604482015290519081900360640190fd5b7f0000000000000000000000000000000000000000000000000000000000000000821015611ad65760405162461bcd60e51b815260040180806020018281038252602a8152602001806147c0602a913960400191505060405180910390fd5b6000611b0e6064611b087f000000000000000000000000000000000000000000000000000000000000000060056134c4565b9061351d565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663771a3a1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d6020811015611b9657600080fd5b5051905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1ecfc68611bd361321b565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d6020811015611c3a57600080fd5b5051611c4f57611c4a8683613584565b611c52565b60005b9050611c7e7f000000000000000000000000000000000000000000000000000000000000000085613463565b611c9d82611c978960095461346390919063ffffffff16565b90613596565b1115611cda5760405162461bcd60e51b81526004018080602001828103825260268152602001806146eb6026913960400191505060405180910390fd5b611ce486836135f3565b965092506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd611d1f61321b565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015230602483015289870160448301525160648083019260209291908290030181600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b505050506040513d6020811015611d9e57600080fd5b50611dab90508682613596565b95508215611ee2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a5db0a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018790525160448083019260209291908290030181600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b505050506040513d6020811015611edf57600080fd5b50505b600954611eef9087613463565b60098190555060076040518060400160405280611f0a61321b565b6001600160a01b0316815260200160066000611f2461321b565b6001600160a01b0390811682526020808301939093526040909101600090812054909352845460018082018755958452828420855160029092020180546001600160a01b031916919092161781559201519190920155600690611f8561321b565b6001600160a01b03168152602080820192909252604090810160009081208251610120810184528a81524281860181815294820184815260608301918252608083018c815260001960a0850181815260c0860191825260e086018881526101008088018a8152895460018082018c559a8c529c909a2097516008909c029097019a8b559851968a01969096559151600289015591516003880155905160048701559151600586015590516006850155915160079093018054915160ff19929092169315159390931761ff0019169015159091021790556120857f000000000000000000000000000000000000000000000000000000000000000085613596565b600954106120955761209561328d565b61209d61321b565b6001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68787604051808381526020018281526020019250505060405180910390a2505050505050565b6000806121006120fb61321b565b61368f565b915091509091565b600c54600160a81b900460ff1681565b60095481565b6006602052816000526040600020818154811061213a57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b600c546001600160a01b03166121a061321b565b6001600160a01b0316146121e55760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000116122445760405162461bcd60e51b81526004018080602001828103825260218152602001806147746021913960400191505060405180910390fd5b60008211612299576040805162461bcd60e51b815260206004820152601960248201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604482015290519081900360640190fd5b428110156122e5576040805162461bcd60e51b81526020600482015260146024820152733033343220646561646c696e65206973206c6f7760601b604482015290519081900360640190fd5b60006122ef610ea6565b90506122fb81846136c6565b60006123068461096d565b905060006123206123198361012c613584565b8390613596565b905061232e3086838761378b565b5050505050565b600c546001600160a01b031661234961321b565b6001600160a01b03161461238e5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b600c805460ff60b01b1916600160b01b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b6000546001600160a01b031690565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d60a081101561245657600080fd5b50602001519050600081121561246d57600061246f565b805b91505090565b60008061210061248361321b565b613924565b600581565b6000806124a161249b61321b565b84613b3f565b915091505b915091565b600881565b600c54600160a01b900460ff1681565b60408051600280825260608083018452926000929190602083019080368337505060045482519293506001600160a01b0316918391506000906124ff57fe5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061252a57fe5b6001600160a01b0390921660209283029190910190910152905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061257961249b61321b565b909250905081156126da57817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561261257600080fd5b505afa158015612626573d6000803e3d6000fd5b505050506040513d602081101561263c57600080fd5b5051106126da577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc61267a61321b565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156126c157600080fd5b505af11580156126d5573d6000803e3d6000fd5b505050505b6126eb6126e561321b565b84613b79565b600c54600160a81b900460ff1615612940577f00000000000000000000000000000000000000000000000000000000000000001561281e57801561280d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61276061321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156127a757600080fd5b505af11580156127bb573d6000803e3d6000fd5b505050506040513d60208110156127d157600080fd5b505161280d576040805162461bcd60e51b815260206004808301919091526024820152630303333360e41b604482015290519081900360640190fd5b61281e61281861321b565b84613c33565b600061283161282b61321b565b85613cba565b9050801561293e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61287061321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b505050506040513d60208110156128e157600080fd5b506128f590506128ef61321b565b85613dff565b6128fd61321b565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b61294861321b565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a2505050565b6000806129a36120fb61321b565b90925090508115612b0457817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a3c57600080fd5b505afa158015612a50573d6000803e3d6000fd5b505050506040513d6020811015612a6657600080fd5b505110612b04577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc612aa461321b565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612aeb57600080fd5b505af1158015612aff573d6000803e3d6000fd5b505050505b612b14612b0f61321b565b613e6c565b600c54600160a81b900460ff1615612d66577f000000000000000000000000000000000000000000000000000000000000000015612c46578015612c36577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612b8961321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612bd057600080fd5b505af1158015612be4573d6000803e3d6000fd5b505050506040513d6020811015612bfa57600080fd5b5051612c36576040805162461bcd60e51b815260206004808301919091526024820152630303332360e41b604482015290519081900360640190fd5b612c46612c4161321b565b613f0b565b6000612c58612c5361321b565b613f73565b90508015612d64577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612c9761321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612cde57600080fd5b505af1158015612cf2573d6000803e3d6000fd5b505050506040513d6020811015612d0857600080fd5b50612d1b9050612d1661321b565b6140b1565b612d2361321b565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612d6e61321b565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b600060095460001415612dcf57506000610eb3565b6000805b600754811015612eeb5760006006600060078481548110612df057fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206007805484908110612e2757fe5b90600052602060002090600202016001015481548110612e4357fe5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e08501526101009182900416151590830152909250612ee091612ed991906134c4565b8490613463565b925050600101612dd3565b5060095461246f90829061351d565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610f2557600080fd5b600c546001600160a01b031681565b600a5481565b600c54600160b01b900460ff1681565b6000610b6d612f7761321b565b83613cba565b60088181548110612f8d57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061300f61300a61321b565b611451565b905090565b6000806124a161302261321b565b84614120565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d60208110156130a357600080fd5b505191505090565b600d81815481106130bb57600080fd5b60009182526020909120600290910201805460019091015490915082565b6130e161321b565b6001600160a01b03166130f26123cc565b6001600160a01b03161461314d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166131925760405162461bcd60e51b81526004018080602001828103825260268152602001806146996026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600b5481565b6002546001600160a01b031690565b60078181548110612f8d57600080fd5b600061300f612c535b3390565b6000600a5483111561325d57600a546132388484613596565b1161324557506000610b6d565b600a5461325690611c978585613596565b9050610b6d565b600a5461326a8484613463565b1061327757506000610b6d565b6132566132848484613463565b600a5490613596565b600c805460ff60a01b1916600160a01b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b6001600160a01b03821660009081526006602052604081208054829190849081106132f257fe5b6000918252602080832060408051610120810182526008909402909101805484526001810154928401929092526002820154908301526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460ff808216151560e0840152610100918290041615159082015291507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000017f000000000000000000000000000000000000000000000000000000000000000001904282106133e357426133e5565b815b905060006133f68460200151614339565b9050600061343e6134277f000000000000000000000000000000000000000000000000000000000000000084613463565b6020870151613437908690613596565b8751614440565b905061345785604001518261359690919063ffffffff16565b98975050505050505050565b6000828201838110156134bd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826134d357506000610b6d565b828202828482816134e057fe5b04146134bd5760405162461bcd60e51b81526004018080602001828103825260218152602001806147536021913960400191505060405180910390fd5b6000808211613573576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161357c57fe5b049392505050565b60006134bd612710611b0885856134c4565b6000828211156135ed576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806000837f000000000000000000000000000000000000000000000000000000000000000011613626576000613650565b6136507f000000000000000000000000000000000000000000000000000000000000000085613596565b905080613664576000859250925050613688565b61366e8582613584565b61368261367b8784613584565b8790613596565b92509250505b9250929050565b60008060008060006136a086611451565b90506136ab86613924565b90935091506136ba8184613463565b94509092505050915091565b6002546040805163095ea7b360e01b81526001600160a01b038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561371c57600080fd5b505af1158015613730573d6000803e3d6000fd5b505050506040513d602081101561374657600080fd5b50506040805182815290516001600160a01b038416917fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a1919081900360200190a25050565b6001600160a01b03841661379e57600080fd5b6003546001600160a01b03166338ed173984846137b96124c0565b88866040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561382b578181015183820152602001613813565b505050509050019650505050505050600060405180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561389157600080fd5b81019080805160405193929190846401000000008211156138b157600080fd5b9083019060208201858111156138c657600080fd5b82518660208202830111640100000000821117156138e357600080fd5b82525081516020918201928201910280838360005b838110156139105781810151838201526020016138f8565b505050509050016040525050505050505050565b600c546000908190600160a81b900460ff16613945575060009050806124a6565b6001600160a01b038316600090815260066020908152604080832080548251818502810185019093528083529192909190849084015b82821015613a0d57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161397b565b505050509050805160001415613a2a5760008092509250506124a6565b600a54600090613a6290611b087f00000000000000000000000000000000000000000000000000000000000000006305f5e1006134c4565b905060008060005b8451811015613b0257848181518110613a7f57fe5b602002602001015160e00151613afa576000613ab1868381518110613aa057fe5b602002602001015160c00151614549565b9050613ae7613ae07f000000000000000000000000000000000000000000000000000000000000000083613584565b8590613463565b9350613af6612ed98683613584565b9250505b600101613a6a565b50600b5415613b3357600b54613b19908390614670565b9150613b30600b548261467090919063ffffffff16565b90505b90945092505050915091565b6000806000806000613b5187876118ea565b9050613b5d8787614120565b9093509150613b6c8184613463565b9791965090945050505050565b6001600160a01b03821660009081526006602052604090208054613b9d5750613c2f565b80548210613bab5750613c2f565b6000613bb784846132cb565b905042828481548110613bc657fe5b906000526020600020906008020160030181905550613c0b81838581548110613beb57fe5b90600052602060002090600802016002015461346390919063ffffffff16565b828481548110613c1757fe5b90600052602060002090600802016002018190555050505b5050565b6001600160a01b03821660009081526006602052604090208054613c575750613c2f565b808281548110613c6357fe5b600091825260209091206007600890920201015460ff1615613c855750613c2f565b6001818381548110613c9357fe5b60009182526020909120600890910201600701805460ff1916911515919091179055505050565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b82821015613d7f57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613ced565b505050509050805160001415613d99576000915050610b6d565b80518310613dab576000915050610b6d565b6000818481518110613db957fe5b60200260200101516101000151613df757613df4828581518110613dd957fe5b6020026020010151600001518261346390919063ffffffff16565b90505b949350505050565b6001600160a01b03821660009081526006602052604090208054613e235750613c2f565b80548210613e315750613c2f565b6001818381548110613e3f57fe5b906000526020600020906008020160070160016101000a81548160ff021916908315150217905550505050565b6001600160a01b03811660009081526006602052604090208054613e905750613f08565b60005b8154811015613f05576000613ea884836132cb565b905042838381548110613eb757fe5b906000526020600020906008020160030181905550613edc81848481548110613beb57fe5b838381548110613ee857fe5b600091825260209091206002600890920201015550600101613e93565b50505b50565b6001600160a01b03811660009081526006602052604090208054613f2f5750613f08565b60005b8154811015613f05576001828281548110613f4957fe5b60009182526020909120600890910201600701805460ff1916911515919091179055600101613f32565b6001600160a01b038116600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561403857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613fa6565b505050509050805160001415614052576000915050610ae9565b6000805b82518110156115605782818151811061406b57fe5b602002602001015161010001516140a9576140a683828151811061408b57fe5b6020026020010151600001518361346390919063ffffffff16565b91505b600101614056565b6001600160a01b038116600090815260066020526040902080546140d55750613f08565b60005b8154811015613f055760018282815481106140ef57fe5b6000918252602090912060076008909202010180549115156101000261ff00199092169190911790556001016140d8565b600c546000908190600160a81b900460ff1661414157506000905080613688565b6001600160a01b038416600090815260066020908152604080832080548251818502810185019093528083529192909190849084015b8282101561420957600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101614177565b505050509050805160001415614226576000809250925050613688565b8051841061423b576000809250925050613688565b80848151811061424757fe5b602002602001015160e0015115614265576000809250925050613688565b600a5460009061429d90611b087f00000000000000000000000000000000000000000000000000000000000000006305f5e1006134c4565b905060008060006142b3858981518110613aa057fe5b90506142e2612ed97f000000000000000000000000000000000000000000000000000000000000000083613584565b92506142f86142f18583613584565b8390613463565b600b549092501561432b57600b54614311908490614670565b9250614328600b548361467090919063ffffffff16565b91505b509097909650945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000061436857506000610ae9565b60006143b47f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613463565b905060006143c28285613596565b90506202a3008110156143da57600092505050610ae9565b6203f4808110156143f057606492505050610ae9565b620546008110156144065760c892505050610ae9565b6206978081101561441d5761012c92505050610ae9565b6207e9008110156144345761019092505050610ae9565b6101f492505050610ae9565b60006301e133808161445d66038882915c40006305f5e1006134c4565b9050600061447961138861447385818a8c6134c4565b906134c4565b905060006144906113886144738a6002880a6134c4565b905060006144a96006611b086002808c0a908d0a6134c4565b905060006144cc6002611b088861447360028f0a8e6134c490919063ffffffff16565b905060006144e56003611b086002808f0a908b0a6134c4565b905060006144ff826144f986818b8b613463565b90613463565b905061450f83611c978388613596565b905061451f8b614473838f6134c4565b905061453964e8d4a51000611b0860038b0a81858f6134c4565b9c9b505050505050505050505050565b6000600d60008154811061455957fe5b906000526020600020906002020160000154821161459857600d60008154811061457f57fe5b9060005260206000209060020201600101549050610ae9565b600d6001815481106145a657fe5b90600052602060002090600202016000015482116145cc57600d60018154811061457f57fe5b600d6002815481106145da57fe5b906000526020600020906002020160000154821161460057600d60028154811061457f57fe5b600d60038154811061460e57fe5b906000526020600020906002020160000154821161463457600d60038154811061457f57fe5b600d60048154811061464257fe5b906000526020600020906002020160000154821161466857600d60048154811061457f57fe5b506000610ae9565b60008261467f57506000610b6d565b8161468b575081610b6d565b6134bd612ed9848461358456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373303336302043616e277420656e6420706f6f6c206265666f726520746865206d617475726974792074696d65303331322043616e2774207374616b652061626f76652073697a6520616c6c6f636174696f6e3033373020746f74656d732063616e206e6f74206265207472616e736665726564303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77303334302054686520706f6f6c206973206e6f74204254432072657761726465723033383020746869732061646472657373206469646e2774207374616b6520696e207468697320706f6f6c3033313120416d6f756e742063616e2774206265206c657373207468616e20746865206d696e696d756d303335302043616e277420736574206d61747572696e67207072696365206265666f726520746865206d617475726974792074696d65a264697066735822122083632cee0675c6efd348f88d6ea6afeee38748b5e2f4ae296b43ab22aba336f564736f6c63430007060033303432302054617820636f6e6e6f74206265206f76657220313030252028313030303020425029506f6f6c43726561746f72526f6c653a2063616c6c657220646f6573206e6f7420686176652074686520506f6f6c43726561746f7220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a2646970667358221220bbf6da3b31ff121d5aa7654e53d67291043974f7393750e41bfd1692b299277764736f6c63430007060033526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001005760003560e01c80639a94775d1162000099578063c31c9c07116200006f578063c31c9c071462000282578063c6d69a30146200028c578063e281cc7e14620002ac578063e8153c9314620002b65762000100565b80639a94775d14620001ee578063b9603d6a146200022b578063bece753214620002785762000100565b8063441f5c6511620000db578063441f5c651462000176578063496ccd9b14620001925780636b036f4514620001bb5780638c2d741c14620001c55762000100565b80630f4ef8a6146200010557806337e77675146200012b57806341273657146200014d575b600080fd5b6200010f620002c0565b604080516001600160a01b039092168252519081900360200190f35b6200014b600480360360208110156200014357600080fd5b5035620002e4565b005b6200014b600480360360208110156200016557600080fd5b50356001600160a01b03166200033a565b62000180620003ec565b60408051918252519081900360200190f35b6200014b60048036036020811015620001aa57600080fd5b50356001600160a01b0316620003f2565b62000180620004a4565b6200014b60048036036020811015620001dd57600080fd5b50356001600160a01b0316620004aa565b62000217600480360360208110156200020657600080fd5b50356001600160a01b031662000503565b604080519115158252519081900360200190f35b6200010f60048036036101008110156200024457600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e00135151562000517565b6200010f62000824565b6200010f62000833565b6200014b60048036036020811015620002a457600080fd5b503562000842565b6200014b620008d4565b6200010f620008ea565b7f000000000000000000000000000000000000000000000000000000000000000081565b620002f8620002f2620009fb565b62000503565b620003355760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b600455565b62000348620002f2620009fb565b620003855760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6001600160a01b038116620003ca576040805162461bcd60e51b815260206004808301919091526024820152630303431360e41b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60035481565b62000400620002f2620009fb565b6200043d5760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6001600160a01b03811662000482576040805162461bcd60e51b815260206004808301919091526024820152630303430360e41b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b620004b8620002f2620009fb565b620004f55760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6200050081620009ff565b50565b60006200051181836200090e565b92915050565b600062000527620002f2620009fb565b620005645760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b60006040518061012001604052808b81526020018a81526020018981526020018881526020018781526020018681526020018581526020016003548152602001600454815250905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000620005fa620009fb565b6001546002546040516001600160a01b0392831692909116907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009089908c90620006669062000af2565b6001600160a01b03808b168252898116602083015288811660408301528781166060830152868116608083015285811660a0830152841660c082015260e081018361012080838360005b83811015620006ca578181015183820152602001620006b0565b5050505090500182151581526020019950505050505050505050604051809103906000f08015801562000701573d6000803e3d6000fd5b50600354600454604080518f8152602081018f90528082018e9052606081018d9052608081018c905260a081018b905260c081018a905260e0810193909352610100830191909152861515610120830152519192506001600160a01b038316917f75243069ec60d1b18edc96a68bc98623353ebb06c41582ecbcaa59e4ec8df221918190036101400190a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d914cd4b826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015620007fc57600080fd5b505af115801562000811573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b6002546001600160a01b031681565b6001546001600160a01b031681565b62000850620002f2620009fb565b6200088d5760405162461bcd60e51b815260040180806020018281038252603a81526020018062005840603a913960400191505060405180910390fd5b6127108110620008cf5760405162461bcd60e51b8152600401808060200182810382526027815260200180620058196027913960400191505060405180910390fd5b600355565b620008e8620008e2620009fb565b62000a43565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216620009575760405162461bcd60e51b81526004018080602001828103825260228152602001806200589b6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6200098382826200090e565b15620009d6576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b3390565b62000a0c60008262000977565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b62000a5060008262000a87565b6040516001600160a01b038216907f2bc71cc60b543df5fdd80ef5a45e1cdb344843769b649e9d901de3be24aeb24e90600090a250565b62000a9382826200090e565b62000ad05760405162461bcd60e51b81526004018080602001828103825260218152602001806200587a6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b614d188062000b018339019056fe6102406040523480156200001257600080fd5b5060405162004d1838038062004d1883398181016040526102208110156200003957600080fd5b508051602082015160408301516060840151608085015160a086015160c0870151610200880151969795969495939492939192909160e001908584848760006200008262000311565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038116620000e057600080fd5b600180546001600160a01b03199081166001600160a01b0393841617909155600380548216958316959095179094556004805485169382169390931790925560058054841691831691909117905560608b811b6001600160601b0319908116608052908b901b1660a052600c8054909216908916179055620001628462000315565b606092831b6001600160601b03191660c09081524260e090815283516101205260208085015161010090815260408087015161014052968601516101605260808601516101805260a08601516101a0529285015161020052908401516101c0529201516101e052151560f81b61022052815180830183526001808252610ea6828401908152600d80548084018255600082815294517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb560029283028181019290925593517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb691820155875180890189528281526107d081890190815284548088018655858952915191840280870192909255519082015587518089018952600381526103e881890190815284548088018655858952915191840280870192909255519082015587518089018952600a815260fa818901908152845480880186558589529151918402808701929092555190820155875180890190985260198852606496880196875282549485018355919094529451919092029182015590519101555062000337945050505050565b3390565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205160f81c614855620004c3600039806113e7528061433d525080610d455280610d895280612fb75250806117e65280611a795250806117c252806135fb528061362b525080610c7152806118c852806121e952806126ff5280612b285280613a395280614274525080611a005280613abb52806142bd525080612549528061340252508061142f5280611ae25280611c595280612060525080610bce528061140b528061171252806133b5525080610b145280610bef528061173352806133935280614390525080610af05280610c1052806117545280613372528061436f52508061094b5280610eba528061272b5280612b54525080610b3852806125b6528061264552806129e05280612a6f5250806115c35280611b155280611ba65280611cf25280611db55280611de45280612587528061283b52806129b15280612c625280612fdb52506148556000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c8063857b21ee116101f4578063c6c1decd1161011a578063eee39403116100ad578063f3d9dc0d1161007c578063f3d9dc0d14610914578063f5e96fc91461091c578063fd5e6dd114610924578063fd8fd47f14610941576103af565b8063eee3940314610896578063f0141d84146108b3578063f1b17a8b146108d1578063f2fde38b146108ee576103af565b8063de09ee20116100e9578063de09ee201461083e578063e425df8c1461087e578063e8153c9314610886578063eda2d4241461088e576103af565b8063c6c1decd14610809578063d025188b14610811578063d7efb6b714610819578063d83db49f14610821576103af565b8063a150194b11610192578063b1b1e1c011610161578063b1b1e1c0146107d4578063b88a802f146107f1578063bf852196146107f9578063c120105414610801576103af565b8063a150194b14610764578063a4e2d6341461076c578063a508bc7114610774578063aa7bcb57146107cc576103af565b80638e15f473116101ce5780638e15f4731461072f5780639234a39a1461073757806395c2ba471461073f5780639d9a62df14610747576103af565b8063857b21ee146106fc5780638bfbbcbe1461071f5780638da5cb5b14610727576103af565b806351eacbf0116102d957806373f31703116102775780637d1fcbfa116102465780637d1fcbfa146106545780637f2b6a0d14610675578063817b1cd21461067d578063850fa7cb14610685576103af565b806373f31703146105f5578063765e14d8146105fd578063785fa627146106295780637b0472f014610631576103af565b80635e2e2ffc116102b35780635e2e2ffc146105d55780636847d0c5146105dd5780636b036f45146105e5578063715018a6146105ed576103af565b806351eacbf0146105715780635b9f4f90146105795780635d2631e21461059f576103af565b80632e577d0711610351578063444a490211610320578063444a4902146104ff57806345e91319146105215780634bc4eeb2146105615780634e8bfdaa14610569576103af565b80632e577d071461044657806331769ef71461044e5780634026478e1461045657806343352d611461045e576103af565b80630d6680871161038d5780630d6680871461040f5780630f4ef8a6146104175780631898a1a71461041f5780632d42cf7d1461043c576103af565b8063074bc101146103b457806309082c29146103d85780630b97bc8614610407575b600080fd5b6103bc610949565b604080516001600160a01b039092168252519081900360200190f35b6103f5600480360360208110156103ee57600080fd5b503561096d565b60408051918252519081900360200190f35b6103f5610aee565b6103f5610b12565b6103bc610b36565b6103f56004803603602081101561043557600080fd5b5035610b5a565b610444610b73565b005b6103bc610ea6565b6103f5610eb6565b610444610f56565b610466610fb9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104aa578181015183820152602001610492565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104e95781810151838201526020016104d1565b5050505090500194505050505060405180910390f35b610444600480360361064081101561051657600080fd5b5061032081016110fe565b61054d6004803603604081101561053757600080fd5b506001600160a01b038135169060200135611253565b604080519115158252519081900360200190f35b61054d6113e5565b6103f5611409565b6103f561142d565b6103f56004803603602081101561058f57600080fd5b50356001600160a01b0316611451565b610444600480360360608110156105b557600080fd5b506001600160a01b03813581169160208101359160409091013516611568565b6104446116b7565b6103f56117c0565b6103f56117e4565b610444611808565b6103f56118c6565b6103f56004803603604081101561061357600080fd5b506001600160a01b0381351690602001356118ea565b6103f56119fe565b6104446004803603604081101561064757600080fd5b5080359060200135611a22565b61065c6120ed565b6040805192835260208301919091528051918290030190f35b61054d612108565b6103f5612118565b6106b16004803603604081101561069b57600080fd5b506001600160a01b03813516906020013561211e565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015251908190036101200190f35b6104446004803603604081101561071257600080fd5b508035906020013561218c565b610444612335565b6103bc6123cc565b6103f56123db565b61065c612475565b6103f5612488565b61065c6004803603602081101561075d57600080fd5b503561248d565b6103f56124ab565b61054d6124b0565b61077c6124c0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107b85781810151838201526020016107a0565b505050509050019250505060405180910390f35b6103f5612547565b610444600480360360208110156107ea57600080fd5b503561256b565b610444612995565b6103f5612dba565b6103f5612efa565b6103bc612f45565b6103f5612f54565b61054d612f5a565b6103f56004803603602081101561083757600080fd5b5035612f6a565b61085b6004803603602081101561085457600080fd5b5035612f7d565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103f5612fb5565b6103bc612fd9565b6103f5612ffd565b61065c600480360360208110156108ac57600080fd5b5035613014565b6108bb613028565b6040805160ff9092168252519081900360200190f35b61065c600480360360208110156108e757600080fd5b50356130ab565b6104446004803603602081101561090457600080fd5b50356001600160a01b03166130d9565b6103f56131ed565b6103bc6131f3565b61085b6004803603602081101561093a57600080fd5b5035613202565b6103f5613212565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035460009081906001600160a01b031663d06ca61f8461098c6124c0565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109e15781810151838201526020016109c9565b50505050905001935050505060006040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610a4257600080fd5b8101908080516040519392919084640100000000821115610a6257600080fd5b908301906020820185811115610a7757600080fd5b8251866020820283011164010000000082111715610a9457600080fd5b82525081516020918201928201910280838360005b83811015610ac1578181015183820152602001610aa9565b50505050905001604052505050905080600181518110610add57fe5b60200260200101519150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610b6d610b6761321b565b836118ea565b92915050565b600c546001600160a01b0316610b8761321b565b6001600160a01b031614610bcc5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000101421015610c6f5760405162461bcd60e51b815260040180806020018281038252602c8152602001806146bf602c913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000015610cee57610c9d610eb6565b610cee576040805162461bcd60e51b815260206004820152601e60248201527f30333631204254432052657761726473206e6f7420617661696c61626c650000604482015290519081900360640190fd5b60075415610d4357600854610d43576040805162461bcd60e51b81526020600482015260166024820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000015610dae576000610d73612dba565b9050610d8381639502f90061321f565b610dac577f0000000000000000000000000000000000000000000000000000000000000000600b555b505b600854600090601910610dc357600854610dc6565b60195b905060005b81811015610e5757806001016006600060088481548110610de857fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206008805484908110610e1f57fe5b90600052602060002090600202016001015481548110610e3b57fe5b6000918252602090912060066008909202010155600101610dcb565b50600c805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b1790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6003546001600160a01b03165b90565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d6020811015610f4f57600080fd5b5051905090565b600c546001600160a01b0316610f6a61321b565b6001600160a01b031614610faf5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b610fb761328d565b565b606080600060078054905067ffffffffffffffff81118015610fda57600080fd5b50604051908082528060200260200182016040528015611004578160200160208202803683370190505b5060075490915060009067ffffffffffffffff8111801561102457600080fd5b5060405190808252806020026020018201604052801561104e578160200160208202803683370190505b50905060005b6007548110156110f4576007818154811061106b57fe5b600091825260209091206002909102015483516001600160a01b039091169084908390811061109657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600781815481106110c357fe5b9060005260206000209060020201600101548282815181106110e157fe5b6020908102919091010152600101611054565b5090925090509091565b600c546001600160a01b031661111261321b565b6001600160a01b0316146111575760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b60005b601981101561122557600083826019811061117157fe5b60200201356001600160a01b03166001600160a01b0316141561119357611225565b600860405180604001604052808584601981106111ac57fe5b60200201356001600160a01b03166001600160a01b031681526020018484601981106111d457fe5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201550161115a565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561131857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611286565b505050509050600081511161135e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614795602b913960400191505060405180910390fd5b805183106113b3576040805162461bcd60e51b815260206004820152601760248201527f30333831207468697320696e6465782065786365656473000000000000000000604482015290519081900360640190fd5b8083815181106113bf57fe5b60200260200101516101000151156113db576001915050610b6d565b5060009392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038116600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561151657600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611484565b505050509050805160001415611530576000915050610ae9565b6000805b825181101561156057600061154986836132cb565b90506115558382613463565b925050600101611534565b509392505050565b600c546001600160a01b031661157c61321b565b6001600160a01b0316146115c15760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156116325760405162461bcd60e51b81526004018080602001828103825260218152602001806147116021913960400191505060405180910390fd5b6040805163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529151859283169163a9059cbb9160448083019260209291908290030181600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d60208110156116af57600080fd5b505050505050565b600c546001600160a01b03166116cb61321b565b6001600160a01b0316146117105760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000001014210156117b35760405162461bcd60e51b81526004018080602001828103825260368152602001806147ea6036913960400191505060405180910390fd5b6117bb6123db565b600a55565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61181061321b565b6001600160a01b03166118216123cc565b6001600160a01b03161461187c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b828210156119af57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161191d565b5050505090508051600014156119c9576000915050610b6d565b805183106119db576000915050610b6d565b6000806119e886866132cb565b90506119f48282613463565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c54600160a01b900460ff1615611a77576040805162461bcd60e51b81526020600482015260136024820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604482015290519081900360640190fd5b7f0000000000000000000000000000000000000000000000000000000000000000821015611ad65760405162461bcd60e51b815260040180806020018281038252602a8152602001806147c0602a913960400191505060405180910390fd5b6000611b0e6064611b087f000000000000000000000000000000000000000000000000000000000000000060056134c4565b9061351d565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663771a3a1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d6020811015611b9657600080fd5b5051905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1ecfc68611bd361321b565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c1057600080fd5b505afa158015611c24573d6000803e3d6000fd5b505050506040513d6020811015611c3a57600080fd5b5051611c4f57611c4a8683613584565b611c52565b60005b9050611c7e7f000000000000000000000000000000000000000000000000000000000000000085613463565b611c9d82611c978960095461346390919063ffffffff16565b90613596565b1115611cda5760405162461bcd60e51b81526004018080602001828103825260268152602001806146eb6026913960400191505060405180910390fd5b611ce486836135f3565b965092506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd611d1f61321b565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015230602483015289870160448301525160648083019260209291908290030181600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b505050506040513d6020811015611d9e57600080fd5b50611dab90508682613596565b95508215611ee2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a5db0a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018790525160448083019260209291908290030181600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b505050506040513d6020811015611edf57600080fd5b50505b600954611eef9087613463565b60098190555060076040518060400160405280611f0a61321b565b6001600160a01b0316815260200160066000611f2461321b565b6001600160a01b0390811682526020808301939093526040909101600090812054909352845460018082018755958452828420855160029092020180546001600160a01b031916919092161781559201519190920155600690611f8561321b565b6001600160a01b03168152602080820192909252604090810160009081208251610120810184528a81524281860181815294820184815260608301918252608083018c815260001960a0850181815260c0860191825260e086018881526101008088018a8152895460018082018c559a8c529c909a2097516008909c029097019a8b559851968a01969096559151600289015591516003880155905160048701559151600586015590516006850155915160079093018054915160ff19929092169315159390931761ff0019169015159091021790556120857f000000000000000000000000000000000000000000000000000000000000000085613596565b600954106120955761209561328d565b61209d61321b565b6001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68787604051808381526020018281526020019250505060405180910390a2505050505050565b6000806121006120fb61321b565b61368f565b915091509091565b600c54600160a81b900460ff1681565b60095481565b6006602052816000526040600020818154811061213a57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b600c546001600160a01b03166121a061321b565b6001600160a01b0316146121e55760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000116122445760405162461bcd60e51b81526004018080602001828103825260218152602001806147746021913960400191505060405180910390fd5b60008211612299576040805162461bcd60e51b815260206004820152601960248201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604482015290519081900360640190fd5b428110156122e5576040805162461bcd60e51b81526020600482015260146024820152733033343220646561646c696e65206973206c6f7760601b604482015290519081900360640190fd5b60006122ef610ea6565b90506122fb81846136c6565b60006123068461096d565b905060006123206123198361012c613584565b8390613596565b905061232e3086838761378b565b5050505050565b600c546001600160a01b031661234961321b565b6001600160a01b03161461238e5760405162461bcd60e51b81526004018080602001828103825260218152602001806147326021913960400191505060405180910390fd5b600c805460ff60b01b1916600160b01b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b6000546001600160a01b031690565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d60a081101561245657600080fd5b50602001519050600081121561246d57600061246f565b805b91505090565b60008061210061248361321b565b613924565b600581565b6000806124a161249b61321b565b84613b3f565b915091505b915091565b600881565b600c54600160a01b900460ff1681565b60408051600280825260608083018452926000929190602083019080368337505060045482519293506001600160a01b0316918391506000906124ff57fe5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061252a57fe5b6001600160a01b0390921660209283029190910190910152905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061257961249b61321b565b909250905081156126da57817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561261257600080fd5b505afa158015612626573d6000803e3d6000fd5b505050506040513d602081101561263c57600080fd5b5051106126da577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc61267a61321b565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156126c157600080fd5b505af11580156126d5573d6000803e3d6000fd5b505050505b6126eb6126e561321b565b84613b79565b600c54600160a81b900460ff1615612940577f00000000000000000000000000000000000000000000000000000000000000001561281e57801561280d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61276061321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156127a757600080fd5b505af11580156127bb573d6000803e3d6000fd5b505050506040513d60208110156127d157600080fd5b505161280d576040805162461bcd60e51b815260206004808301919091526024820152630303333360e41b604482015290519081900360640190fd5b61281e61281861321b565b84613c33565b600061283161282b61321b565b85613cba565b9050801561293e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61287061321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b505050506040513d60208110156128e157600080fd5b506128f590506128ef61321b565b85613dff565b6128fd61321b565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b61294861321b565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a2505050565b6000806129a36120fb61321b565b90925090508115612b0457817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a3c57600080fd5b505afa158015612a50573d6000803e3d6000fd5b505050506040513d6020811015612a6657600080fd5b505110612b04577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc612aa461321b565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612aeb57600080fd5b505af1158015612aff573d6000803e3d6000fd5b505050505b612b14612b0f61321b565b613e6c565b600c54600160a81b900460ff1615612d66577f000000000000000000000000000000000000000000000000000000000000000015612c46578015612c36577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612b8961321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612bd057600080fd5b505af1158015612be4573d6000803e3d6000fd5b505050506040513d6020811015612bfa57600080fd5b5051612c36576040805162461bcd60e51b815260206004808301919091526024820152630303332360e41b604482015290519081900360640190fd5b612c46612c4161321b565b613f0b565b6000612c58612c5361321b565b613f73565b90508015612d64577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612c9761321b565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612cde57600080fd5b505af1158015612cf2573d6000803e3d6000fd5b505050506040513d6020811015612d0857600080fd5b50612d1b9050612d1661321b565b6140b1565b612d2361321b565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612d6e61321b565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b600060095460001415612dcf57506000610eb3565b6000805b600754811015612eeb5760006006600060078481548110612df057fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206007805484908110612e2757fe5b90600052602060002090600202016001015481548110612e4357fe5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e08501526101009182900416151590830152909250612ee091612ed991906134c4565b8490613463565b925050600101612dd3565b5060095461246f90829061351d565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610f2557600080fd5b600c546001600160a01b031681565b600a5481565b600c54600160b01b900460ff1681565b6000610b6d612f7761321b565b83613cba565b60088181548110612f8d57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061300f61300a61321b565b611451565b905090565b6000806124a161302261321b565b84614120565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d60208110156130a357600080fd5b505191505090565b600d81815481106130bb57600080fd5b60009182526020909120600290910201805460019091015490915082565b6130e161321b565b6001600160a01b03166130f26123cc565b6001600160a01b03161461314d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166131925760405162461bcd60e51b81526004018080602001828103825260268152602001806146996026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600b5481565b6002546001600160a01b031690565b60078181548110612f8d57600080fd5b600061300f612c535b3390565b6000600a5483111561325d57600a546132388484613596565b1161324557506000610b6d565b600a5461325690611c978585613596565b9050610b6d565b600a5461326a8484613463565b1061327757506000610b6d565b6132566132848484613463565b600a5490613596565b600c805460ff60a01b1916600160a01b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b6001600160a01b03821660009081526006602052604081208054829190849081106132f257fe5b6000918252602080832060408051610120810182526008909402909101805484526001810154928401929092526002820154908301526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460ff808216151560e0840152610100918290041615159082015291507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000017f000000000000000000000000000000000000000000000000000000000000000001904282106133e357426133e5565b815b905060006133f68460200151614339565b9050600061343e6134277f000000000000000000000000000000000000000000000000000000000000000084613463565b6020870151613437908690613596565b8751614440565b905061345785604001518261359690919063ffffffff16565b98975050505050505050565b6000828201838110156134bd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826134d357506000610b6d565b828202828482816134e057fe5b04146134bd5760405162461bcd60e51b81526004018080602001828103825260218152602001806147536021913960400191505060405180910390fd5b6000808211613573576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161357c57fe5b049392505050565b60006134bd612710611b0885856134c4565b6000828211156135ed576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806000837f000000000000000000000000000000000000000000000000000000000000000011613626576000613650565b6136507f000000000000000000000000000000000000000000000000000000000000000085613596565b905080613664576000859250925050613688565b61366e8582613584565b61368261367b8784613584565b8790613596565b92509250505b9250929050565b60008060008060006136a086611451565b90506136ab86613924565b90935091506136ba8184613463565b94509092505050915091565b6002546040805163095ea7b360e01b81526001600160a01b038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561371c57600080fd5b505af1158015613730573d6000803e3d6000fd5b505050506040513d602081101561374657600080fd5b50506040805182815290516001600160a01b038416917fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a1919081900360200190a25050565b6001600160a01b03841661379e57600080fd5b6003546001600160a01b03166338ed173984846137b96124c0565b88866040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561382b578181015183820152602001613813565b505050509050019650505050505050600060405180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561389157600080fd5b81019080805160405193929190846401000000008211156138b157600080fd5b9083019060208201858111156138c657600080fd5b82518660208202830111640100000000821117156138e357600080fd5b82525081516020918201928201910280838360005b838110156139105781810151838201526020016138f8565b505050509050016040525050505050505050565b600c546000908190600160a81b900460ff16613945575060009050806124a6565b6001600160a01b038316600090815260066020908152604080832080548251818502810185019093528083529192909190849084015b82821015613a0d57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161397b565b505050509050805160001415613a2a5760008092509250506124a6565b600a54600090613a6290611b087f00000000000000000000000000000000000000000000000000000000000000006305f5e1006134c4565b905060008060005b8451811015613b0257848181518110613a7f57fe5b602002602001015160e00151613afa576000613ab1868381518110613aa057fe5b602002602001015160c00151614549565b9050613ae7613ae07f000000000000000000000000000000000000000000000000000000000000000083613584565b8590613463565b9350613af6612ed98683613584565b9250505b600101613a6a565b50600b5415613b3357600b54613b19908390614670565b9150613b30600b548261467090919063ffffffff16565b90505b90945092505050915091565b6000806000806000613b5187876118ea565b9050613b5d8787614120565b9093509150613b6c8184613463565b9791965090945050505050565b6001600160a01b03821660009081526006602052604090208054613b9d5750613c2f565b80548210613bab5750613c2f565b6000613bb784846132cb565b905042828481548110613bc657fe5b906000526020600020906008020160030181905550613c0b81838581548110613beb57fe5b90600052602060002090600802016002015461346390919063ffffffff16565b828481548110613c1757fe5b90600052602060002090600802016002018190555050505b5050565b6001600160a01b03821660009081526006602052604090208054613c575750613c2f565b808281548110613c6357fe5b600091825260209091206007600890920201015460ff1615613c855750613c2f565b6001818381548110613c9357fe5b60009182526020909120600890910201600701805460ff1916911515919091179055505050565b6001600160a01b038216600090815260066020908152604080832080548251818502810185019093528083528493849084015b82821015613d7f57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613ced565b505050509050805160001415613d99576000915050610b6d565b80518310613dab576000915050610b6d565b6000818481518110613db957fe5b60200260200101516101000151613df757613df4828581518110613dd957fe5b6020026020010151600001518261346390919063ffffffff16565b90505b949350505050565b6001600160a01b03821660009081526006602052604090208054613e235750613c2f565b80548210613e315750613c2f565b6001818381548110613e3f57fe5b906000526020600020906008020160070160016101000a81548160ff021916908315150217905550505050565b6001600160a01b03811660009081526006602052604090208054613e905750613f08565b60005b8154811015613f05576000613ea884836132cb565b905042838381548110613eb757fe5b906000526020600020906008020160030181905550613edc81848481548110613beb57fe5b838381548110613ee857fe5b600091825260209091206002600890920201015550600101613e93565b50505b50565b6001600160a01b03811660009081526006602052604090208054613f2f5750613f08565b60005b8154811015613f05576001828281548110613f4957fe5b60009182526020909120600890910201600701805460ff1916911515919091179055600101613f32565b6001600160a01b038116600090815260066020908152604080832080548251818502810185019093528083528493849084015b8282101561403857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613fa6565b505050509050805160001415614052576000915050610ae9565b6000805b82518110156115605782818151811061406b57fe5b602002602001015161010001516140a9576140a683828151811061408b57fe5b6020026020010151600001518361346390919063ffffffff16565b91505b600101614056565b6001600160a01b038116600090815260066020526040902080546140d55750613f08565b60005b8154811015613f055760018282815481106140ef57fe5b6000918252602090912060076008909202010180549115156101000261ff00199092169190911790556001016140d8565b600c546000908190600160a81b900460ff1661414157506000905080613688565b6001600160a01b038416600090815260066020908152604080832080548251818502810185019093528083529192909190849084015b8282101561420957600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101614177565b505050509050805160001415614226576000809250925050613688565b8051841061423b576000809250925050613688565b80848151811061424757fe5b602002602001015160e0015115614265576000809250925050613688565b600a5460009061429d90611b087f00000000000000000000000000000000000000000000000000000000000000006305f5e1006134c4565b905060008060006142b3858981518110613aa057fe5b90506142e2612ed97f000000000000000000000000000000000000000000000000000000000000000083613584565b92506142f86142f18583613584565b8390613463565b600b549092501561432b57600b54614311908490614670565b9250614328600b548361467090919063ffffffff16565b91505b509097909650945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000061436857506000610ae9565b60006143b47f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613463565b905060006143c28285613596565b90506202a3008110156143da57600092505050610ae9565b6203f4808110156143f057606492505050610ae9565b620546008110156144065760c892505050610ae9565b6206978081101561441d5761012c92505050610ae9565b6207e9008110156144345761019092505050610ae9565b6101f492505050610ae9565b60006301e133808161445d66038882915c40006305f5e1006134c4565b9050600061447961138861447385818a8c6134c4565b906134c4565b905060006144906113886144738a6002880a6134c4565b905060006144a96006611b086002808c0a908d0a6134c4565b905060006144cc6002611b088861447360028f0a8e6134c490919063ffffffff16565b905060006144e56003611b086002808f0a908b0a6134c4565b905060006144ff826144f986818b8b613463565b90613463565b905061450f83611c978388613596565b905061451f8b614473838f6134c4565b905061453964e8d4a51000611b0860038b0a81858f6134c4565b9c9b505050505050505050505050565b6000600d60008154811061455957fe5b906000526020600020906002020160000154821161459857600d60008154811061457f57fe5b9060005260206000209060020201600101549050610ae9565b600d6001815481106145a657fe5b90600052602060002090600202016000015482116145cc57600d60018154811061457f57fe5b600d6002815481106145da57fe5b906000526020600020906002020160000154821161460057600d60028154811061457f57fe5b600d60038154811061460e57fe5b906000526020600020906002020160000154821161463457600d60038154811061457f57fe5b600d60048154811061464257fe5b906000526020600020906002020160000154821161466857600d60048154811061457f57fe5b506000610ae9565b60008261467f57506000610b6d565b8161468b575081610b6d565b6134bd612ed9848461358456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373303336302043616e277420656e6420706f6f6c206265666f726520746865206d617475726974792074696d65303331322043616e2774207374616b652061626f76652073697a6520616c6c6f636174696f6e3033373020746f74656d732063616e206e6f74206265207472616e736665726564303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77303334302054686520706f6f6c206973206e6f74204254432072657761726465723033383020746869732061646472657373206469646e2774207374616b6520696e207468697320706f6f6c3033313120416d6f756e742063616e2774206265206c657373207468616e20746865206d696e696d756d303335302043616e277420736574206d61747572696e67207072696365206265666f726520746865206d617475726974792074696d65a264697066735822122083632cee0675c6efd348f88d6ea6afeee38748b5e2f4ae296b43ab22aba336f564736f6c63430007060033303432302054617820636f6e6e6f74206265206f76657220313030252028313030303020425029506f6f6c43726561746f72526f6c653a2063616c6c657220646f6573206e6f7420686176652074686520506f6f6c43726561746f7220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a2646970667358221220bbf6da3b31ff121d5aa7654e53d67291043974f7393750e41bfd1692b299277764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2067,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_poolCreators",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)2284_storage"
      },
      {
        "astId": 5253,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5255,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "oracleContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5261,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolTaxRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5263,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "minimumStakeAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)2284_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2283,
            "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}