{
  "address": "0xFA495bB732e298e1275a7EEf996E23745A475e67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TotemToken",
          "name": "_totemToken",
          "type": "address"
        },
        {
          "internalType": "contract RewardManager",
          "name": "_rewardManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "wrappedTokenSymbole",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "poolType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[11]",
          "name": "variables",
          "type": "uint256[11]"
        },
        {
          "indexed": false,
          "internalType": "uint256[8]",
          "name": "ranks",
          "type": "uint256[8]"
        },
        {
          "indexed": false,
          "internalType": "uint256[8]",
          "name": "percentages",
          "type": "uint256[8]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedTokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_wrappedTokenSymbole",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_poolType",
          "type": "string"
        },
        {
          "internalType": "uint256[11]",
          "name": "_variables",
          "type": "uint256[11]"
        },
        {
          "internalType": "uint256[8]",
          "name": "_ranks",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[8]",
          "name": "_percentages",
          "type": "uint256[8]"
        },
        {
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPoolCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract RewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakingPoolTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setDefaultTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolTaxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "contract TotemToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc25e5d8c086f97002fc3b7205f0a2823eb498cd1fbdec806a833ae46f8226521",
  "receipt": {
    "to": null,
    "from": "0x1E8a9D0Bd8C19bB27CBb38A997b16B8373578E8a",
    "contractAddress": "0xFA495bB732e298e1275a7EEf996E23745A475e67",
    "transactionIndex": 0,
    "gasUsed": "4966538",
    "logsBloom": "0x
    "blockHash": "0xd365e8d01477357133a078f7069950a1762d64806d634968aa982a95305891fb",
    "transactionHash": "0xc25e5d8c086f97002fc3b7205f0a2823eb498cd1fbdec806a833ae46f8226521",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13955628,
        "transactionHash": "0xc25e5d8c086f97002fc3b7205f0a2823eb498cd1fbdec806a833ae46f8226521",
        "address": "0xFA495bB732e298e1275a7EEf996E23745A475e67",
        "topics": [
          "0xac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b61",
          "0x0000000000000000000000001e8a9d0bd8c19bb27cbb38a997b16b8373578e8a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd365e8d01477357133a078f7069950a1762d64806d634968aa982a95305891fb"
      }
    ],
    "blockNumber": 13955628,
    "cumulativeGasUsed": "4966538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf2cf56fBE1Ae8E40f0e0D8672305c3bB115625A2",
    "0x9440B61bA309f0B31e50F07e3e6EE5C706Fb3230",
    "0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3",
    "0x78867bbeef44f2326bf8ddd1941a4439382ef2a7"
  ],
  "solcInputHash": "2629fde0d3d2f4982c2e6a48785300b3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"_totemToken\",\"type\":\"address\"},{\"internalType\":\"contract RewardManager\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"wrappedTokenSymbole\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[11]\",\"name\":\"variables\",\"type\":\"uint256[11]\"},{\"indexed\":false,\"internalType\":\"uint256[8]\",\"name\":\"ranks\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"internalType\":\"uint256[8]\",\"name\":\"percentages\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedTokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_wrappedTokenSymbole\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poolType\",\"type\":\"string\"},{\"internalType\":\"uint256[11]\",\"name\":\"_variables\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[8]\",\"name\":\"_ranks\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"_percentages\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPoolCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract RewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingPoolTaxRate\",\"type\":\"uint256\"}],\"name\":\"setDefaultTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x62c8752bb170233359e653c61d491d6a79fe1d7d7281377c5ac4e9c03ce811ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0x8344571960f250b1c03ba9f259c452b26b04370ac4723ef262969d822174bee6\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0x5f65c50276ea5c113b1e51e0d646d7e91c9aa15d12214543ddd320769de308f2\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../PancakeSwap/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributor {\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    constructor(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    // the function should be rename to getSwapRouter\\n    function getswapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0x00375429519c6cec13e64267530e31d25b7d5d53790c570bf3e81e3285c0700e\",\"license\":\"UNLICENSED\"},\"contracts/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILocker {\\n    /**\\n     * @dev Fails if transaction is not allowed.\\n     * Return values can be ignored for AntiBot launches\\n     */\\n    function lockOrGetPenalty(address source, address dest)\\n        external\\n        returns (bool, uint256);\\n}\\n\\ninterface ILockerUser {\\n    function locker() external view returns (ILocker);\\n\\n    /**\\n     * @dev Emitted when setLocker is called.\\n     */\\n    event SetLocker(address indexed locker);\\n}\\n\\n\",\"keccak256\":\"0x51a18df7a6b1708e8d614f547eb09dd79e64093413bb0081dbb8f0f411ce0e96\",\"license\":\"UNLICENSED\"},\"contracts/PancakeSwap/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2b582633995bad7e354c4a36176081b0a41b234e75ed9458ac9ac53afd82e84e\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumer {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n     */\\n    constructor(address _oracle) {\\n        // commented for updatingMaturingPrice function in staking pool to work correctly\\n        // require(_oracle != address(0));\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * Returns decimals for oracle contract\\n     */\\n    function getDecimals() external view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * Returns the latest price from oracle contract\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n\\n    // TODO: a function must be added to get the price on a specific timestamp\\n    // at the moment chainlink provide a function to get the price on a round ID\\n    // but all round IDs don't return a valid price and mapping the round IDs to\\n    // timestamps is not very well defined\\n}\\n\",\"keccak256\":\"0xd7ac173689dd7d69503b0708dad3ef2122e3f1f0eaaead1f7ceb2283fa887d0c\",\"license\":\"UNLICENSED\"},\"contracts/Role/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Operator is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n        if (!isOperator(_msgSender())) {\\n            _addOperator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()),\\n            \\\"OperatorRole: caller does not have the Operator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function addOperator(address account) public onlyOperator {\\n        _addOperator(account);\\n    }\\n\\n    function renounceOperator() public {\\n        _removeOperator(_msgSender());\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe3ed3896ec9e9cc477f1318e9e5f109704eac51255bca6caa36e20fed6965de9\",\"license\":\"UNLICENSED\"},\"contracts/Role/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\ncontract PoolCreator is Context {\\n    using Roles for Roles.Role;\\n\\n    event PoolCreatorAdded(address indexed account);\\n    event PoolCreatorRemoved(address indexed account);\\n\\n    Roles.Role private _poolCreators;\\n\\n    constructor() {\\n        if (!isPoolCreator(_msgSender())) {\\n            _addPoolCreator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyPoolCreator() {\\n        require(\\n            isPoolCreator(_msgSender()),\\n            \\\"PoolCreatorRole: caller does not have the PoolCreator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isPoolCreator(address account) public view returns (bool) {\\n        return _poolCreators.has(account);\\n    }\\n\\n    function addPoolCreator(address account) public onlyPoolCreator {\\n        _addPoolCreator(account);\\n    }\\n\\n    function renouncePoolCreator() public {\\n        _removePoolCreator(_msgSender());\\n    }\\n\\n    function _addPoolCreator(address account) internal {\\n        _poolCreators.add(account);\\n        emit PoolCreatorAdded(account);\\n    }\\n\\n    function _removePoolCreator(address account) internal {\\n        _poolCreators.remove(account);\\n        emit PoolCreatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xd5af536f903c3145a6919765e6b0ab0084d52ac0e30b2d3b7795f44a8434f848\",\"license\":\"UNLICENSED\"},\"contracts/Role/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Rewarder is Context {\\n    using Roles for Roles.Role;\\n\\n    event RewarderAdded(address indexed account);\\n    event RewarderRemoved(address indexed account);\\n\\n    Roles.Role private _rewarders;\\n\\n    constructor() {\\n        if (!isRewarder(_msgSender())) {\\n            _addRewarder(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyRewarder() {\\n        require(\\n            isRewarder(_msgSender()),\\n            \\\"RewarderRole: caller does not have the Rewarder role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isRewarder(address account) public view returns (bool) {\\n        return _rewarders.has(account);\\n    }\\n\\n    function addRewarder(address account) public onlyRewarder {\\n        _addRewarder(account);\\n    }\\n\\n    function renounceRewarder() public {\\n        _removeRewarder(_msgSender());\\n    }\\n\\n    function _addRewarder(address account) internal {\\n        _rewarders.add(account);\\n        emit RewarderAdded(account);\\n    }\\n\\n    function _removeRewarder(address account) internal {\\n        _rewarders.remove(account);\\n        emit RewarderRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x854556cd27f92d4f52e87247d947760942df133464e01f580d4716cc64fe4e5c\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1156e37e7835772537d5dfb53649b1e39b1eff5791f6bd759664168fcc7c8462\",\"license\":\"UNLICENSED\"},\"contracts/Staking/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../TotemToken.sol\\\";\\nimport \\\"../Role/Operator.sol\\\";\\nimport \\\"../Role/Rewarder.sol\\\";\\n\\ncontract RewardManager is Context, Ownable, Operator, Rewarder {\\n    TotemToken totemToken;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n    constructor(TotemToken _totemToken) {\\n        totemToken = _totemToken;\\n    }\\n\\n    function setOperator(address _newOperator) public onlyOwner {\\n        require(\\n            _newOperator != address(0),\\n            \\\"0200 New Operator address cannot be zero.\\\"\\n        );\\n\\n        addOperator(_newOperator);\\n        emit SetOperator(_newOperator);\\n    }\\n\\n    function addPool(address _poolAddress) public onlyOperator {\\n        require(\\n            _poolAddress != address(0),\\n            \\\"0210 Pool address cannot be zero.\\\"\\n        );\\n\\n        addRewarder(_poolAddress);\\n        emit SetRewarder(_poolAddress);\\n    }\\n\\n    function rewardUser(address _user, uint256 _amount) public onlyRewarder {\\n        require(_user != address(0), \\\"0230 User address cannot be zero.\\\");\\n\\n        require(totemToken.transfer(_user, _amount));\\n    }\\n}\",\"keccak256\":\"0x8022b860bf7f1c529cf76ea3c5cd6a9ea5a0ca663c40550effa98b6aa9d74d60\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../Price/PriceConsumer.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributor.sol\\\"; \\n\\ncontract StakingPool is\\n    Context,\\n    Ownable,\\n    PriceConsumer,\\n    USDRetriever,\\n    WrappedTokenDistributor\\n{\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    TotemToken public immutable totemToken;\\n\\n    // FIXME: change the following variables types to add more flexibilty to the contract\\n    RewardManager public immutable rewardManager;\\n    IERC20 public immutable wrappedToken;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public immutable launchDate;\\n    uint256 public immutable lockTime;\\n    uint256 public immutable maturityTime;\\n\\n    uint256 public immutable sizeAllocation;\\n    uint256 public immutable stakeApr;\\n\\n    uint256 public immutable prizeAmount;\\n\\n    // usdPrizeAmount is the enabler of WrappedToken rewarder if it would be 0 then the pool is only TOTM rewarder\\n    uint256 public immutable usdPrizeAmount;\\n\\n    uint256 public immutable stakeTaxRate;\\n    uint256 public immutable minimumStakeAmount;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    uint256 public totalStaked;\\n\\n    // TODO: the maturing price is not the real maturity price and it depends on\\n    // the calling endPool function\\n    uint256 public maturingPrice;\\n\\n    // FIXME: change the sizeLimitRange to basisPoint format\\n    uint256 public constant sizeLimitRangeRate = 5;\\n    // TODO: implement a mechanism to get the decimals from the oracle\\n    uint256 public constant oracleDecimal = 8;\\n\\n    uint256 public immutable potentialCollabReward;\\n    uint256 public immutable collaborativeRange;\\n    // based on the white paper the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500)\\n    uint256 public collaborativeReward; \\n\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    bool public isAnEmergency;\\n    bool public immutable isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    \\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n\\n    event Stake(address indexed user, uint256 amount, uint256 pricePrediction);\\n    event Withdraw(address indexed user, uint256 amount, uint256 wrappedTokenAmount);\\n    event Unstake(address indexed user, uint256 amount);\\n    event PoolLocked();\\n    event PoolSorted();\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    constructor(\\n        string memory _wrappedTokenSymbol,\\n        string memory _poolType,\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _poolCreator,\\n        address[4] memory _addrs,\\n\\n        uint256[11] memory _variables,\\n        uint256[8] memory _ranks,\\n        uint256[8] memory _percentages,\\n        bool _isEnhancedEnabled\\n    )\\n        PriceConsumer(_addrs[2])\\n        WrappedTokenDistributor(_addrs[0], _addrs[1], _addrs[3])\\n    {\\n\\n        require(\\n            _variables[0] > block.timestamp,\\n            \\\"0301 launch date can't be in past\\\"\\n        );\\n\\n        wrappedTokenSymbol = _wrappedTokenSymbol;\\n        poolType = _poolType;\\n\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n        oracleContract = _addrs[2];\\n\\n        poolCreator = _poolCreator;\\n\\n        setUSDToken(_addrs[1]);\\n        wrappedToken = IERC20(_addrs[3]);\\n\\n        // deployDate = block.timestamp;\\n\\n        launchDate = _variables[0];\\n\\n        maturityTime = _variables[1];\\n        lockTime = _variables[2];\\n\\n        sizeAllocation = _variables[3];\\n        stakeApr = _variables[4];\\n        \\n        prizeAmount = _variables[5];\\n        usdPrizeAmount = _variables[6];\\n        potentialCollabReward = _variables[7];\\n        collaborativeRange = _variables[8];\\n        // FIXME: _variables[8] is burnRate \\n        stakeTaxRate = _variables[9];\\n        minimumStakeAmount = _variables[10];   \\n\\n\\n        isEnhancedEnabled = _isEnhancedEnabled; \\n\\n        for (uint256 i = 0; i < _ranks.length; i++) {\\n\\n            if (_percentages[i] == 0) break;\\n\\n            prizeRewardRates.push(\\n                PrizeRewardRate({\\n                    rank: _ranks[i], \\n                    percentage: _percentages[i]\\n                })\\n            );\\n        }\\n    }\\n\\n    function setActivationStatus(bool _activationStatus) \\n        external \\n        onlyPoolCreator \\n    {\\n        isActive = _activationStatus;\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            !isLocked, \\n            \\\"0310 Pool is locked\\\"\\n        );\\n        require(\\n            _amount >= minimumStakeAmount, \\n            \\\"0311 Amount can't be less than the minimum\\\"\\n        );\\n        \\n        uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : _amount.mulBP(taxRate);\\n        \\n        require(\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        \\n        uint256 stakeTaxAmount;\\n        // now the stakeTaxAmount is the staking tax and the _amount is initial amount minus the staking tax\\n        (stakeTaxAmount, _amount) = _getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n\\n        // This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        // FIXME: spilit the stake function into two functions \\n        stakers.push(\\n            Staker({\\n                stakerAddress: _msgSender(),\\n                index: predictions[_msgSender()].length\\n            })\\n        );\\n\\n        predictions[_msgSender()].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                // maybe it's better to use the max number available for rank and differece\\n                // because the 0 is the best number\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n\\n        if (totalStaked >= sizeAllocation) {\\n            // if the staking pool has not anymore capacity then it is locked\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction);\\n    }\\n\\n    function claimReward() external {\\n        (uint256 reward, uint256 wrappedTokenReward) = getTotalReward(_msgSender());\\n\\n        if (reward > 0) {\\n            if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n                // FIXME: all transfers should be in require, rewardUser is using require\\n                rewardManager.rewardUser(_msgSender(), reward);\\n            }\\n        }\\n        \\n        // _wthdraw don't withdraw actually, and only update the array in the map\\n        _withdrawStakingReward(_msgSender());\\n        \\n        //FIXME: withdraws must come before the actual transfers to prevent attacks\\n\\n        if (isMatured) {\\n\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenReward > 0) require(wrappedToken.transfer(_msgSender(), wrappedTokenReward), \\\"0320\\\");\\n\\n                // _withdraw don't withdraw actually, and only update the array in the map\\n                _withdrawPrizeReward(_msgSender());\\n            }\\n\\n            // Users can't unstake until the pool matures\\n            uint256 stakedBalance = getTotalStakedBalance(_msgSender());\\n            if (stakedBalance > 0) {\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                // _wthdraw don't withdraw actually, and only update the array in the map\\n                _withdrawStakedBalance(_msgSender());\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        emit Withdraw(_msgSender(), reward, wrappedTokenReward);\\n    }\\n\\n\\n    // FIXME: uncomment it when proxy is applied\\n    // function indexedClaimReward(uint256 stakeIndex) external {\\n    //     (uint256 reward, uint256 wrappedTokenReward) = getIndexedReward(_msgSender(), stakeIndex);\\n\\n    //     if (reward > 0) {\\n    //         // Send the token reward only when the rewardManager has the enough fund\\n    //         if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n    //             rewardManager.rewardUser(_msgSender(), reward);\\n    //         }\\n    //     }\\n        \\n    //     _withdrawIndexedStakingReward(_msgSender(), stakeIndex);\\n        \\n\\n    //     if (isMatured) {\\n            \\n    //         if (usdPrizeAmount > 0) {\\n    //             if (wrappedTokenReward > 0) require(wrappedToken.transfer(_msgSender(), wrappedTokenReward), \\\"0330\\\");\\n\\n    //             _withdrawIndexedPrizeReward(_msgSender(), stakeIndex);\\n    //         }\\n\\n\\n    //         uint256 stakedBalance = getIndexedStakedBalance(_msgSender(), stakeIndex);\\n    //         if (stakedBalance > 0) {\\n    //             totemToken.transfer(_msgSender(), stakedBalance);\\n\\n    //             _withdrawIndexedStakedBalance(_msgSender(), stakeIndex);\\n\\n    //             emit Unstake(_msgSender(), stakedBalance);\\n    //         }\\n    //     }\\n\\n    //     emit Withdraw(_msgSender(), reward, wrappedTokenReward);\\n    // }\\n\\n    function purchaseWrappedToken(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        //TODO: require usdAmount to be more than usdPrizeAmount, to have enough rewards!\\n        require(\\n            usdPrizeAmount > 0, \\n            \\\"0340 The pool is only TOTM rewarder\\\"\\n        );\\n        \\n        require(\\n            usdAmount > 0, \\n            \\\"0341 Amount can't be zero\\\"\\n        );\\n\\n        require(\\n            deadline >= block.timestamp, \\n            \\\"0342 Deadline is low\\\"\\n        );\\n\\n        // This approves tokens to swap router\\n        address swapRouterAddress = getswapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n        \\n        // Get equivalent USD amount for Wrapped Token\\n        uint256 wrappedTokenAmount = getEstimatedWrappedTokenForUSD(usdAmount);\\n\\n        uint256 wrappedTokenAmountWithSlippage =\\n            wrappedTokenAmount.sub(wrappedTokenAmount.mulBP(300));\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            wrappedTokenAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getWrappedTokenBalance() public view returns (uint256) {\\n        return wrappedToken.balanceOf(address(this));\\n    }\\n\\n    function getPredictionRange(uint256 amount)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256[4] memory steps =\\n            [uint256(27500), 30000, 17500, type(uint256).max];\\n        uint256[4] memory ranges = [uint256(1000), 700, 375, 200];\\n        uint256 totalRange = 0;\\n\\n        for (uint256 i = 0; i < steps.length; i++) {\\n            uint256 stepAmount =\\n                i == steps.length - 1 ? amount : steps[i].mul(10**18);\\n            uint256 step = amount > stepAmount ? stepAmount : amount;\\n            totalRange = totalRange.add(\\n                // the use of oracleDecimal -2 is because of ranges element (100 = 1 dollar range)\\n                step.mul(ranges[i]).mul(10**(oracleDecimal-2)).div(500).div(10**18)\\n            );\\n\\n            if (amount <= stepAmount) break;\\n\\n            amount = amount.sub(stepAmount);\\n        }\\n        return totalRange;\\n    }\\n\\n    // This function is to get the avg price prediction for calculating collaborative reward\\n    function getAveragePricePrediction() public view returns (uint256) {\\n        if (totalStaked == 0) return 0;\\n        uint256 avgPricePrediction = 0;\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            StakeWithPrediction memory prediction =\\n                predictions[stakers[i].stakerAddress][stakers[i].index];\\n\\n            avgPricePrediction = avgPricePrediction.add(\\n                prediction.pricePrediction.mul(prediction.stakedBalance)\\n            );\\n        }\\n\\n        avgPricePrediction = avgPricePrediction.div(totalStaked);\\n\\n        return avgPricePrediction;\\n    }\\n\\n    function lockPool() public onlyPoolCreator {\\n        //FIXME: add a require to prevent locking a pool before locktime or max size allocation\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    // If oracle is not zero address, then _price is ignored\\n    // When there is no oracle, _price is the maturingPrice and is set manually by the pool creator\\n    //FIXME: add a function to set oracle to zero in case it was given incorrectly by the owner\\n    function updateMaturingPrice(uint256 _price) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        if (oracleContract == address(0)) {\\n            maturingPrice = _price;\\n        } else {\\n            maturingPrice = getLatestPrice();\\n        }\\n    }\\n\\n    function endPool() external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n        //TODO: check to see if there is enough USD to buy the wrapped token with, the mimimum USD\\n        // must be usdPrizeAmount, if there is not, do not allow endPool\\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getWrappedTokenBalance() != 0, \\n                \\\"0361 WrappedToken Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(\\n                sortedStakers.length != 0,\\n                \\\"0362 first should sort\\\"\\n            );\\n        }\\n\\n        // potentialCollabReward allows the admin to set the collaborateive reward \\n        if (potentialCollabReward > 0) {\\n            // the collaborative reward only gave to the pools that the average price predicted with \\n            // the accuracy of 25 $\\n            uint256 avgPricePrediction = getAveragePricePrediction();\\n            if (getDifference(avgPricePrediction, collaborativeRange) == 0) {\\n                collaborativeReward = potentialCollabReward;\\n            }\\n        }\\n\\n        uint256 max = sortedStakers.length > 25 ? 25 : sortedStakers.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            predictions[sortedStakers[i].stakerAddress][sortedStakers[i].index].rank =\\n                i + 1;\\n        }\\n\\n        // there is possibility that the size allocation is not reached \\n        // and the isLocked is not set to ture\\n        isLocked = true;\\n        isMatured = true;\\n\\n        emit PoolMatured();\\n    }\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function getDifference(uint256 prediction, uint256 _range)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(_range) <= maturingPrice) return 0;\\n            else return prediction.sub(_range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(_range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(_range));\\n        }\\n    }\\n\\n    function setSortedStakers(address[25] calldata addrArray, uint256[25] calldata indexArray)\\n        external \\n        onlyPoolCreator \\n    {\\n        if(sortedStakers.length != 0) {\\n            delete sortedStakers;\\n        }\\n\\n        for (uint256 i = 0; i < addrArray.length; i++) {\\n\\n            // the first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n            Staker({\\n                stakerAddress: addrArray[i],\\n                index: indexArray[i]\\n                })\\n            );\\n        }\\n\\n        emit PoolSorted();\\n    }\\n\\n    function getStakers() \\n        public \\n        view \\n        returns(address[] memory, uint256[] memory) \\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function _getStakingRewardPerStake(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction memory userStake = predictions[staker][stakeIndex];\\n        uint256 maturityDate = launchDate + lockTime + maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr = _getEnhancedRewardRate(userStake.stakedTime);\\n\\n        // the reward formula is ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            stakeApr.add(enhancedApr),\\n            timeTo.sub(userStake.stakedTime),\\n            userStake.stakedBalance\\n            );\\n\\n        rewardPerStake = rewardPerStake.sub(userStake.amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function getStakingReward(address staker) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    // function getIndexedStakingReward(address staker, uint256 stakeIndex) \\n    //     public \\n    //     view \\n    //     returns (uint256) \\n    // {\\n    //     StakeWithPrediction[] memory userStakes = predictions[staker];\\n    //     if (userStakes.length == 0) return 0;\\n    //     if (stakeIndex >= userStakes.length) return 0;\\n\\n    //     uint256 reward = 0;\\n        \\n    //     uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n    //     reward = reward.add(rewardPerStake);\\n\\n    //     return reward;\\n    // }\\n\\n    function _withdrawStakingReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            userStakes[i].lastWithdrawalTime = block.timestamp;\\n            userStakes[i].amountWithdrawn = userStakes[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    // function _withdrawIndexedStakingReward(address staker, uint256 stakeIndex) internal {\\n    //     StakeWithPrediction[] storage userStakes = predictions[staker];\\n    //     if (userStakes.length == 0) return;\\n    //     if (stakeIndex >= userStakes.length) return;\\n\\n    //     uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n\\n    //     userStakes[stakeIndex].lastWithdrawalTime = block.timestamp;\\n    //     userStakes[stakeIndex].amountWithdrawn = userStakes[stakeIndex].amountWithdrawn.add(\\n    //         rewardPerStake\\n    //     );\\n    // }\\n\\n    function _getEnhancedRewardRate(uint256 stakedTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        // if the enhanced reward is not enabled so consider enhanced raward 0\\n        if (!isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = launchDate.add(lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function getPrizeReward(address staker)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // wihtout the maturing price calculating prize is impossible\\n        if (!isMatured) return (0, 0);\\n\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        // users that don't stake don't get any prize also\\n        if (userStakes.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            // only calculate the prize amount for stakes that are not withdrawn yet\\n            if (!userStakes[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = _getPercentageReward(userStakes[i].rank);\\n\\n                reward = reward.add(\\n                            prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (collaborativeReward > 0) {\\n            reward = reward.addBP(collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    function _getPercentageReward(uint256 _rank)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < prizeRewardRates.length; i++) {\\n            if (_rank <= prizeRewardRates[i].rank) {\\n                return prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n    // function getIndexedPrizeReward(address staker, uint256 stakeIndex)\\n    //     public\\n    //     view\\n    //     returns (uint256, uint256)\\n    // {\\n    //     // wihtout the maturing price calculating prize is impossible\\n    //     if (!isMatured) return (0, 0);\\n\\n    //     StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n    //     // users that don't stake don't get any prize also\\n    //     if (userStakes.length == 0) return (0, 0);\\n\\n    //     // the prize reward considered 0 if stakeIndex exceeds\\n    //     if (stakeIndex >= userStakes.length) return (0,0);\\n\\n    //     // If the first prize reward is withdrawn, we can assume that all the prize/collaborative rewards are withdrawn\\n    //     if (userStakes[stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n    //     uint256 maturingWrappedTokenPrizeAmount =\\n    //         (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n    //     uint256 reward = 0;\\n    //     uint256 wrappedTokenReward = 0;\\n\\n    //     uint256 _percent = _getPercentageReward(userStakes[stakeIndex].rank);\\n\\n    //     reward = reward.add(\\n    //                     prizeAmount.mulBP(_percent)\\n    //                 );\\n\\n    //     wrappedTokenReward = wrappedTokenReward.add(\\n    //                     maturingWrappedTokenPrizeAmount\\n    //                         .mulBP(_percent)\\n    //                 );            \\n\\n    //     if (collaborativeReward > 0) {\\n    //         reward = reward.addBP(collaborativeReward);\\n    //         wrappedTokenReward = wrappedTokenReward.addBP(collaborativeReward);\\n    //     }\\n\\n    //     return (reward, wrappedTokenReward);\\n    // }\\n\\n\\n\\n    function _withdrawPrizeReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    // function _withdrawIndexedPrizeReward(address staker, uint256 stakeIndex) internal {\\n    //     StakeWithPrediction[] storage userStakes = predictions[staker];\\n    //     if (userStakes.length == 0) return;\\n    //     if (userStakes[stakeIndex].prizeRewardWithdrawn) return;\\n\\n    //     userStakes[stakeIndex].prizeRewardWithdrawn = true;\\n    // }\\n\\n    // getTotalStakedBalance return remained staked balance\\n    function getTotalStakedBalance(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            if (!userStakes[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    userStakes[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    // getIndexedStakedBalance return the remained staked amount\\n    // function getIndexedStakedBalance(address staker, uint256 stakeIndex)\\n    //     public\\n    //     view\\n    //     returns (uint256)\\n    // {\\n    //     StakeWithPrediction[] memory userStakes = predictions[staker];\\n    //     if (userStakes.length == 0) return 0;\\n    //     if (stakeIndex >= userStakes.length) return 0; \\n\\n    //     uint256 totalStakedBalance = 0;\\n\\n    //     if (!userStakes[stakeIndex].didUnstake) {\\n    //         totalStakedBalance = totalStakedBalance.add(\\n    //             userStakes[stakeIndex].stakedBalance\\n    //         );\\n    //     }\\n\\n    //     return totalStakedBalance;\\n    // }\\n\\n    function _withdrawStakedBalance(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].didUnstake = true;\\n        }\\n    }\\n\\n    // function _withdrawIndexedStakedBalance(address staker, uint256 stakeIndex) internal {\\n    //     StakeWithPrediction[] storage userStakes = predictions[staker];\\n    //     if (userStakes.length == 0) return;\\n    //     if (stakeIndex >= userStakes.length) return;\\n\\n    //     userStakes[stakeIndex].didUnstake = true;\\n    // }\\n\\n    function getTotalReward(address staker)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // since in the getPrizeReward function the maturingPrice is used\\n        // so we got error if it would not be maturityDate\\n        uint256 prizeReward;\\n        uint256 wrappedTokenPrizeReward;\\n        uint256 stakingReward = getStakingReward(staker);\\n        (prizeReward, wrappedTokenPrizeReward) = getPrizeReward(staker);\\n\\n        return (stakingReward.add(prizeReward), wrappedTokenPrizeReward);\\n    }\\n\\n    \\n    // function getIndexedReward(address staker, uint256 stakeIndex)\\n    //     public\\n    //     view\\n    //     returns (uint256, uint256)\\n    // {\\n    //     // since in the getPrizeReward function the maturingPrice is used\\n    //     // so we got error if it would not be maturityDate\\n    //     uint256 prizeReward;\\n    //     uint256 wrappedTokenPrizeReward;\\n    //     uint256 stakingReward = getIndexedStakingReward(staker, stakeIndex);\\n    //     (prizeReward, wrappedTokenPrizeReward) = getIndexedPrizeReward(staker, stakeIndex);\\n\\n    //     return (stakingReward.add(prizeReward), wrappedTokenPrizeReward);\\n    // }\\n\\n    function _getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate =\\n            stakeTaxRate > tokenTaxRate ? stakeTaxRate.sub(tokenTaxRate) : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function withdrawStuckTokens(address _stuckToken, uint256 amount, address receiver)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            _stuckToken != address(totemToken), \\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n\\t// hasUnStaked return true if the user staked in the pool and then has unStaked it (in claim usecase)\\n    function hasUnStaked(address staker, uint256 stakeIndex) external view returns (bool) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        require(\\n            userStakes.length > 0,\\n            \\\"0380 this address didn't stake in this pool\\\"\\n        );\\n\\n        require(\\n            stakeIndex < userStakes.length,\\n            \\\"0381 this index exceeds\\\"\\n        );\\n    \\n\\n        if (userStakes[stakeIndex].didUnstake) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function declareEmergency()\\n        external\\n        onlyPoolCreator\\n    {\\n        isActive = false;\\n        isAnEmergency = true;\\n\\n        _lockPool();\\n    }\\n\\n    function emergentWithdraw() external {\\n        require(\\n            isAnEmergency,\\n            \\\"it's not an emergency\\\"\\n        );\\n\\n        // Users can't unstake until the pool matures\\n        uint256 stakedBalance = getTotalStakedBalance(_msgSender());\\n        if (stakedBalance > 0) {\\n            totemToken.transfer(_msgSender(), stakedBalance);\\n\\n            // _wthdraw don't withdraw actually, and only update the array in the map\\n            _withdrawStakedBalance(_msgSender());\\n\\n            emit Unstake(_msgSender(), stakedBalance);\\n        }\\n    }\\n\\n    modifier onlyPoolCreator {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n}\",\"keccak256\":\"0xf8333561e485602a9f396c0c252f8553fdebda0058ecf27abf8908e89b4f20a3\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../Role/PoolCreator.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\n\\ncontract StakingPoolFactory is PoolCreator {\\n    TotemToken public immutable totemToken;\\n    RewardManager public immutable rewardManager;\\n    address public swapRouter;\\n    address immutable usdToken;\\n    uint256 public stakingPoolTaxRate;\\n    uint256 public minimumStakeAmount;\\n\\n    event PoolCreated(\\n        address indexed pool,\\n        string wrappedTokenSymbole,\\n        string poolType,\\n        // variables[0] launchDate,\\n        // variables[1] = maturityTime,\\n        // variables[2] = lockTime,\\n        // variables[3] = sizeAllocation,\\n        // variables[4] = stakeApr,\\n        // variables[5] = prizeAmount,\\n        // variables[6] = usdPrizeAmount,\\n        // variables[7] = potentialCollabReward,\\n        // variables[8] = collaborativeRange,\\n        // variables[9] = stakingPoolTaxRate,\\n        // variables[10] = minimumStakeAmount,\\n        // the order of the variable is as above\\n        uint256[11] variables,\\n        uint256[8] ranks,\\n        uint256[8] percentages,\\n        bool isEnhancedEnabled\\n    );\\n\\n    constructor(\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _swapRouter,\\n        address _usdToken\\n    ) {\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n        swapRouter = _swapRouter;\\n        usdToken = _usdToken;\\n         \\n        stakingPoolTaxRate = 300;\\n\\n        // minimum amount of totem can be staked is 250 TOTM,\\n        // it's a mechanism to prevent DDOS attack\\n        // minimumStakeAmount = 250*(10**18);\\n    }\\n\\n    function create(\\n        address _oracleContract,\\n        address _wrappedTokenContract,\\n        string memory _wrappedTokenSymbole,\\n        string memory _poolType,\\n        // uint256 launchDate,\\n        // uint256 maturityTime,\\n        // uint256 lockTime,\\n        // uint256 sizeAllocation,\\n        // uint256 stakeApr,\\n        // uint256 prizeAmount,\\n        // uint256 usdPrizeAmount,\\n        // uint256 potentialCollabReward,\\n        // uint256 collaborativeRange,\\n        // uint256 burnRate,\\n        // uint256 minimumStakeAmount,\\n        uint256[11] memory _variables,\\n        uint256[8] memory _ranks,\\n        uint256[8] memory _percentages,\\n        bool isEnhancedEnabled\\n    ) external onlyPoolCreator returns (address) {\\n\\n        require(\\n            _ranks.length == _percentages.length,\\n            \\\"length of ranks and percentages should be same\\\"\\n        );\\n\\n        if (_variables[9] == 0) {\\n            _variables[9] = stakingPoolTaxRate;\\n        }\\n\\n        address[4] memory addrs = [swapRouter, usdToken, _oracleContract, _wrappedTokenContract];\\n\\n        address newPool = createPool( addrs, _wrappedTokenSymbole, _poolType, _variables, _ranks, _percentages, isEnhancedEnabled);\\n\\n        return newPool;\\n    }\\n\\n    function createPool(\\n        address[4] memory _addrs,\\n        // address _oracleContract,\\n        // address _wrappedTokenContract,\\n        string memory _wrappedTokenSymbole,\\n        string memory _poolType,\\n        uint256[11] memory _variables,\\n        uint256[8] memory _ranks,\\n        uint256[8] memory _percentages,\\n        bool _isEnhancedEnabled\\n    ) internal returns (address) {\\n\\n        address newPool =\\n            address(\\n                new StakingPool(\\n                    _wrappedTokenSymbole,\\n                    _poolType,\\n                    totemToken,\\n                    rewardManager,\\n                    _msgSender(),\\n                    _addrs,\\n                    _variables,\\n                    _ranks,\\n                    _percentages,\\n                    _isEnhancedEnabled\\n                )\\n            );\\n\\n        emit PoolCreated(\\n            newPool,\\n            _wrappedTokenSymbole,\\n            _poolType,\\n            _variables,\\n            _ranks,\\n            _percentages,\\n            _isEnhancedEnabled\\n        );\\n\\n        rewardManager.addPool(newPool);\\n\\n        return newPool;\\n    }\\n\\n\\n    \\n    function setSwapRouter(address _swapRouter) external onlyPoolCreator {\\n        require(_swapRouter != address(0), \\\"0410\\\");\\n        swapRouter = _swapRouter;\\n    }\\n\\n    function setDefaultTaxRate(uint256 newStakingPoolTaxRate)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            newStakingPoolTaxRate < 10000,\\n            \\\"0420 Tax connot be over 100% (10000 BP)\\\"\\n        );\\n        stakingPoolTaxRate = newStakingPoolTaxRate;\\n    }\\n}\",\"keccak256\":\"0x37aeed46a1196cfeebf612c86412905ab4205c8832b7d570bcb73331294ad7e5\",\"license\":\"UNLICENSED\"},\"contracts/TotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\nimport \\\"./BasisPoints.sol\\\";\\n\\ncontract TotemToken is ILockerUser, Context, ERC20, Ownable {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"Totem Token\\\";\\n    string public constant SYMBOL = \\\"TOTM\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY = 10000000 * (10**uint256(DECIMALS));\\n\\n    address public CommunityDevelopmentAddr;\\n    address public StakingRewardsAddr;\\n    address public LiquidityPoolAddr;\\n    address public PublicSaleAddr;\\n    address public AdvisorsAddr;\\n    address public SeedInvestmentAddr;\\n    address public PrivateSaleAddr;\\n    address public TeamAllocationAddr;\\n    address public StrategicRoundAddr;\\n\\n    uint256 public constant COMMUNITY_DEVELOPMENT =\\n        1000000 * (10**uint256(DECIMALS)); // 10% for Community development\\n    uint256 public constant STAKING_REWARDS = 1650000 * (10**uint256(DECIMALS)); // 16.5% for Staking Revawards\\n    uint256 public constant LIQUIDITY_POOL = 600000 * (10**uint256(DECIMALS)); // 6% for Liquidity pool\\n    uint256 public constant ADVISORS = 850000 * (10**uint256(DECIMALS)); // 8.5% for Advisors\\n    uint256 public constant SEED_INVESTMENT = 450000 * (10**uint256(DECIMALS)); // 4.5% for Seed investment\\n    uint256 public constant PRIVATE_SALE = 2000000 * (10**uint256(DECIMALS)); // 20% for Private Sale\\n    uint256 public constant TEAM_ALLOCATION = 1500000 * (10**uint256(DECIMALS)); // 15% for Team allocation\\n\\n    uint256 public constant LAUNCH_POOL =\\n        5882352941 * (10**uint256(DECIMALS - 5)); // 58823.52941 for LaunchPool\\n    uint256 public constant PUBLIC_SALE =\\n        450000 * (10**uint256(DECIMALS)) + LAUNCH_POOL; // 4.5% for Public Sale\\n    uint256 public constant STRATEGIC_ROUND =\\n        1500000 * (10**uint256(DECIMALS)) - LAUNCH_POOL; // 15% for Strategic Round\\n    uint256 public taxRate = 300;\\n    address public taxationWallet;\\n\\n    bool private _isDistributionComplete = false;\\n\\n    mapping(address => bool) public taxExempt;\\n\\n    ILocker public override locker;\\n\\n    constructor() ERC20(NAME, SYMBOL) {\\n        taxationWallet = _msgSender();\\n\\n        _mint(address(this), INITIAL_SUPPLY);\\n    }\\n\\n    function setLocker(address _locker) external onlyOwner() {\\n        require(_locker != address(0), \\\"_locker cannot be address(0)\\\");\\n        locker = ILocker(_locker);\\n        emit SetLocker(_locker);\\n    }\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) public onlyOwner {\\n        require(!_isDistributionComplete);\\n\\n        require(_CommunityDevelopmentAddr != address(0));\\n        require(_StakingRewardsAddr != address(0));\\n        require(_LiquidityPoolAddr != address(0));\\n        require(_PublicSaleAddr != address(0));\\n        require(_AdvisorsAddr != address(0));\\n        require(_SeedInvestmentAddr != address(0));\\n        require(_PrivateSaleAddr != address(0));\\n        require(_TeamAllocationAddr != address(0));\\n        require(_StrategicRoundAddr != address(0));\\n        // set parnters addresses\\n        CommunityDevelopmentAddr = _CommunityDevelopmentAddr;\\n        StakingRewardsAddr = _StakingRewardsAddr;\\n        LiquidityPoolAddr = _LiquidityPoolAddr;\\n        PublicSaleAddr = _PublicSaleAddr;\\n        AdvisorsAddr = _AdvisorsAddr;\\n        SeedInvestmentAddr = _SeedInvestmentAddr;\\n        PrivateSaleAddr = _PrivateSaleAddr;\\n        TeamAllocationAddr = _TeamAllocationAddr;\\n        StrategicRoundAddr = _StrategicRoundAddr;\\n    }\\n\\n    function distributeTokens() public onlyOwner {\\n        require((!_isDistributionComplete));\\n\\n        _transfer(\\n            address(this),\\n            CommunityDevelopmentAddr,\\n            COMMUNITY_DEVELOPMENT\\n        );\\n        _transfer(address(this), StakingRewardsAddr, STAKING_REWARDS);\\n        _transfer(address(this), LiquidityPoolAddr, LIQUIDITY_POOL);\\n        _transfer(address(this), PublicSaleAddr, PUBLIC_SALE);\\n        _transfer(address(this), AdvisorsAddr, ADVISORS);\\n        _transfer(address(this), SeedInvestmentAddr, SEED_INVESTMENT);\\n        _transfer(address(this), PrivateSaleAddr, PRIVATE_SALE);\\n        _transfer(address(this), TeamAllocationAddr, TEAM_ALLOCATION);\\n        _transfer(address(this), StrategicRoundAddr, STRATEGIC_ROUND);\\n\\n        // Whitelist these addresses as tex exempt\\n        setTaxExemptStatus(CommunityDevelopmentAddr, true);\\n        setTaxExemptStatus(StakingRewardsAddr, true);\\n        setTaxExemptStatus(LiquidityPoolAddr, true);\\n        setTaxExemptStatus(PublicSaleAddr, true);\\n        setTaxExemptStatus(AdvisorsAddr, true);\\n        setTaxExemptStatus(SeedInvestmentAddr, true);\\n        setTaxExemptStatus(PrivateSaleAddr, true);\\n        setTaxExemptStatus(TeamAllocationAddr, true);\\n        setTaxExemptStatus(StrategicRoundAddr, true);\\n\\n        _isDistributionComplete = true;\\n    }\\n\\n    function setTaxRate(uint256 newTaxRate) public onlyOwner {\\n        require(newTaxRate < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\n        taxRate = newTaxRate;\\n    }\\n\\n    function setTaxExemptStatus(address account, bool status) public onlyOwner {\\n        require(account != address(0));\\n        taxExempt[account] = status;\\n    }\\n\\n    function setTaxationWallet(address newTaxationWallet) public onlyOwner {\\n        require(newTaxationWallet != address(0));\\n        taxationWallet = newTaxationWallet;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (address(locker) != address(0)) {\\n            locker.lockOrGetPenalty(sender, recipient);\\n        }\\n        ERC20._transfer(sender, recipient, amount);\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(sender != recipient, \\\"Cannot self transfer\\\");\\n\\n        uint256 tax = amount.mulBP(taxRate);\\n        uint256 tokensToTransfer = amount.sub(tax);\\n\\n        _transfer(sender, taxationWallet, tax);\\n        _transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_msgSender() != recipient, \\\"ERC20: cannot self transfer\\\");\\n        !taxExempt[_msgSender()]\\n            ? _transferWithTax(_msgSender(), recipient, amount)\\n            : _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        !taxExempt[sender]\\n            ? _transferWithTax(sender, recipient, amount)\\n            : _transfer(sender, recipient, amount);\\n\\n        approve(\\n            _msgSender(),\\n            allowance(sender, _msgSender()).sub(\\n                amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfa21ba84a53a411dd96bf813d4c25a1168b631e1e5d098bb892c7e46a5e83ab0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2058,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_poolCreators",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)2275_storage"
      },
      {
        "astId": 4728,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4732,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolTaxRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4734,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "minimumStakeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)2275_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2274,
            "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}