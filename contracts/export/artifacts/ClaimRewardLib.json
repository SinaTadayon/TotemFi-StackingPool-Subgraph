{
  "contractName": "ClaimRewardLib",
  "sourceName": "contracts/libraries/ClaimRewardLib.sol",
  "abi": [
    {
      "inputs": [],
      "name": "oracleDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x610bae61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806332a1b321146100715780634142c6521461009b57806347dc9eee146100bd578063a150194b146100dd578063d4675770146100f2578063f66d9a4d14610105575b600080fd5b61008461007f366004610970565b610125565b6040516100929291906109a4565b60405180910390f35b8180156100a757600080fd5b506100bb6100b636600461094f565b6102a1565b005b8180156100c957600080fd5b506100bb6100d8366004610937565b61038e565b6100e56103fe565b604051610092919061099b565b6100e561010036600461094f565b610403565b81801561011157600080fd5b506100bb610120366004610937565b61045a565b60088201546000908190610100900460ff1661014657506000905080610299565b845461015757506000905080610299565b6000610183856003015461017d6008600a6101729190610a30565b6004890154906104ce565b906104e1565b905060008060005b885481101561025b578881815481106101b457634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff1661024957600061020c8a83815481106101f457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160060154896104ed565b905061022f610228828b6005015461058890919063ffffffff16565b859061059a565b935061024561023e8683610588565b849061059a565b9250505b8061025381610b47565b91505061018b565b506007870154156102925760078701546102769083906105a6565b915061028f8760070154826105a690919063ffffffff16565b90505b9093509150505b935093915050565b81546102ac5761038a565b60005b82548110156103885760006102c58483856105ce565b9050428483815481106102e857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600301819055506103418185848154811061032157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016002015461059a90919063ffffffff16565b84838154811061036157634e487b7160e01b600052603260045260246000fd5b6000918252602090912060026008909202010155508061038081610b47565b9150506102af565b505b5050565b8054610399576103fb565b60005b815481101561038a5760018282815481106103c757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600701805460ff1916911515919091179055806103f381610b47565b91505061039c565b50565b600881565b815460009061041457506000610454565b6000805b845481101561045057600061042e8683876105ce565b905061043a838261059a565b925050808061044890610b47565b915050610418565b5090505b92915050565b8054610465576103fb565b60005b815481101561038a57600182828154811061049357634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160016101000a81548160ff02191690831515021790555080806104c690610b47565b915050610468565b60006104da8284610b11565b9392505050565b60006104da82846109ca565b6000805b825481101561057e5782818154811061051a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154841161056c5782818154811061055257634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154915050610454565b8061057681610b47565b9150506104f1565b5060009392505050565b60006104da61271061017d85856104ce565b60006104da82846109b2565b6000826105b557506000610454565b816105c1575081610454565b6104da61023e8484610588565b6000808260020154836001015484600001546105ea91906109b2565b6105f491906109b2565b905060008142116106055742610607565b815b600885015490915060009060ff16156106585761065587878154811061063d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016001015486610741565b90505b60006106ef61067483886006015461059a90919063ffffffff16565b6106b88a8a8154811061069757634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866107f890919063ffffffff16565b8a8a815481106106d857634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160000154610804565b905061073588888154811061071457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020154826107f890919063ffffffff16565b98975050505050505050565b600881015460009060ff1661075857506000610454565b6001820154825460009161076c919061059a565b9050600061077a82866107f8565b90506202a30081101561079257600092505050610454565b6203f4808110156107a857606492505050610454565b620546008110156107be5760c892505050610454565b620697808110156107d55761012c92505050610454565b6207e9008110156107ec5761019092505050610454565b6101f492505050610454565b60006104da8284610b30565b60006301e13380816108256305f5e10061081f600285610a3f565b906104ce565b9050600061083b61138861081f85818a8c6104ce565b9050600061085a61138861081f610853600288610a3f565b8b906104ce565b9050600061087c600661017d61087160028d610a3f565b61081f60028d610a3f565b905060006108a0600261017d8861081f60028f6108999190610a3f565b8e906104ce565b905060006108c4600361017d6108b760028b610a3f565b60028f61081f9190610a3f565b905060006108de826108d886818b8b61059a565b9061059a565b90506108f4836108ee83886107f8565b906107f8565b90506109048b61081f838f6104ce565b905061092764e8d4a5100061017d61091d60038c610a3f565b61017d858f6104ce565b9c9b505050505050505050505050565b600060208284031215610948578081fd5b5035919050565b60008060408385031215610961578081fd5b50508035926020909101359150565b600080600060608486031215610984578081fd5b505081359360208301359350604090920135919050565b90815260200190565b918252602082015260400190565b600082198211156109c5576109c5610b62565b500190565b6000826109e557634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116109fc5750610a27565b818704821115610a0e57610a0e610b62565b80861615610a1b57918102915b9490941c9380026109ed565b94509492505050565b60006104da6000198484610a4d565b60006104da60001960ff8516845b600082610a5c575060016104da565b81610a69575060006104da565b8160018114610a7f5760028114610a8957610ab6565b60019150506104da565b60ff841115610a9a57610a9a610b62565b6001841b915084821115610ab057610ab0610b62565b506104da565b5060208310610133831016604e8410600b8410161715610ae9575081810a83811115610ae457610ae4610b62565b6104da565b610af684848460016109ea565b808604821115610b0857610b08610b62565b02949350505050565b6000816000190483118215151615610b2b57610b2b610b62565b500290565b600082821015610b4257610b42610b62565b500390565b6000600019821415610b5b57610b5b610b62565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122076057db1353763f86020068c421450b886266d2ff8505181b39e7511fc6e323164736f6c63430008000033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806332a1b321146100715780634142c6521461009b57806347dc9eee146100bd578063a150194b146100dd578063d4675770146100f2578063f66d9a4d14610105575b600080fd5b61008461007f366004610970565b610125565b6040516100929291906109a4565b60405180910390f35b8180156100a757600080fd5b506100bb6100b636600461094f565b6102a1565b005b8180156100c957600080fd5b506100bb6100d8366004610937565b61038e565b6100e56103fe565b604051610092919061099b565b6100e561010036600461094f565b610403565b81801561011157600080fd5b506100bb610120366004610937565b61045a565b60088201546000908190610100900460ff1661014657506000905080610299565b845461015757506000905080610299565b6000610183856003015461017d6008600a6101729190610a30565b6004890154906104ce565b906104e1565b905060008060005b885481101561025b578881815481106101b457634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff1661024957600061020c8a83815481106101f457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160060154896104ed565b905061022f610228828b6005015461058890919063ffffffff16565b859061059a565b935061024561023e8683610588565b849061059a565b9250505b8061025381610b47565b91505061018b565b506007870154156102925760078701546102769083906105a6565b915061028f8760070154826105a690919063ffffffff16565b90505b9093509150505b935093915050565b81546102ac5761038a565b60005b82548110156103885760006102c58483856105ce565b9050428483815481106102e857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600301819055506103418185848154811061032157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016002015461059a90919063ffffffff16565b84838154811061036157634e487b7160e01b600052603260045260246000fd5b6000918252602090912060026008909202010155508061038081610b47565b9150506102af565b505b5050565b8054610399576103fb565b60005b815481101561038a5760018282815481106103c757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600701805460ff1916911515919091179055806103f381610b47565b91505061039c565b50565b600881565b815460009061041457506000610454565b6000805b845481101561045057600061042e8683876105ce565b905061043a838261059a565b925050808061044890610b47565b915050610418565b5090505b92915050565b8054610465576103fb565b60005b815481101561038a57600182828154811061049357634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160016101000a81548160ff02191690831515021790555080806104c690610b47565b915050610468565b60006104da8284610b11565b9392505050565b60006104da82846109ca565b6000805b825481101561057e5782818154811061051a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154841161056c5782818154811061055257634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154915050610454565b8061057681610b47565b9150506104f1565b5060009392505050565b60006104da61271061017d85856104ce565b60006104da82846109b2565b6000826105b557506000610454565b816105c1575081610454565b6104da61023e8484610588565b6000808260020154836001015484600001546105ea91906109b2565b6105f491906109b2565b905060008142116106055742610607565b815b600885015490915060009060ff16156106585761065587878154811061063d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016001015486610741565b90505b60006106ef61067483886006015461059a90919063ffffffff16565b6106b88a8a8154811061069757634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866107f890919063ffffffff16565b8a8a815481106106d857634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160000154610804565b905061073588888154811061071457634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020154826107f890919063ffffffff16565b98975050505050505050565b600881015460009060ff1661075857506000610454565b6001820154825460009161076c919061059a565b9050600061077a82866107f8565b90506202a30081101561079257600092505050610454565b6203f4808110156107a857606492505050610454565b620546008110156107be5760c892505050610454565b620697808110156107d55761012c92505050610454565b6207e9008110156107ec5761019092505050610454565b6101f492505050610454565b60006104da8284610b30565b60006301e13380816108256305f5e10061081f600285610a3f565b906104ce565b9050600061083b61138861081f85818a8c6104ce565b9050600061085a61138861081f610853600288610a3f565b8b906104ce565b9050600061087c600661017d61087160028d610a3f565b61081f60028d610a3f565b905060006108a0600261017d8861081f60028f6108999190610a3f565b8e906104ce565b905060006108c4600361017d6108b760028b610a3f565b60028f61081f9190610a3f565b905060006108de826108d886818b8b61059a565b9061059a565b90506108f4836108ee83886107f8565b906107f8565b90506109048b61081f838f6104ce565b905061092764e8d4a5100061017d61091d60038c610a3f565b61017d858f6104ce565b9c9b505050505050505050505050565b600060208284031215610948578081fd5b5035919050565b60008060408385031215610961578081fd5b50508035926020909101359150565b600080600060608486031215610984578081fd5b505081359360208301359350604090920135919050565b90815260200190565b918252602082015260400190565b600082198211156109c5576109c5610b62565b500190565b6000826109e557634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116109fc5750610a27565b818704821115610a0e57610a0e610b62565b80861615610a1b57918102915b9490941c9380026109ed565b94509492505050565b60006104da6000198484610a4d565b60006104da60001960ff8516845b600082610a5c575060016104da565b81610a69575060006104da565b8160018114610a7f5760028114610a8957610ab6565b60019150506104da565b60ff841115610a9a57610a9a610b62565b6001841b915084821115610ab057610ab0610b62565b506104da565b5060208310610133831016604e8410600b8410161715610ae9575081810a83811115610ae457610ae4610b62565b6104da565b610af684848460016109ea565b808604821115610b0857610b08610b62565b02949350505050565b6000816000190483118215151615610b2b57610b2b610b62565b500290565b600082821015610b4257610b42610b62565b500390565b6000600019821415610b5b57610b5b610b62565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122076057db1353763f86020068c421450b886266d2ff8505181b39e7511fc6e323164736f6c63430008000033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0xBAE PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x32A1B321 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x4142C652 EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x47DC9EEE EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xA150194B EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xD4675770 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xF66D9A4D EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x7F CALLDATASIZE PUSH1 0x4 PUSH2 0x970 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x92 SWAP3 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x99B JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F JUMP JUMPDEST PUSH2 0x403 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x45A JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x146 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x299 JUMP JUMPDEST DUP5 SLOAD PUSH2 0x157 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x299 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x183 DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x17D PUSH1 0x8 PUSH1 0xA PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x4 DUP10 ADD SLOAD SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP9 SLOAD DUP2 LT ISZERO PUSH2 0x25B JUMPI DUP9 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1B4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND PUSH2 0x249 JUMPI PUSH1 0x0 PUSH2 0x20C DUP11 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1F4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD DUP10 PUSH2 0x4ED JUMP JUMPDEST SWAP1 POP PUSH2 0x22F PUSH2 0x228 DUP3 DUP12 PUSH1 0x5 ADD SLOAD PUSH2 0x588 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP4 POP PUSH2 0x245 PUSH2 0x23E DUP7 DUP4 PUSH2 0x588 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x253 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x18B JUMP JUMPDEST POP PUSH1 0x7 DUP8 ADD SLOAD ISZERO PUSH2 0x292 JUMPI PUSH1 0x7 DUP8 ADD SLOAD PUSH2 0x276 SWAP1 DUP4 SWAP1 PUSH2 0x5A6 JUMP JUMPDEST SWAP2 POP PUSH2 0x28F DUP8 PUSH1 0x7 ADD SLOAD DUP3 PUSH2 0x5A6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x2AC JUMPI PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 PUSH2 0x2C5 DUP5 DUP4 DUP6 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x341 DUP2 DUP6 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x321 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x59A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x361 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SSTORE POP DUP1 PUSH2 0x380 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AF JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST DUP1 SLOAD PUSH2 0x399 JUMPI PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x38A JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x3F3 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x39C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 DUP2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x414 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 SLOAD DUP2 LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 PUSH2 0x42E DUP7 DUP4 DUP8 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP PUSH2 0x43A DUP4 DUP3 PUSH2 0x59A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x448 SWAP1 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x418 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH2 0x465 JUMPI PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x38A JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x493 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x4C6 SWAP1 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0xB11 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x57E JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x51A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 GT PUSH2 0x56C JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x552 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP PUSH2 0x454 JUMP JUMPDEST DUP1 PUSH2 0x576 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F1 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH2 0x2710 PUSH2 0x17D DUP6 DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B5 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST DUP2 PUSH2 0x5C1 JUMPI POP DUP2 PUSH2 0x454 JUMP JUMPDEST PUSH2 0x4DA PUSH2 0x23E DUP5 DUP5 PUSH2 0x588 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x5EA SWAP2 SWAP1 PUSH2 0x9B2 JUMP JUMPDEST PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x9B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 TIMESTAMP GT PUSH2 0x605 JUMPI TIMESTAMP PUSH2 0x607 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x658 JUMPI PUSH2 0x655 DUP8 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x63D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x741 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x6EF PUSH2 0x674 DUP4 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x59A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6B8 DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x697 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x7F8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x6D8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x804 JUMP JUMPDEST SWAP1 POP PUSH2 0x735 DUP9 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x714 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x7F8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x758 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x76C SWAP2 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x77A DUP3 DUP7 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP PUSH3 0x2A300 DUP2 LT ISZERO PUSH2 0x792 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x3F480 DUP2 LT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x64 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x54600 DUP2 LT ISZERO PUSH2 0x7BE JUMPI PUSH1 0xC8 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x69780 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x12C SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x7E900 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH2 0x190 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH2 0x1F4 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0xB30 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 DUP2 PUSH2 0x825 PUSH4 0x5F5E100 PUSH2 0x81F PUSH1 0x2 DUP6 PUSH2 0xA3F JUMP JUMPDEST SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x83B PUSH2 0x1388 PUSH2 0x81F DUP6 DUP2 DUP11 DUP13 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x85A PUSH2 0x1388 PUSH2 0x81F PUSH2 0x853 PUSH1 0x2 DUP9 PUSH2 0xA3F JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C PUSH1 0x6 PUSH2 0x17D PUSH2 0x871 PUSH1 0x2 DUP14 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x81F PUSH1 0x2 DUP14 PUSH2 0xA3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8A0 PUSH1 0x2 PUSH2 0x17D DUP9 PUSH2 0x81F PUSH1 0x2 DUP16 PUSH2 0x899 SWAP2 SWAP1 PUSH2 0xA3F JUMP JUMPDEST DUP15 SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8C4 PUSH1 0x3 PUSH2 0x17D PUSH2 0x8B7 PUSH1 0x2 DUP12 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x2 DUP16 PUSH2 0x81F SWAP2 SWAP1 PUSH2 0xA3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0x8D8 DUP7 DUP2 DUP12 DUP12 PUSH2 0x59A JUMP JUMPDEST SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP1 POP PUSH2 0x8F4 DUP4 PUSH2 0x8EE DUP4 DUP9 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP PUSH2 0x904 DUP12 PUSH2 0x81F DUP4 DUP16 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH2 0x927 PUSH5 0xE8D4A51000 PUSH2 0x17D PUSH2 0x91D PUSH1 0x3 DUP13 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x17D DUP6 DUP16 PUSH2 0x4CE JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x948 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x961 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x984 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9C5 JUMPI PUSH2 0x9C5 PUSH2 0xB62 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9E5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x9FC JUMPI POP PUSH2 0xA27 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0xA0E JUMPI PUSH2 0xA0E PUSH2 0xB62 JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0xA1B JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0x9ED JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA5C JUMPI POP PUSH1 0x1 PUSH2 0x4DA JUMP JUMPDEST DUP2 PUSH2 0xA69 JUMPI POP PUSH1 0x0 PUSH2 0x4DA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA7F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA89 JUMPI PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x4DA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xA9A JUMPI PUSH2 0xA9A PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xAB0 JUMPI PUSH2 0xAB0 PUSH2 0xB62 JUMP JUMPDEST POP PUSH2 0x4DA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xAE9 JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0xAE4 JUMPI PUSH2 0xAE4 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH2 0xAF6 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x9EA JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xB08 PUSH2 0xB62 JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xB2B JUMPI PUSH2 0xB2B PUSH2 0xB62 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB42 PUSH2 0xB62 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xB5B JUMPI PUSH2 0xB5B PUSH2 0xB62 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x57DB1353763F86020068C421450B886266D2FF8505181 0xB3 SWAP15 PUSH22 0x11FC6E323164736F6C63430008000033000000000000 ",
      "sourceMap": "192:3550:39:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;192:3550:39;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:4155:41",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:41",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "144:120:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "190:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "199:6:41"
                                },
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "207:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "192:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "192:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "192:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "165:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "174:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "161:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "161:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "186:2:41",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "157:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "157:32:41"
                      },
                      "nodeType": "YulIf",
                      "src": "154:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "225:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "248:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "235:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "235:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "225:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "110:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "121:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "133:6:41",
                    "type": ""
                  }
                ],
                "src": "14:250:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "444:171:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "490:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "499:6:41"
                                },
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "507:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "492:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "492:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "492:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "465:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "474:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "461:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "461:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "486:2:41",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "457:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "457:32:41"
                      },
                      "nodeType": "YulIf",
                      "src": "454:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "525:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "548:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "535:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "535:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "525:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "567:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "594:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "605:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "590:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "590:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "577:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "577:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "567:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_struct$_LibParams_$4430_storage_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "402:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "413:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "425:6:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "433:6:41",
                    "type": ""
                  }
                ],
                "src": "269:346:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "868:222:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "914:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "923:6:41"
                                },
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "931:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "916:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "916:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "916:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "889:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "898:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "885:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "885:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "910:2:41",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "881:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "881:32:41"
                      },
                      "nodeType": "YulIf",
                      "src": "878:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "949:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "972:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "959:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "959:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "949:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "991:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1018:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1029:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1014:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1014:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1001:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1001:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "991:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1042:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1069:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1080:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1065:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1065:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1052:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1052:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1042:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_struct$_LibParams_$4430_storage_ptrt_array$_t_struct$_PrizeRewardRate_$4459_storage_$dyn_storage_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "818:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "829:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "841:6:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "849:6:41",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "857:6:41",
                    "type": ""
                  }
                ],
                "src": "620:470:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1204:76:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1214:26:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1226:9:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1237:2:41",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1222:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1222:18:41"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1214:4:41"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1256:9:41"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1267:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1249:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1249:25:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1249:25:41"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1173:9:41",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1184:6:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1195:4:41",
                    "type": ""
                  }
                ],
                "src": "1095:185:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1422:119:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1432:26:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1444:9:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1455:2:41",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1440:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1440:18:41"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1432:4:41"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1474:9:41"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1485:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1467:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1467:25:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1467:25:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1512:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1523:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1508:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1508:18:41"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "1528:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1501:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1501:34:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1501:34:41"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1383:9:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1394:6:41",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1402:6:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1413:4:41",
                    "type": ""
                  }
                ],
                "src": "1285:256:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1594:80:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1621:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1623:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1623:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1623:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1610:1:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1617:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1613:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1613:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1607:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1607:13:41"
                      },
                      "nodeType": "YulIf",
                      "src": "1604:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1652:16:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1663:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1666:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1659:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1659:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "1652:3:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1577:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1580:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "1586:3:41",
                    "type": ""
                  }
                ],
                "src": "1546:128:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1725:171:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1756:111:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "1777:1:41"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1784:3:41",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1789:10:41",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "1780:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1780:20:41"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1770:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1770:31:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1770:31:41"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1821:1:41",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1824:4:41",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1814:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1814:15:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1814:15:41"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "1849:1:41"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1852:4:41",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1842:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1842:15:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1842:15:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1745:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1738:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1738:9:41"
                      },
                      "nodeType": "YulIf",
                      "src": "1735:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1876:14:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1885:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1888:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "1881:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1881:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "1876:1:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1710:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1713:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "1719:1:41",
                    "type": ""
                  }
                ],
                "src": "1679:217:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1978:376:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1988:15:41",
                      "value": {
                        "name": "_power",
                        "nodeType": "YulIdentifier",
                        "src": "1997:6:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "1988:5:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2012:13:41",
                      "value": {
                        "name": "_base",
                        "nodeType": "YulIdentifier",
                        "src": "2020:5:41"
                      },
                      "variableNames": [
                        {
                          "name": "base",
                          "nodeType": "YulIdentifier",
                          "src": "2012:4:41"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2059:289:41",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "2073:11:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2083:1:41",
                              "type": "",
                              "value": "1"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "2077:2:41",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2125:9:41",
                              "statements": [
                                {
                                  "nodeType": "YulBreak",
                                  "src": "2127:5:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "2110:8:41"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2120:2:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2107:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2107:16:41"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nodeType": "YulIdentifier",
                                "src": "2100:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2100:24:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2097:2:41"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2175:22:41",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "2177:16:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2177:18:41"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2177:18:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2153:4:41"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "max",
                                      "nodeType": "YulIdentifier",
                                      "src": "2163:3:41"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2168:4:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "div",
                                    "nodeType": "YulIdentifier",
                                    "src": "2159:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2159:14:41"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "2150:2:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2150:24:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2147:2:41"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2231:29:41",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2233:25:41",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "2246:5:41"
                                      },
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "2253:4:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "2242:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2242:16:41"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "2233:5:41"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2217:8:41"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2227:2:41"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "2213:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2213:17:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2210:2:41"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2273:23:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2285:4:41"
                                },
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2291:4:41"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nodeType": "YulIdentifier",
                                "src": "2281:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2281:15:41"
                            },
                            "variableNames": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "2273:4:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2309:29:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2325:2:41"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2329:8:41"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nodeType": "YulIdentifier",
                                "src": "2321:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2321:17:41"
                            },
                            "variableNames": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2309:8:41"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "kind": "bool",
                        "nodeType": "YulLiteral",
                        "src": "2042:4:41",
                        "type": "",
                        "value": "true"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2047:3:41",
                        "statements": []
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2038:3:41",
                        "statements": []
                      },
                      "src": "2034:314:41"
                    }
                  ]
                },
                "name": "checked_exp_helper",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "_power",
                    "nodeType": "YulTypedName",
                    "src": "1929:6:41",
                    "type": ""
                  },
                  {
                    "name": "_base",
                    "nodeType": "YulTypedName",
                    "src": "1937:5:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "1944:8:41",
                    "type": ""
                  },
                  {
                    "name": "max",
                    "nodeType": "YulTypedName",
                    "src": "1954:3:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "1962:5:41",
                    "type": ""
                  },
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "1969:4:41",
                    "type": ""
                  }
                ],
                "src": "1901:453:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2429:69:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2439:53:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2469:4:41"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2475:8:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2489:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "2485:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2485:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "2448:20:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2448:44:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2439:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2400:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2406:8:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2419:5:41",
                    "type": ""
                  }
                ],
                "src": "2359:139:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2571:80:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2581:64:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2611:4:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2621:8:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2631:4:41",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2617:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2617:19:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2642:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "2638:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2638:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "2590:20:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2590:55:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2581:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2542:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2548:8:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2561:5:41",
                    "type": ""
                  }
                ],
                "src": "2503:148:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2720:858:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2758:52:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2772:10:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2781:1:41",
                              "type": "",
                              "value": "1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "2772:5:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "2795:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2740:8:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2733:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2733:16:41"
                      },
                      "nodeType": "YulIf",
                      "src": "2730:2:41"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2843:52:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2857:10:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2866:1:41",
                              "type": "",
                              "value": "0"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "2857:5:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "2880:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2829:4:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2822:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2822:12:41"
                      },
                      "nodeType": "YulIf",
                      "src": "2819:2:41"
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2931:52:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2945:10:41",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2954:1:41",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "2945:5:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "2968:5:41"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "2924:59:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2929:1:41",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2999:176:41",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3034:22:41",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "3036:16:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3036:18:41"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3036:18:41"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3019:8:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3029:3:41",
                                      "type": "",
                                      "value": "255"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "3016:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3016:17:41"
                                },
                                "nodeType": "YulIf",
                                "src": "3013:2:41"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3069:25:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3082:8:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3092:1:41",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "3078:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3078:16:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3069:5:41"
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3125:22:41",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "3127:16:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3127:18:41"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3127:18:41"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "3113:5:41"
                                    },
                                    {
                                      "name": "max",
                                      "nodeType": "YulIdentifier",
                                      "src": "3120:3:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "3110:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3110:14:41"
                                },
                                "nodeType": "YulIf",
                                "src": "3107:2:41"
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3160:5:41"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "2992:183:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2997:1:41",
                            "type": "",
                            "value": "2"
                          }
                        }
                      ],
                      "expression": {
                        "name": "base",
                        "nodeType": "YulIdentifier",
                        "src": "2911:4:41"
                      },
                      "nodeType": "YulSwitch",
                      "src": "2904:271:41"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3273:123:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3287:28:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "3300:4:41"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "3306:8:41"
                                }
                              ],
                              "functionName": {
                                "name": "exp",
                                "nodeType": "YulIdentifier",
                                "src": "3296:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3296:19:41"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3287:5:41"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "3346:22:41",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "3348:16:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3348:18:41"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3348:18:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "power",
                                  "nodeType": "YulIdentifier",
                                  "src": "3334:5:41"
                                },
                                {
                                  "name": "max",
                                  "nodeType": "YulIdentifier",
                                  "src": "3341:3:41"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "3331:2:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3331:14:41"
                            },
                            "nodeType": "YulIf",
                            "src": "3328:2:41"
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3381:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3197:4:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3203:2:41",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3194:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3194:12:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3211:8:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3221:2:41",
                                    "type": "",
                                    "value": "78"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3208:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3208:16:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3190:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3190:35:41"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3234:4:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3240:3:41",
                                    "type": "",
                                    "value": "307"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3231:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3231:13:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3249:8:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3259:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3246:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3246:16:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3227:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3227:36:41"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "3187:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3187:77:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3184:2:41"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3405:65:41",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3447:1:41",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3450:4:41"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "3456:8:41"
                          },
                          {
                            "name": "max",
                            "nodeType": "YulIdentifier",
                            "src": "3466:3:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_helper",
                          "nodeType": "YulIdentifier",
                          "src": "3428:18:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3428:42:41"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "3409:7:41",
                          "type": ""
                        },
                        {
                          "name": "base_1",
                          "nodeType": "YulTypedName",
                          "src": "3418:6:41",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3512:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3514:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3514:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3514:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3485:7:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "max",
                                "nodeType": "YulIdentifier",
                                "src": "3498:3:41"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "3503:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "3494:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3494:16:41"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3482:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3482:29:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3479:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3543:29:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3556:7:41"
                          },
                          {
                            "name": "base_1",
                            "nodeType": "YulIdentifier",
                            "src": "3565:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3552:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3552:20:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "3543:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_unsigned",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2686:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2692:8:41",
                    "type": ""
                  },
                  {
                    "name": "max",
                    "nodeType": "YulTypedName",
                    "src": "2702:3:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2710:5:41",
                    "type": ""
                  }
                ],
                "src": "2656:922:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3635:116:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3694:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3696:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3696:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3696:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3666:1:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3659:6:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3659:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3652:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3652:17:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3674:1:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3685:1:41",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3681:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3681:6:41"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3689:1:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "3677:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3677:14:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3671:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3671:21:41"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "3648:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3648:45:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3645:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3725:20:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3740:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3743:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3736:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3736:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "3725:7:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3614:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3617:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "3623:7:41",
                    "type": ""
                  }
                ],
                "src": "3583:168:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3805:76:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3827:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3829:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3829:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3829:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3821:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3824:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3818:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3818:8:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3815:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3858:17:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3870:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3873:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "3866:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3866:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "3858:4:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3787:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3790:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "3796:4:41",
                    "type": ""
                  }
                ],
                "src": "3756:125:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3933:88:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3964:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3966:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3966:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3966:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3949:5:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3960:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "3956:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3956:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "3946:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3946:17:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3943:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3995:20:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4006:5:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4013:1:41",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4002:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4002:13:41"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "3995:3:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "3915:5:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "3925:3:41",
                    "type": ""
                  }
                ],
                "src": "3886:135:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4058:95:41",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4075:1:41",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4082:3:41",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4087:10:41",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4078:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4078:20:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4068:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4068:31:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4068:31:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4115:1:41",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4118:4:41",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4108:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4108:15:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4108:15:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4139:1:41",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4142:4:41",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "4132:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4132:15:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4132:15:41"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "4026:127:41"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_struct$_LibParams_$4430_storage_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_struct$_LibParams_$4430_storage_ptrt_array$_t_struct$_PrizeRewardRate_$4459_storage_$dyn_storage_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base\n    {\n        power := _power\n        base := _base\n        for { } true { }\n        {\n            let _1 := 1\n            if iszero(gt(exponent, _1)) { break }\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, _1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent, not(0))\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff), not(0))\n    }\n    function checked_exp_unsigned(base, exponent, max) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(1, base, exponent, max)\n        if gt(power_1, div(max, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
          "id": 41,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x32A1B321 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x4142C652 EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x47DC9EEE EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0xA150194B EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xD4675770 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xF66D9A4D EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x7F CALLDATASIZE PUSH1 0x4 PUSH2 0x970 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x92 SWAP3 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x99B JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x94F JUMP JUMPDEST PUSH2 0x403 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBB PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x45A JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x146 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x299 JUMP JUMPDEST DUP5 SLOAD PUSH2 0x157 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x299 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x183 DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x17D PUSH1 0x8 PUSH1 0xA PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x4 DUP10 ADD SLOAD SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP9 SLOAD DUP2 LT ISZERO PUSH2 0x25B JUMPI DUP9 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1B4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND PUSH2 0x249 JUMPI PUSH1 0x0 PUSH2 0x20C DUP11 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1F4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD DUP10 PUSH2 0x4ED JUMP JUMPDEST SWAP1 POP PUSH2 0x22F PUSH2 0x228 DUP3 DUP12 PUSH1 0x5 ADD SLOAD PUSH2 0x588 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP4 POP PUSH2 0x245 PUSH2 0x23E DUP7 DUP4 PUSH2 0x588 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x253 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x18B JUMP JUMPDEST POP PUSH1 0x7 DUP8 ADD SLOAD ISZERO PUSH2 0x292 JUMPI PUSH1 0x7 DUP8 ADD SLOAD PUSH2 0x276 SWAP1 DUP4 SWAP1 PUSH2 0x5A6 JUMP JUMPDEST SWAP2 POP PUSH2 0x28F DUP8 PUSH1 0x7 ADD SLOAD DUP3 PUSH2 0x5A6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x2AC JUMPI PUSH2 0x38A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 PUSH2 0x2C5 DUP5 DUP4 DUP6 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x341 DUP2 DUP6 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x321 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x59A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x361 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SSTORE POP DUP1 PUSH2 0x380 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AF JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST DUP1 SLOAD PUSH2 0x399 JUMPI PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x38A JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x3F3 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x39C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 DUP2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x414 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 SLOAD DUP2 LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 PUSH2 0x42E DUP7 DUP4 DUP8 PUSH2 0x5CE JUMP JUMPDEST SWAP1 POP PUSH2 0x43A DUP4 DUP3 PUSH2 0x59A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x448 SWAP1 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x418 JUMP JUMPDEST POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH2 0x465 JUMPI PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x38A JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x493 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x4C6 SWAP1 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0xB11 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x57E JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x51A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 GT PUSH2 0x56C JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x552 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP PUSH2 0x454 JUMP JUMPDEST DUP1 PUSH2 0x576 DUP2 PUSH2 0xB47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F1 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH2 0x2710 PUSH2 0x17D DUP6 DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5B5 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST DUP2 PUSH2 0x5C1 JUMPI POP DUP2 PUSH2 0x454 JUMP JUMPDEST PUSH2 0x4DA PUSH2 0x23E DUP5 DUP5 PUSH2 0x588 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x5EA SWAP2 SWAP1 PUSH2 0x9B2 JUMP JUMPDEST PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x9B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 TIMESTAMP GT PUSH2 0x605 JUMPI TIMESTAMP PUSH2 0x607 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x658 JUMPI PUSH2 0x655 DUP8 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x63D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x741 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x6EF PUSH2 0x674 DUP4 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x59A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6B8 DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x697 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x7F8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x6D8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x804 JUMP JUMPDEST SWAP1 POP PUSH2 0x735 DUP9 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x714 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x7F8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x758 JUMPI POP PUSH1 0x0 PUSH2 0x454 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x76C SWAP2 SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x77A DUP3 DUP7 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP PUSH3 0x2A300 DUP2 LT ISZERO PUSH2 0x792 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x3F480 DUP2 LT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x64 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x54600 DUP2 LT ISZERO PUSH2 0x7BE JUMPI PUSH1 0xC8 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x69780 DUP2 LT ISZERO PUSH2 0x7D5 JUMPI PUSH2 0x12C SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH3 0x7E900 DUP2 LT ISZERO PUSH2 0x7EC JUMPI PUSH2 0x190 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH2 0x1F4 SWAP3 POP POP POP PUSH2 0x454 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP3 DUP5 PUSH2 0xB30 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 DUP2 PUSH2 0x825 PUSH4 0x5F5E100 PUSH2 0x81F PUSH1 0x2 DUP6 PUSH2 0xA3F JUMP JUMPDEST SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x83B PUSH2 0x1388 PUSH2 0x81F DUP6 DUP2 DUP11 DUP13 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x85A PUSH2 0x1388 PUSH2 0x81F PUSH2 0x853 PUSH1 0x2 DUP9 PUSH2 0xA3F JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C PUSH1 0x6 PUSH2 0x17D PUSH2 0x871 PUSH1 0x2 DUP14 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x81F PUSH1 0x2 DUP14 PUSH2 0xA3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8A0 PUSH1 0x2 PUSH2 0x17D DUP9 PUSH2 0x81F PUSH1 0x2 DUP16 PUSH2 0x899 SWAP2 SWAP1 PUSH2 0xA3F JUMP JUMPDEST DUP15 SWAP1 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8C4 PUSH1 0x3 PUSH2 0x17D PUSH2 0x8B7 PUSH1 0x2 DUP12 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x2 DUP16 PUSH2 0x81F SWAP2 SWAP1 PUSH2 0xA3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0x8D8 DUP7 DUP2 DUP12 DUP12 PUSH2 0x59A JUMP JUMPDEST SWAP1 PUSH2 0x59A JUMP JUMPDEST SWAP1 POP PUSH2 0x8F4 DUP4 PUSH2 0x8EE DUP4 DUP9 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP PUSH2 0x904 DUP12 PUSH2 0x81F DUP4 DUP16 PUSH2 0x4CE JUMP JUMPDEST SWAP1 POP PUSH2 0x927 PUSH5 0xE8D4A51000 PUSH2 0x17D PUSH2 0x91D PUSH1 0x3 DUP13 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x17D DUP6 DUP16 PUSH2 0x4CE JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x948 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x961 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x984 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9C5 JUMPI PUSH2 0x9C5 PUSH2 0xB62 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9E5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x9FC JUMPI POP PUSH2 0xA27 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0xA0E JUMPI PUSH2 0xA0E PUSH2 0xB62 JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0xA1B JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0x9ED JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA5C JUMPI POP PUSH1 0x1 PUSH2 0x4DA JUMP JUMPDEST DUP2 PUSH2 0xA69 JUMPI POP PUSH1 0x0 PUSH2 0x4DA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA7F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA89 JUMPI PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x4DA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xA9A JUMPI PUSH2 0xA9A PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xAB0 JUMPI PUSH2 0xAB0 PUSH2 0xB62 JUMP JUMPDEST POP PUSH2 0x4DA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xAE9 JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0xAE4 JUMPI PUSH2 0xAE4 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH2 0xAF6 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x9EA JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xB08 PUSH2 0xB62 JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xB2B JUMPI PUSH2 0xB2B PUSH2 0xB62 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xB42 JUMPI PUSH2 0xB42 PUSH2 0xB62 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xB5B JUMPI PUSH2 0xB5B PUSH2 0xB62 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x57DB1353763F86020068C421450B886266D2FF8505181 0xB3 SWAP15 PUSH22 0x11FC6E323164736F6C63430008000033000000000000 ",
      "sourceMap": "192:3550:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2247:1492;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;375:648;;;;;;;;;;-1:-1:-1;375:648:39;;;;;:::i;:::-;;:::i;:::-;;1029:290;;;;;;;;;;-1:-1:-1;1029:290:39;;;;;:::i;:::-;;:::i;327:41::-;;;:::i;:::-;;;;;;;:::i;1628:613::-;;;;;;:::i;:::-;;:::i;1325:297::-;;;;;;;;;;-1:-1:-1;1325:297:39;;;;;:::i;:::-;;:::i;2247:1492::-;2570:14;;;;2533:7;;;;2570:14;;;;;2565:34;;-1:-1:-1;2594:1:39;;-1:-1:-1;2594:1:39;2586:13;;2565:34;2614:14;;2610:38;;-1:-1:-1;2643:1:39;;-1:-1:-1;2643:1:39;2635:13;;2610:38;2659:39;2713:68;2762:4;:18;;;2714:42;367:1;2738:2;:17;;;;:::i;:::-;2714:19;;;;;:23;:42::i;:::-;2713:48;;:68::i;:::-;2659:122;;2792:14;2820:26;2866:9;2861:625;2885:14;;2881:18;;2861:625;;;2925:7;2933:1;2925:10;;;;;;-1:-1:-1;;;2925:10:39;;;;;;;;;;;;;;;;;:31;:10;;;;;:31;;;;2920:556;;2977:16;2996:133;3057:7;3065:1;3057:10;;;;;;-1:-1:-1;;;3057:10:39;;;;;;;;;;;;;;;;;;;:15;;;3094:17;2996:39;:133::i;:::-;2977:152;;3157:98;3197:32;3220:8;3197:4;:16;;;:22;;:32;;;;:::i;:::-;3157:6;;:10;:98::i;:::-;3148:107;-1:-1:-1;3295:158:39;3347:80;:31;3418:8;3347:70;:80::i;:::-;3295:18;;:22;:158::i;:::-;3274:179;;2920:556;;2901:3;;;;:::i;:::-;;;;2861:625;;;-1:-1:-1;3500:24:39;;;;:28;3496:191;;3566:24;;;;3553:38;;:6;;:12;:38::i;:::-;3544:47;;3626:50;3651:4;:24;;;3626:18;:24;;:50;;;;:::i;:::-;3605:71;;3496:191;3705:6;;-1:-1:-1;3713:18:39;-1:-1:-1;;2247:1492:39;;;;;;;:::o;375:648::-;590:14;;586:32;;611:7;;586:32;633:9;628:389;652:14;;648:18;;628:389;;;687:22;712:113;774:7;800:1;820:4;712:44;:113::i;:::-;687:138;;872:15;840:7;848:1;840:10;;;;;;-1:-1:-1;;;840:10:39;;;;;;;;;;;;;;;;;;;:29;;:47;;;;930:76;978:14;930:7;938:1;930:10;;;;;;-1:-1:-1;;;930:10:39;;;;;;;;;;;;;;;;;;;:26;;;:30;;:76;;;;:::i;:::-;901:7;909:1;901:10;;;;;;-1:-1:-1;;;901:10:39;;;;;;;;;;;;;;;;;:26;:10;;;;;:26;:105;-1:-1:-1;668:3:39;;;;:::i;:::-;;;;628:389;;;;375:648;;;:::o;1029:290::-;1167:14;;1163:32;;1188:7;;1163:32;1210:9;1205:108;1229:14;;1225:18;;1205:108;;;1298:4;1264:7;1272:1;1264:10;;;;;;-1:-1:-1;;;1264:10:39;;;;;;;;;;;;;;;;;;;;;;:31;;:38;;-1:-1:-1;;1264:38:39;;;;;;;;;;1245:3;;;;:::i;:::-;;;;1205:108;;1029:290;;:::o;327:41::-;367:1;327:41;:::o;1628:613::-;1873:14;;1845:7;;1869:33;;-1:-1:-1;1901:1:39;1894:8;;1869:33;1913:14;1946:9;1941:270;1965:14;;1961:18;;1941:270;;;2000:22;2025:125;2087:7;2112:1;2132:4;2025:44;:125::i;:::-;2000:150;-1:-1:-1;2174:26:39;:6;2000:150;2174:10;:26::i;:::-;2165:35;;1941:270;1981:3;;;;;:::i;:::-;;;;1941:270;;;-1:-1:-1;2228:6:39;-1:-1:-1;1628:613:39;;;;;:::o;1325:297::-;1480:14;;1476:32;;1501:7;;1476:32;1523:9;1518:98;1542:14;;1538:18;;1518:98;;;1601:4;1577:7;1585:1;1577:10;;;;;;-1:-1:-1;;;1577:10:39;;;;;;;;;;;;;;;;;;;:21;;;:28;;;;;;;;;;;;;;;;;;1558:3;;;;;:::i;:::-;;;;1518:98;;3382:96:9;3440:7;3466:5;3470:1;3466;:5;:::i;:::-;3459:12;3382:96;-1:-1:-1;;;3382:96:9:o;3767:::-;3825:7;3851:5;3855:1;3851;:5;:::i;4096:426:38:-;4284:7;;4307:190;4331:24;;4327:28;;4307:190;;;4389:17;4407:1;4389:20;;;;;;-1:-1:-1;;;4389:20:38;;;;;;;;;;;;;;;;;;;:25;;;4380:5;:34;4376:111;;4441:17;4459:1;4441:20;;;;;;-1:-1:-1;;;4441:20:38;;;;;;;;;;;;;;;;;;;:31;;;4434:38;;;;;4376:111;4357:3;;;;:::i;:::-;;;;4307:190;;;-1:-1:-1;4514:1:38;;4096:426;-1:-1:-1;;;4096:426:38:o;234:125:37:-;297:7;323:29;222:5;323:11;:3;331:2;323:7;:11::i;2672:96:9:-;2730:7;2756:5;2760:1;2756;:5;:::i;547:184:37:-;610:7;633:8;629:22;;-1:-1:-1;650:1:37;643:8;;629:22;665:7;661:23;;-1:-1:-1;681:3:37;674:10;;661:23;701;709:14;715:3;720:2;709:5;:14::i;994:1043:38:-;1247:7;1270:20;1366:4;:17;;;1337:4;:13;;;1306:4;:15;;;:44;;;;:::i;:::-;:77;;;;:::i;:::-;1270:113;;1394:14;1441:12;1423:15;:30;:63;;1471:15;1423:63;;;1456:12;1423:63;1531:22;;;;1394:92;;-1:-1:-1;1497:19:38;;1531:22;;1526:176;;;1584:107;1624:7;1632:11;1624:20;;;;;;-1:-1:-1;;;1624:20:38;;;;;;;;;;;;;;;;;;;:31;;;1673:4;1584:22;:107::i;:::-;1570:121;;1526:176;1712:22;1737:177;1769:30;1787:11;1769:4;:13;;;:17;;:30;;;;:::i;:::-;1813:43;1824:7;1832:11;1824:20;;;;;;-1:-1:-1;;;1824:20:38;;;;;;;;;;;;;;;;;;;:31;;;1813:6;:10;;:43;;;;:::i;:::-;1870:7;1878:11;1870:20;;;;;;-1:-1:-1;;;1870:20:38;;;;;;;;;;;;;;;;;;;:34;;;1737:18;:177::i;:::-;1712:202;;1942:56;1961:7;1969:11;1961:20;;;;;;-1:-1:-1;;;1961:20:38;;;;;;;;;;;;;;;;;;;:36;;;1942:14;:18;;:56;;;;:::i;:::-;1925:73;994:1043;-1:-1:-1;;;;;;;;994:1043:38:o;2043:769::-;2245:22;;;;2216:7;;2245:22;;2240:62;;-1:-1:-1;2290:1:38;2283:8;;2240:62;2351:13;;;;2331:15;;2312:16;;2331:34;;:15;:19;:34::i;:::-;2312:53;-1:-1:-1;2375:18:38;2396:24;2312:53;2409:10;2396:12;:24::i;:::-;2375:45;;2448:8;2435:10;:21;2431:375;;;2479:1;2472:8;;;;;;2431:375;2514:8;2501:10;:21;2497:309;;;2545:3;2538:10;;;;;;2497:309;2582:8;2569:10;:21;2565:241;;;2613:3;2606:10;;;;;;2565:241;2650:9;2637:10;:22;2633:173;;;2682:3;2675:10;;;;;;2633:173;2719:9;2706:10;:22;2702:104;;;2751:3;2744:10;;;;;;2702:104;2792:3;2785:10;;;;;;3039:96:9;3097:7;3123:5;3127:1;3123;:5;:::i;2818:1272:38:-;2970:7;3018:8;2970:7;3053:42;3089:5;3054:16;3069:1;3018:8;3054:16;:::i;:::-;3053:35;;:42::i;:::-;3037:58;-1:-1:-1;3106:14:38;3123:102;3220:4;3123:79;3188:13;3123:79;:12;3153:15;3123:29;:46::i;:102::-;3106:119;-1:-1:-1;3244:13:38;3260:73;3328:4;3260:50;3293:16;3308:1;3293:13;:16;:::i;:::-;3260:15;;:32;:50::i;:73::-;3244:89;-1:-1:-1;3344:13:38;3360:74;3432:1;3360:54;3395:18;3412:1;3395:15;:18;:::i;:::-;3361:15;3375:1;3361:12;:15;:::i;3360:74::-;3344:90;;3445:13;3461:101;3560:1;3461:81;3528:13;3461:49;3508:1;3491:15;:18;;;;:::i;:::-;3461:12;;:29;:49::i;:101::-;3445:117;-1:-1:-1;3573:13:38;3589:75;3662:1;3589:55;3627:16;3642:1;3627:13;:16;:::i;:::-;3607:1;3590:15;:18;;;;:::i;3589:75::-;3573:91;-1:-1:-1;3676:22:38;3701:39;3573:91;3701:28;3723:5;3701:28;:5;3711:6;3701:9;:17::i;:::-;:21;;:28::i;:39::-;3676:64;-1:-1:-1;3768:36:38;3798:5;3768:25;3676:64;3787:5;3768:18;:25::i;:::-;:29;;:36::i;:::-;3751:53;-1:-1:-1;3832:79:38;3898:12;3832:48;3751:53;3864:15;3832:31;:48::i;:79::-;3815:96;-1:-1:-1;3939:111:38;4043:6;3939:86;4008:16;4023:1;4008:13;:16;:::i;:::-;3939:51;:14;3971:18;3939:31;:51::i;:111::-;3922:128;2818:1272;-1:-1:-1;;;;;;;;;;;;2818:1272:38:o;14:250:41:-;;186:2;174:9;165:7;161:23;157:32;154:2;;;207:6;199;192:22;154:2;-1:-1:-1;235:23:41;;144:120;-1:-1:-1;144:120:41:o;269:346::-;;;486:2;474:9;465:7;461:23;457:32;454:2;;;507:6;499;492:22;454:2;-1:-1:-1;;535:23:41;;;605:2;590:18;;;577:32;;-1:-1:-1;444:171:41:o;620:470::-;;;;910:2;898:9;889:7;885:23;881:32;878:2;;;931:6;923;916:22;878:2;-1:-1:-1;;959:23:41;;;1029:2;1014:18;;1001:32;;-1:-1:-1;1080:2:41;1065:18;;;1052:32;;868:222;-1:-1:-1;868:222:41:o;1095:185::-;1249:25;;;1237:2;1222:18;;1204:76::o;1285:256::-;1467:25;;;1523:2;1508:18;;1501:34;1455:2;1440:18;;1422:119::o;1546:128::-;;1617:1;1613:6;1610:1;1607:13;1604:2;;;1623:18;;:::i;:::-;-1:-1:-1;1659:9:41;;1594:80::o;1679:217::-;;1745:1;1735:2;;-1:-1:-1;;;1770:31:41;;1824:4;1821:1;1814:15;1852:4;1777:1;1842:15;1735:2;-1:-1:-1;1881:9:41;;1725:171::o;1901:453::-;1997:6;2020:5;2034:314;2083:1;2120:2;2110:8;2107:16;2097:2;;2127:5;;;2097:2;2168:4;2163:3;2159:14;2153:4;2150:24;2147:2;;;2177:18;;:::i;:::-;2227:2;2217:8;2213:17;2210:2;;;2242:16;;;;2210:2;2321:17;;;;;2281:15;;2034:314;;;1978:376;;;;;;;:::o;2359:139::-;;2448:44;-1:-1:-1;;2475:8:41;2469:4;2448:44;:::i;2503:148::-;;2590:55;-1:-1:-1;;2631:4:41;2617:19;;2611:4;2656:922;;2740:8;2730:2;;-1:-1:-1;2781:1:41;2795:5;;2730:2;2829:4;2819:2;;-1:-1:-1;2866:1:41;2880:5;;2819:2;2911:4;2929:1;2924:59;;;;2997:1;2992:183;;;;2904:271;;2924:59;2954:1;2945:10;;2968:5;;;2992:183;3029:3;3019:8;3016:17;3013:2;;;3036:18;;:::i;:::-;3092:1;3082:8;3078:16;3069:25;;3120:3;3113:5;3110:14;3107:2;;;3127:18;;:::i;:::-;3160:5;;;2904:271;;3259:2;3249:8;3246:16;3240:3;3234:4;3231:13;3227:36;3221:2;3211:8;3208:16;3203:2;3197:4;3194:12;3190:35;3187:77;3184:2;;;-1:-1:-1;3296:19:41;;;3331:14;;;3328:2;;;3348:18;;:::i;:::-;3381:5;;3184:2;3428:42;3466:3;3456:8;3450:4;3447:1;3428:42;:::i;:::-;3503:6;3498:3;3494:16;3485:7;3482:29;3479:2;;;3514:18;;:::i;:::-;3552:20;;2720:858;-1:-1:-1;;;;2720:858:41:o;3583:168::-;;3689:1;3685;3681:6;3677:14;3674:1;3671:21;3666:1;3659:9;3652:17;3648:45;3645:2;;;3696:18;;:::i;:::-;-1:-1:-1;3736:9:41;;3635:116::o;3756:125::-;;3824:1;3821;3818:8;3815:2;;;3829:18;;:::i;:::-;-1:-1:-1;3866:9:41;;3805:76::o;3886:135::-;;-1:-1:-1;;3946:17:41;;3943:2;;;3966:18;;:::i;:::-;-1:-1:-1;4013:1:41;4002:13;;3933:88::o;4026:127::-;4087:10;4082:3;4078:20;4075:1;4068:31;4118:4;4115:1;4108:15;4142:4;4139:1;4132:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "598000",
        "executionCost": "663",
        "totalCost": "598663"
      },
      "external": {
        "getPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage,StakingPoolStorageStructure.PrizeRewardRate[] storage)": "infinite",
        "getStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage)": "infinite",
        "oracleDecimal()": "256",
        "withdrawPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage)": "infinite",
        "withdrawStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage)": "infinite",
        "withdrawStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage,StakingPoolStorageStructure.PrizeRewardRate[] storage)": "32a1b321",
      "getStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage)": "d4675770",
      "oracleDecimal()": "a150194b",
      "withdrawPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage)": "47dc9eee",
      "withdrawStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage)": "f66d9a4d",
      "withdrawStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,StakingPoolStorageStructure.LibParams storage)": "4142c652"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"oracleDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ClaimRewardLib.sol\":\"ClaimRewardLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ce825a5e793fc484345dc3f0a6740a30789f5350e78e88ec8299a37b5f6e29\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributorUpgradeable is Initializable{\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    function __WrappedTokenDistributor_initialize(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) public initializer {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    // the function should be rename to getSwapRouter\\n    function getswapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0x42e153750df685de4b049d47eabd1509a5f80371ec82b8e4c5091614b433344b\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PriceConsumerUpgradeable is Initializable {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n    */\\n    function __PriceConsumer_initialize(address _oracle) public initializer {\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * @notice Returns decimals for oracle contract\\n    */\\n    function getDecimals() external view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the latest price from oracle contract\\n    */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9775a722a16c168720b5f8480797739dd78055a664e517620ee454cd6d8642b8\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"../Price/PriceConsumerUpgradeable.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributorUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../libraries/CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/IndexedClaimRewardLib.sol\\\";\\nimport \\\"../libraries/ClaimRewardLib.sol\\\";\\n\\nimport \\\"../interfaces/ITotemToken.sol\\\";\\nimport \\\"../interfaces/IRewardManager.sol\\\";\\n\\ncontract StakingPoolStorageStructure is \\n    OwnableUpgradeable,  \\n    PriceConsumerUpgradeable,\\n    USDRetriever,\\n    WrappedTokenDistributorUpgradeable\\n{\\n    address public stakingPoolImplementation;\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    /**\\n     * @notice Declared for passing the needed params to libraries.\\n     */\\n    struct LibParams {\\n        uint256 launchDate;\\n        uint256 lockTime;\\n        uint256 maturityTime;\\n        uint256 maturingPrice;\\n        uint256 usdPrizeAmount;\\n        uint256 prizeAmount;\\n        uint256 stakeApr;\\n        uint256 collaborativeReward;\\n        bool isEnhancedEnabled;\\n        bool isMatured;\\n    }\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    LibParams public lps;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n\\n    ITotemToken public totemToken;\\n    IRewardManager public rewardManager;\\n    IERC20 public wrappedToken;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public constant sizeLimitRangeRate = 5;\\n    uint256 public constant oracleDecimal = 8;\\n\\n    uint256 public launchDate;\\n    uint256 public lockTime;\\n    uint256 public maturityTime;\\n    uint256 public sizeAllocation;\\n    uint256 public stakeApr;\\n    uint256 public prizeAmount;\\n    /**\\n     * @notice usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0 \\n            then the pool is only TOTM rewarder.\\n     */\\n    uint256 public usdPrizeAmount;\\n    uint256 public stakeTaxRate;\\n    uint256 public minimumStakeAmount;\\n    uint256 public totalStaked;\\n    uint256 public maturingPrice;\\n    uint256 public potentialCollabReward;\\n    uint256 public collaborativeRange;\\n    /**\\n     * @notice Based on the white paper, the collaborative reward can be 20% (2000),\\n             25% (2500) or 35% (3500).\\n     */\\n    uint256 public collaborativeReward; \\n\\n    bool public isAnEmergency;\\n    bool public isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    /**\\n     * @dev StakingPoolImplementation can't be upgraded unless superAdmin sets this flag.\\n     */\\n    bool public upgradeEnabled;\\n}\\n\",\"keccak256\":\"0xdfdb9c2bfa497dfc55fd6f39bf684769e6ca9901b104f9eac0c54a7a8f7bc71a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n}\",\"keccak256\":\"0xab39a767c897abdfa93b0a33593cd3c179fd5222f2a37de798d298ccf66e5adb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITotemToken {\\n    \\n    function setLocker(address _locker) external;\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function taxRate() external returns (uint256);\\n\\n    function taxationWallet() external returns (address);\\n\\n    function taxExempt(address _msgSender) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ba963229ac039a0550990884eb976a06fb2fe7691848ff27af1c14574346531\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xcbe25ead953d92501d8fc100fbc9d1c5d3885b6360b3619309063fdd3b874a31\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CalculateRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary CalculateRewardLib {\\n\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function getTotalStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage _staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    _staker[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    /**\\n     * @notice the reward formula is:\\n          ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n    */\\n    function _getStakingRewardPerStake(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maturityDate = \\n            _lps.launchDate + \\n            _lps.lockTime + \\n            _lps.maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr;\\n        if ( _lps.isEnhancedEnabled ) {\\n            enhancedApr = _getEnhancedRewardRate(\\n                _staker[_stakeIndex].stakedTime,\\n                _lps\\n            );\\n        }\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            _lps.stakeApr.add(enhancedApr),\\n            timeTo.sub(_staker[_stakeIndex].stakedTime),\\n            _staker[_stakeIndex].stakedBalance\\n        );\\n\\n        rewardPerStake = rewardPerStake.sub(_staker[_stakeIndex].amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _getEnhancedRewardRate(\\n        uint256 stakedTime,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        if (!_lps.isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = _lps.launchDate.add(_lps.lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getPercentageReward(\\n        uint256 _rank, \\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _prizeRewardRates.length; i++) {\\n            if (_rank <= _prizeRewardRates[i].rank) {\\n                return _prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n\\n\\n}\",\"keccak256\":\"0xb36457e2da467488583be3093c215fc5c318981de43b77afd7c0c03716ae3b3b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary ClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function withdrawStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker, \\n                i, \\n                _lps);\\n\\n            _staker[i].lastWithdrawalTime = block.timestamp;\\n            _staker[i].amountWithdrawn = _staker[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function withdrawPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function withdrawStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].didUnstake = true;\\n        }\\n    }\\n\\n    function getStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps  \\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker,\\n                i, \\n                _lps\\n            );\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function getPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**oracleDecimal)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = CalculateRewardLib._getPercentageReward(\\n                    _staker[i].rank,\\n                    _prizeRewardRates\\n                );\\n\\n                reward = reward.add(\\n                            _lps.prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xc57a6bd1fce9f48bf3a62b555acfec1b1a7ddba984dd534da4bf75fabb8b9a93\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IndexedClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary IndexedClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function withdrawIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n\\n        _staker[_stakeIndex].lastWithdrawalTime = block.timestamp;\\n        _staker[_stakeIndex].amountWithdrawn = _staker[_stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function withdrawIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public \\n    {\\n        if (_staker.length == 0) return;\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return;\\n\\n        _staker[_stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    function withdrawIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        _staker[_stakeIndex].didUnstake = true;\\n    }\\n\\n    function getIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!_staker[_stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                _staker[_stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function getIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function getIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        if (_stakeIndex >= _staker.length) return (0,0);\\n\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**oracleDecimal)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = CalculateRewardLib._getPercentageReward(\\n            _staker[_stakeIndex].rank,\\n            _prizeRewardRates\\n        );\\n\\n        reward = reward.add(\\n                        _lps.prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x5c150375f4c5381c70540c62529dfde8cc15e3bffd033458837c8ba463aab7e7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}