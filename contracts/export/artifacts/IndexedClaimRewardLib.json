{
  "contractName": "IndexedClaimRewardLib",
  "sourceName": "contracts/libraries/IndexedClaimRewardLib.sol",
  "abi": [
    {
      "inputs": [],
      "name": "oracleDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x610c8a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063a150194b11610065578063a150194b146100ea578063eaff3050146100f2578063ec8ecc0214610112578063f7ac9cba1461013257610087565b80634f1604231461008c5780635eac7af3146100b557806393aaeaf9146100c8575b600080fd5b61009f61009a366004610a24565b610153565b6040516100ac9190610a80565b60405180910390f35b61009f6100c3366004610a03565b61019a565b8180156100d457600080fd5b506100e86100e3366004610a03565b610247565b005b61009f6102dc565b8180156100fe57600080fd5b506100e861010d366004610a24565b6102e1565b81801561011e57600080fd5b506100e861012d366004610a03565b6103be565b610145610140366004610a4f565b610424565b6040516100ac929190610a89565b825460009061016457506000610193565b8354831061017457506000610193565b6000806101828686866105a1565b905061018e8282610714565b925050505b9392505050565b81546000906101ab57506000610241565b825482106101bb57506000610241565b60008383815481106101dd57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160019054906101000a900460ff1661023e5761023b84848154811061022357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201548290610714565b90505b90505b92915050565b8154610252576102d8565b81818154811061027257634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff1615610293576102d8565b60018282815481106102b557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600701805460ff19169115159190911790555b5050565b600881565b82546102ec576103b9565b825482106102f9576103b9565b60006103068484846105a1565b90504284848154811061032957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600301819055506103828185858154811061036257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016002015461071490919063ffffffff16565b8484815481106103a257634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020181905550505b505050565b81546103c9576102d8565b815481106103d6576102d8565b60018282815481106103f857634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160016101000a81548160ff0219169083151502179055505050565b60088201546000908190610100900460ff1661044557506000905080610598565b855461045657506000905080610598565b8554851061046957506000905080610598565b85858154811061048957634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff16156104b057506000905080610598565b60006104dc85600301546104d66008600a6104cb9190610b0c565b600489015490610720565b9061072c565b9050600080600061051e8a8a8154811061050657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016006015488610738565b905061054161053a828a600501546107d390919063ffffffff16565b8490610714565b925061055761055085836107d3565b8390610714565b6007890154909250156105905760078801546105749084906107e5565b925061058d8860070154836107e590919063ffffffff16565b91505b509093509150505b94509492505050565b6000808260020154836001015484600001546105bd9190610a97565b6105c79190610a97565b905060008142116105d857426105da565b815b600885015490915060009060ff161561062b5761062887878154811061061057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600101548661080d565b90505b60006106c261064783886006015461071490919063ffffffff16565b61068b8a8a8154811061066a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866108c490919063ffffffff16565b8a8a815481106106ab57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600001546108d0565b90506107088888815481106106e757634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020154826108c490919063ffffffff16565b98975050505050505050565b600061023e8284610a97565b600061023e8284610bed565b600061023e8284610aaf565b6000805b82548110156107c95782818154811061076557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015484116107b75782818154811061079d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154915050610241565b806107c181610c23565b91505061073c565b5060009392505050565b600061023e6127106104d68585610720565b6000826107f457506000610241565b81610800575081610241565b61023e61053a84846107d3565b600881015460009060ff1661082457506000610241565b600182015482546000916108389190610714565b9050600061084682866108c4565b90506202a30081101561085e57600092505050610241565b6203f48081101561087457606492505050610241565b6205460081101561088a5760c892505050610241565b620697808110156108a15761012c92505050610241565b6207e9008110156108b85761019092505050610241565b6101f492505050610241565b600061023e8284610c0c565b60006301e13380816108f16305f5e1006108eb600285610b1b565b90610720565b905060006109076113886108eb85818a8c610720565b905060006109266113886108eb61091f600288610b1b565b8b90610720565b9050600061094860066104d661093d60028d610b1b565b6108eb60028d610b1b565b9050600061096c60026104d6886108eb60028f6109659190610b1b565b8e90610720565b9050600061099060036104d661098360028b610b1b565b60028f6108eb9190610b1b565b905060006109aa826109a486818b8b610714565b90610714565b90506109c0836109ba83886108c4565b906108c4565b90506109d08b6108eb838f610720565b90506109f364e8d4a510006104d66109e960038c610b1b565b6104d6858f610720565b9c9b505050505050505050505050565b60008060408385031215610a15578182fd5b50508035926020909101359150565b600080600060608486031215610a38578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610a64578081fd5b5050823594602084013594506040840135936060013592509050565b90815260200190565b918252602082015260400190565b60008219821115610aaa57610aaa610c3e565b500190565b600082610aca57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610ae15750610598565b818704821115610af357610af3610c3e565b80861615610b0057918102915b9490941c938002610ad2565b600061023e6000198484610b29565b600061023e60001960ff8516845b600082610b3857506001610193565b81610b4557506000610193565b8160018114610b5b5760028114610b6557610b92565b6001915050610193565b60ff841115610b7657610b76610c3e565b6001841b915084821115610b8c57610b8c610c3e565b50610193565b5060208310610133831016604e8410600b8410161715610bc5575081810a83811115610bc057610bc0610c3e565b610193565b610bd28484846001610acf565b808604821115610be457610be4610c3e565b02949350505050565b6000816000190483118215151615610c0757610c07610c3e565b500290565b600082821015610c1e57610c1e610c3e565b500390565b6000600019821415610c3757610c37610c3e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207712ca171d2e8798c8aebd4da5aa007f72d5c9a7982ae5ead675aaa314a4031f64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063a150194b11610065578063a150194b146100ea578063eaff3050146100f2578063ec8ecc0214610112578063f7ac9cba1461013257610087565b80634f1604231461008c5780635eac7af3146100b557806393aaeaf9146100c8575b600080fd5b61009f61009a366004610a24565b610153565b6040516100ac9190610a80565b60405180910390f35b61009f6100c3366004610a03565b61019a565b8180156100d457600080fd5b506100e86100e3366004610a03565b610247565b005b61009f6102dc565b8180156100fe57600080fd5b506100e861010d366004610a24565b6102e1565b81801561011e57600080fd5b506100e861012d366004610a03565b6103be565b610145610140366004610a4f565b610424565b6040516100ac929190610a89565b825460009061016457506000610193565b8354831061017457506000610193565b6000806101828686866105a1565b905061018e8282610714565b925050505b9392505050565b81546000906101ab57506000610241565b825482106101bb57506000610241565b60008383815481106101dd57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160019054906101000a900460ff1661023e5761023b84848154811061022357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201548290610714565b90505b90505b92915050565b8154610252576102d8565b81818154811061027257634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff1615610293576102d8565b60018282815481106102b557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600701805460ff19169115159190911790555b5050565b600881565b82546102ec576103b9565b825482106102f9576103b9565b60006103068484846105a1565b90504284848154811061032957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600301819055506103828185858154811061036257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016002015461071490919063ffffffff16565b8484815481106103a257634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020181905550505b505050565b81546103c9576102d8565b815481106103d6576102d8565b60018282815481106103f857634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160070160016101000a81548160ff0219169083151502179055505050565b60088201546000908190610100900460ff1661044557506000905080610598565b855461045657506000905080610598565b8554851061046957506000905080610598565b85858154811061048957634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015460ff16156104b057506000905080610598565b60006104dc85600301546104d66008600a6104cb9190610b0c565b600489015490610720565b9061072c565b9050600080600061051e8a8a8154811061050657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016006015488610738565b905061054161053a828a600501546107d390919063ffffffff16565b8490610714565b925061055761055085836107d3565b8390610714565b6007890154909250156105905760078801546105749084906107e5565b925061058d8860070154836107e590919063ffffffff16565b91505b509093509150505b94509492505050565b6000808260020154836001015484600001546105bd9190610a97565b6105c79190610a97565b905060008142116105d857426105da565b815b600885015490915060009060ff161561062b5761062887878154811061061057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600101548661080d565b90505b60006106c261064783886006015461071490919063ffffffff16565b61068b8a8a8154811061066a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866108c490919063ffffffff16565b8a8a815481106106ab57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600001546108d0565b90506107088888815481106106e757634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160020154826108c490919063ffffffff16565b98975050505050505050565b600061023e8284610a97565b600061023e8284610bed565b600061023e8284610aaf565b6000805b82548110156107c95782818154811061076557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015484116107b75782818154811061079d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154915050610241565b806107c181610c23565b91505061073c565b5060009392505050565b600061023e6127106104d68585610720565b6000826107f457506000610241565b81610800575081610241565b61023e61053a84846107d3565b600881015460009060ff1661082457506000610241565b600182015482546000916108389190610714565b9050600061084682866108c4565b90506202a30081101561085e57600092505050610241565b6203f48081101561087457606492505050610241565b6205460081101561088a5760c892505050610241565b620697808110156108a15761012c92505050610241565b6207e9008110156108b85761019092505050610241565b6101f492505050610241565b600061023e8284610c0c565b60006301e13380816108f16305f5e1006108eb600285610b1b565b90610720565b905060006109076113886108eb85818a8c610720565b905060006109266113886108eb61091f600288610b1b565b8b90610720565b9050600061094860066104d661093d60028d610b1b565b6108eb60028d610b1b565b9050600061096c60026104d6886108eb60028f6109659190610b1b565b8e90610720565b9050600061099060036104d661098360028b610b1b565b60028f6108eb9190610b1b565b905060006109aa826109a486818b8b610714565b90610714565b90506109c0836109ba83886108c4565b906108c4565b90506109d08b6108eb838f610720565b90506109f364e8d4a510006104d66109e960038c610b1b565b6104d6858f610720565b9c9b505050505050505050505050565b60008060408385031215610a15578182fd5b50508035926020909101359150565b600080600060608486031215610a38578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610a64578081fd5b5050823594602084013594506040840135936060013592509050565b90815260200190565b918252602082015260400190565b60008219821115610aaa57610aaa610c3e565b500190565b600082610aca57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611610ae15750610598565b818704821115610af357610af3610c3e565b80861615610b0057918102915b9490941c938002610ad2565b600061023e6000198484610b29565b600061023e60001960ff8516845b600082610b3857506001610193565b81610b4557506000610193565b8160018114610b5b5760028114610b6557610b92565b6001915050610193565b60ff841115610b7657610b76610c3e565b6001841b915084821115610b8c57610b8c610c3e565b50610193565b5060208310610133831016604e8410600b8410161715610bc5575081810a83811115610bc057610bc0610c3e565b610193565b610bd28484846001610acf565b808604821115610be457610be4610c3e565b02949350505050565b6000816000190483118215151615610c0757610c07610c3e565b500290565b600082821015610c1e57610c1e610c3e565b500390565b6000600019821415610c3757610c37610c3e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207712ca171d2e8798c8aebd4da5aa007f72d5c9a7982ae5ead675aaa314a4031f64736f6c63430008000033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0xC8A PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA150194B GT PUSH2 0x65 JUMPI DUP1 PUSH4 0xA150194B EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xEAFF3050 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xEC8ECC02 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xF7AC9CBA EQ PUSH2 0x132 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH4 0x4F160423 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x5EAC7AF3 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x93AAEAF9 EQ PUSH2 0xC8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xA24 JUMP JUMPDEST PUSH2 0x153 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x247 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x2DC JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0xA24 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x145 PUSH2 0x140 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0xA89 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x164 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST DUP4 SLOAD DUP4 LT PUSH2 0x174 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x182 DUP7 DUP7 DUP7 PUSH2 0x5A1 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E DUP3 DUP3 PUSH2 0x714 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1AB JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST DUP3 SLOAD DUP3 LT PUSH2 0x1BB JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23E JUMPI PUSH2 0x23B DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x223 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD SLOAD DUP3 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x252 JUMPI PUSH2 0x2D8 JUMP JUMPDEST DUP2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x272 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x293 JUMPI PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2EC JUMPI PUSH2 0x3B9 JUMP JUMPDEST DUP3 SLOAD DUP3 LT PUSH2 0x2F9 JUMPI PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 DUP5 DUP5 DUP5 PUSH2 0x5A1 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x329 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x382 DUP2 DUP6 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x362 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x714 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3A2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x3C9 JUMPI PUSH2 0x2D8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3D6 JUMPI PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x445 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 SLOAD PUSH2 0x456 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 SLOAD DUP6 LT PUSH2 0x469 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x489 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4B0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DC DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x4D6 PUSH1 0x8 PUSH1 0xA PUSH2 0x4CB SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x4 DUP10 ADD SLOAD SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 PUSH2 0x72C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x51E DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD DUP9 PUSH2 0x738 JUMP JUMPDEST SWAP1 POP PUSH2 0x541 PUSH2 0x53A DUP3 DUP11 PUSH1 0x5 ADD SLOAD PUSH2 0x7D3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP3 POP PUSH2 0x557 PUSH2 0x550 DUP6 DUP4 PUSH2 0x7D3 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x714 JUMP JUMPDEST PUSH1 0x7 DUP10 ADD SLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x590 JUMPI PUSH1 0x7 DUP9 ADD SLOAD PUSH2 0x574 SWAP1 DUP5 SWAP1 PUSH2 0x7E5 JUMP JUMPDEST SWAP3 POP PUSH2 0x58D DUP9 PUSH1 0x7 ADD SLOAD DUP4 PUSH2 0x7E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x5C7 SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 TIMESTAMP GT PUSH2 0x5D8 JUMPI TIMESTAMP PUSH2 0x5DA JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x62B JUMPI PUSH2 0x628 DUP8 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x610 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x6C2 PUSH2 0x647 DUP4 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x714 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x68B DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x66A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x8C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x6AB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP PUSH2 0x708 DUP9 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x6E7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x8C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xBED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x7C9 JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x765 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 GT PUSH2 0x7B7 JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x79D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP PUSH2 0x241 JUMP JUMPDEST DUP1 PUSH2 0x7C1 DUP2 PUSH2 0xC23 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x73C JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x2710 PUSH2 0x4D6 DUP6 DUP6 PUSH2 0x720 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7F4 JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST DUP2 PUSH2 0x800 JUMPI POP DUP2 PUSH2 0x241 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x53A DUP5 DUP5 PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x824 JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x846 DUP3 DUP7 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 POP PUSH3 0x2A300 DUP2 LT ISZERO PUSH2 0x85E JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x3F480 DUP2 LT ISZERO PUSH2 0x874 JUMPI PUSH1 0x64 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x54600 DUP2 LT ISZERO PUSH2 0x88A JUMPI PUSH1 0xC8 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x69780 DUP2 LT ISZERO PUSH2 0x8A1 JUMPI PUSH2 0x12C SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x7E900 DUP2 LT ISZERO PUSH2 0x8B8 JUMPI PUSH2 0x190 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH2 0x1F4 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xC0C JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 DUP2 PUSH2 0x8F1 PUSH4 0x5F5E100 PUSH2 0x8EB PUSH1 0x2 DUP6 PUSH2 0xB1B JUMP JUMPDEST SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x907 PUSH2 0x1388 PUSH2 0x8EB DUP6 DUP2 DUP11 DUP13 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x926 PUSH2 0x1388 PUSH2 0x8EB PUSH2 0x91F PUSH1 0x2 DUP9 PUSH2 0xB1B JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x948 PUSH1 0x6 PUSH2 0x4D6 PUSH2 0x93D PUSH1 0x2 DUP14 PUSH2 0xB1B JUMP JUMPDEST PUSH2 0x8EB PUSH1 0x2 DUP14 PUSH2 0xB1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x96C PUSH1 0x2 PUSH2 0x4D6 DUP9 PUSH2 0x8EB PUSH1 0x2 DUP16 PUSH2 0x965 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST DUP15 SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x990 PUSH1 0x3 PUSH2 0x4D6 PUSH2 0x983 PUSH1 0x2 DUP12 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x2 DUP16 PUSH2 0x8EB SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9AA DUP3 PUSH2 0x9A4 DUP7 DUP2 DUP12 DUP12 PUSH2 0x714 JUMP JUMPDEST SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP PUSH2 0x9C0 DUP4 PUSH2 0x9BA DUP4 DUP9 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 POP PUSH2 0x9D0 DUP12 PUSH2 0x8EB DUP4 DUP16 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH2 0x9F3 PUSH5 0xE8D4A51000 PUSH2 0x4D6 PUSH2 0x9E9 PUSH1 0x3 DUP13 PUSH2 0xB1B JUMP JUMPDEST PUSH2 0x4D6 DUP6 DUP16 PUSH2 0x720 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA15 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA38 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA64 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAAA JUMPI PUSH2 0xAAA PUSH2 0xC3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xACA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0xAE1 JUMPI POP PUSH2 0x598 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0xAF3 JUMPI PUSH2 0xAF3 PUSH2 0xC3E JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0xB00 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB38 JUMPI POP PUSH1 0x1 PUSH2 0x193 JUMP JUMPDEST DUP2 PUSH2 0xB45 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB5B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB65 JUMPI PUSH2 0xB92 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x193 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB76 JUMPI PUSH2 0xB76 PUSH2 0xC3E JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xB8C JUMPI PUSH2 0xB8C PUSH2 0xC3E JUMP JUMPDEST POP PUSH2 0x193 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBC5 JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0xBC0 JUMPI PUSH2 0xBC0 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH2 0xBD2 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xACF JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xBE4 PUSH2 0xC3E JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC07 JUMPI PUSH2 0xC07 PUSH2 0xC3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC1E JUMPI PUSH2 0xC1E PUSH2 0xC3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xC37 JUMPI PUSH2 0xC37 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x12CA171D2E8798C8AEBD4DA5AA007F72D5C9A7982AE5EAD6 PUSH22 0xAAA314A4031F64736F6C634300080000330000000000 ",
      "sourceMap": "192:4214:40:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;192:4214:40;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:4360:41",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:41",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "161:171:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "207:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "216:6:41"
                                },
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "224:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "209:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "209:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "209:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "182:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "191:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "178:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "178:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "203:2:41",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "174:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "174:32:41"
                      },
                      "nodeType": "YulIf",
                      "src": "171:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "242:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "265:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "252:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "252:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "242:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "284:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "311:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "322:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "307:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "307:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "294:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "294:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "284:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "119:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "130:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "142:6:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "150:6:41",
                    "type": ""
                  }
                ],
                "src": "14:318:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "529:222:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "575:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "584:6:41"
                                },
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "592:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "577:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "577:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "577:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "550:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "559:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "546:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "546:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "571:2:41",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "542:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "542:32:41"
                      },
                      "nodeType": "YulIf",
                      "src": "539:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "610:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "633:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "620:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "620:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "610:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "652:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "679:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "690:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "675:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "675:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "662:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "662:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "652:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "703:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "730:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "741:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "726:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "726:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "713:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "713:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "703:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256t_struct$_LibParams_$4430_storage_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "479:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "490:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "502:6:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "510:6:41",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "518:6:41",
                    "type": ""
                  }
                ],
                "src": "337:414:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1021:274:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1068:26:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "1077:6:41"
                                },
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "1085:6:41"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1070:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1070:22:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1070:22:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1042:7:41"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1051:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1038:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1038:23:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1063:3:41",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1034:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1034:33:41"
                      },
                      "nodeType": "YulIf",
                      "src": "1031:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1103:33:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1126:9:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1113:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1113:23:41"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1103:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1145:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1172:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1183:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1168:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1168:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1155:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1155:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1145:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1196:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1223:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1234:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1219:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1219:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1206:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1206:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "1196:6:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1247:42:41",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1274:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1285:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1270:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1270:18:41"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1257:12:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1257:32:41"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "1247:6:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256t_struct$_LibParams_$4430_storage_ptrt_array$_t_struct$_PrizeRewardRate_$4459_storage_$dyn_storage_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "963:9:41",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "974:7:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "986:6:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "994:6:41",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1002:6:41",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "1010:6:41",
                    "type": ""
                  }
                ],
                "src": "756:539:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1409:76:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1419:26:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1431:9:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1442:2:41",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1427:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1427:18:41"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1419:4:41"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1461:9:41"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1472:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1454:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1454:25:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1454:25:41"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1378:9:41",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1389:6:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1400:4:41",
                    "type": ""
                  }
                ],
                "src": "1300:185:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1627:119:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1637:26:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1649:9:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1660:2:41",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1645:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1645:18:41"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1637:4:41"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1679:9:41"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1690:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1672:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1672:25:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1672:25:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1717:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1728:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1713:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1713:18:41"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "1733:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1706:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1706:34:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1706:34:41"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1588:9:41",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1599:6:41",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1607:6:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1618:4:41",
                    "type": ""
                  }
                ],
                "src": "1490:256:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1799:80:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1826:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1828:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1828:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1828:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1815:1:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1822:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1818:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1818:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1812:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1812:13:41"
                      },
                      "nodeType": "YulIf",
                      "src": "1809:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1857:16:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1868:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1871:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1864:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1864:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "1857:3:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1782:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1785:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "1791:3:41",
                    "type": ""
                  }
                ],
                "src": "1751:128:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1930:171:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1961:111:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "1982:1:41"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1989:3:41",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1994:10:41",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "1985:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1985:20:41"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1975:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1975:31:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1975:31:41"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2026:1:41",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2029:4:41",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2019:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2019:15:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2019:15:41"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "2054:1:41"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2057:4:41",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2047:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2047:15:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2047:15:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1950:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1943:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1943:9:41"
                      },
                      "nodeType": "YulIf",
                      "src": "1940:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2081:14:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2090:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2093:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "2086:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2086:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "2081:1:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1915:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1918:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "1924:1:41",
                    "type": ""
                  }
                ],
                "src": "1884:217:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2183:376:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2193:15:41",
                      "value": {
                        "name": "_power",
                        "nodeType": "YulIdentifier",
                        "src": "2202:6:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2193:5:41"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2217:13:41",
                      "value": {
                        "name": "_base",
                        "nodeType": "YulIdentifier",
                        "src": "2225:5:41"
                      },
                      "variableNames": [
                        {
                          "name": "base",
                          "nodeType": "YulIdentifier",
                          "src": "2217:4:41"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2264:289:41",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "2278:11:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2288:1:41",
                              "type": "",
                              "value": "1"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "2282:2:41",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2330:9:41",
                              "statements": [
                                {
                                  "nodeType": "YulBreak",
                                  "src": "2332:5:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "2315:8:41"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2325:2:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2312:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2312:16:41"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nodeType": "YulIdentifier",
                                "src": "2305:6:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2305:24:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2302:2:41"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2380:22:41",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "2382:16:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2382:18:41"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2382:18:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2358:4:41"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "max",
                                      "nodeType": "YulIdentifier",
                                      "src": "2368:3:41"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "2373:4:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "div",
                                    "nodeType": "YulIdentifier",
                                    "src": "2364:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2364:14:41"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "2355:2:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2355:24:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2352:2:41"
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "2436:29:41",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "2438:25:41",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "2451:5:41"
                                      },
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "2458:4:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "2447:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2447:16:41"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "2438:5:41"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2422:8:41"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2432:2:41"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "2418:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2418:17:41"
                            },
                            "nodeType": "YulIf",
                            "src": "2415:2:41"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2478:23:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2490:4:41"
                                },
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2496:4:41"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nodeType": "YulIdentifier",
                                "src": "2486:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2486:15:41"
                            },
                            "variableNames": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "2478:4:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2514:29:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2530:2:41"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "2534:8:41"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nodeType": "YulIdentifier",
                                "src": "2526:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2526:17:41"
                            },
                            "variableNames": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2514:8:41"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "kind": "bool",
                        "nodeType": "YulLiteral",
                        "src": "2247:4:41",
                        "type": "",
                        "value": "true"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2252:3:41",
                        "statements": []
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2243:3:41",
                        "statements": []
                      },
                      "src": "2239:314:41"
                    }
                  ]
                },
                "name": "checked_exp_helper",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "_power",
                    "nodeType": "YulTypedName",
                    "src": "2134:6:41",
                    "type": ""
                  },
                  {
                    "name": "_base",
                    "nodeType": "YulTypedName",
                    "src": "2142:5:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2149:8:41",
                    "type": ""
                  },
                  {
                    "name": "max",
                    "nodeType": "YulTypedName",
                    "src": "2159:3:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2167:5:41",
                    "type": ""
                  },
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2174:4:41",
                    "type": ""
                  }
                ],
                "src": "2106:453:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2634:69:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2644:53:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2674:4:41"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2680:8:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2694:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "2690:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2690:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "2653:20:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2653:44:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2644:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2605:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2611:8:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2624:5:41",
                    "type": ""
                  }
                ],
                "src": "2564:139:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2776:80:41",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2786:64:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "2816:4:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "2826:8:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2836:4:41",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2822:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2822:19:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2847:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "2843:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2843:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_unsigned",
                          "nodeType": "YulIdentifier",
                          "src": "2795:20:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2795:55:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "2786:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_t_uint256_t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2747:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2753:8:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2766:5:41",
                    "type": ""
                  }
                ],
                "src": "2708:148:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2925:858:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2963:52:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2977:10:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2986:1:41",
                              "type": "",
                              "value": "1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "2977:5:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3000:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "2945:8:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2938:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2938:16:41"
                      },
                      "nodeType": "YulIf",
                      "src": "2935:2:41"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3048:52:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3062:10:41",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3071:1:41",
                              "type": "",
                              "value": "0"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3062:5:41"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3085:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3034:4:41"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3027:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3027:12:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3024:2:41"
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3136:52:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3150:10:41",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3159:1:41",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3150:5:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3173:5:41"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "3129:59:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3134:1:41",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3204:176:41",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3239:22:41",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "3241:16:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3241:18:41"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3241:18:41"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3224:8:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3234:3:41",
                                      "type": "",
                                      "value": "255"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "3221:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3221:17:41"
                                },
                                "nodeType": "YulIf",
                                "src": "3218:2:41"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3274:25:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "3287:8:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3297:1:41",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "3283:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3283:16:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "3274:5:41"
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "3330:22:41",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "3332:16:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3332:18:41"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "3332:18:41"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "power",
                                      "nodeType": "YulIdentifier",
                                      "src": "3318:5:41"
                                    },
                                    {
                                      "name": "max",
                                      "nodeType": "YulIdentifier",
                                      "src": "3325:3:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "3315:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3315:14:41"
                                },
                                "nodeType": "YulIf",
                                "src": "3312:2:41"
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "3365:5:41"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "3197:183:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3202:1:41",
                            "type": "",
                            "value": "2"
                          }
                        }
                      ],
                      "expression": {
                        "name": "base",
                        "nodeType": "YulIdentifier",
                        "src": "3116:4:41"
                      },
                      "nodeType": "YulSwitch",
                      "src": "3109:271:41"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3478:123:41",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3492:28:41",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "3505:4:41"
                                },
                                {
                                  "name": "exponent",
                                  "nodeType": "YulIdentifier",
                                  "src": "3511:8:41"
                                }
                              ],
                              "functionName": {
                                "name": "exp",
                                "nodeType": "YulIdentifier",
                                "src": "3501:3:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3501:19:41"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nodeType": "YulIdentifier",
                                "src": "3492:5:41"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "3551:22:41",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nodeType": "YulIdentifier",
                                      "src": "3553:16:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3553:18:41"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3553:18:41"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "power",
                                  "nodeType": "YulIdentifier",
                                  "src": "3539:5:41"
                                },
                                {
                                  "name": "max",
                                  "nodeType": "YulIdentifier",
                                  "src": "3546:3:41"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nodeType": "YulIdentifier",
                                "src": "3536:2:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3536:14:41"
                            },
                            "nodeType": "YulIf",
                            "src": "3533:2:41"
                          },
                          {
                            "nodeType": "YulLeave",
                            "src": "3586:5:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3402:4:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3408:2:41",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3399:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3399:12:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3416:8:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3426:2:41",
                                    "type": "",
                                    "value": "78"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3413:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3413:16:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3395:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3395:35:41"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3439:4:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3445:3:41",
                                    "type": "",
                                    "value": "307"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3436:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3436:13:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3454:8:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3464:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3451:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3451:16:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3432:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3432:36:41"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "3392:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3392:77:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3389:2:41"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3610:65:41",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3652:1:41",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "3655:4:41"
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulIdentifier",
                            "src": "3661:8:41"
                          },
                          {
                            "name": "max",
                            "nodeType": "YulIdentifier",
                            "src": "3671:3:41"
                          }
                        ],
                        "functionName": {
                          "name": "checked_exp_helper",
                          "nodeType": "YulIdentifier",
                          "src": "3633:18:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3633:42:41"
                      },
                      "variables": [
                        {
                          "name": "power_1",
                          "nodeType": "YulTypedName",
                          "src": "3614:7:41",
                          "type": ""
                        },
                        {
                          "name": "base_1",
                          "nodeType": "YulTypedName",
                          "src": "3623:6:41",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3717:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3719:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3719:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3719:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3690:7:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "max",
                                "nodeType": "YulIdentifier",
                                "src": "3703:3:41"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "3708:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "3699:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3699:16:41"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3687:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3687:29:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3684:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3748:29:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "3761:7:41"
                          },
                          {
                            "name": "base_1",
                            "nodeType": "YulIdentifier",
                            "src": "3770:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3757:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3757:20:41"
                      },
                      "variableNames": [
                        {
                          "name": "power",
                          "nodeType": "YulIdentifier",
                          "src": "3748:5:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_exp_unsigned",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "base",
                    "nodeType": "YulTypedName",
                    "src": "2891:4:41",
                    "type": ""
                  },
                  {
                    "name": "exponent",
                    "nodeType": "YulTypedName",
                    "src": "2897:8:41",
                    "type": ""
                  },
                  {
                    "name": "max",
                    "nodeType": "YulTypedName",
                    "src": "2907:3:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "power",
                    "nodeType": "YulTypedName",
                    "src": "2915:5:41",
                    "type": ""
                  }
                ],
                "src": "2861:922:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3840:116:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3899:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3901:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3901:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3901:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3871:1:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3864:6:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3864:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3857:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3857:17:41"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3879:1:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3890:1:41",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3886:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3886:6:41"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3894:1:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "3882:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3882:14:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3876:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3876:21:41"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "3853:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3853:45:41"
                      },
                      "nodeType": "YulIf",
                      "src": "3850:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3930:20:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3945:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3948:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3941:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3941:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "3930:7:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3819:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3822:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "3828:7:41",
                    "type": ""
                  }
                ],
                "src": "3788:168:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4010:76:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4032:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "4034:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4034:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4034:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4026:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4029:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "4023:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4023:8:41"
                      },
                      "nodeType": "YulIf",
                      "src": "4020:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4063:17:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4075:1:41"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4078:1:41"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4071:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4071:9:41"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "4063:4:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3992:1:41",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3995:1:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "4001:4:41",
                    "type": ""
                  }
                ],
                "src": "3961:125:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4138:88:41",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4169:22:41",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "4171:16:41"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4171:18:41"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4171:18:41"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4154:5:41"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4165:1:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "4161:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4161:6:41"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "4151:2:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4151:17:41"
                      },
                      "nodeType": "YulIf",
                      "src": "4148:2:41"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4200:20:41",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4211:5:41"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4218:1:41",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4207:3:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4207:13:41"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "4200:3:41"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4120:5:41",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "4130:3:41",
                    "type": ""
                  }
                ],
                "src": "4091:135:41"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4263:95:41",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4280:1:41",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4287:3:41",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4292:10:41",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4283:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4283:20:41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4273:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4273:31:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4273:31:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4320:1:41",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4323:4:41",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4313:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4313:15:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4313:15:41"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4344:1:41",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4347:4:41",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "4337:6:41"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4337:15:41"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4337:15:41"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "4231:127:41"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256t_struct$_LibParams_$4430_storage_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_StakeWithPrediction_$4449_storage_$dyn_storage_ptrt_uint256t_struct$_LibParams_$4430_storage_ptrt_array$_t_struct$_PrizeRewardRate_$4459_storage_$dyn_storage_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base\n    {\n        power := _power\n        base := _base\n        for { } true { }\n        {\n            let _1 := 1\n            if iszero(gt(exponent, _1)) { break }\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, _1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent, not(0))\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff), not(0))\n    }\n    function checked_exp_unsigned(base, exponent, max) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(1, base, exponent, max)\n        if gt(power_1, div(max, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
          "id": 41,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA150194B GT PUSH2 0x65 JUMPI DUP1 PUSH4 0xA150194B EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0xEAFF3050 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xEC8ECC02 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xF7AC9CBA EQ PUSH2 0x132 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH4 0x4F160423 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x5EAC7AF3 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x93AAEAF9 EQ PUSH2 0xC8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xA24 JUMP JUMPDEST PUSH2 0x153 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0xA80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x247 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x2DC JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0xA24 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x145 PUSH2 0x140 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0xA89 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x164 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST DUP4 SLOAD DUP4 LT PUSH2 0x174 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x182 DUP7 DUP7 DUP7 PUSH2 0x5A1 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E DUP3 DUP3 PUSH2 0x714 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x1AB JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST DUP3 SLOAD DUP3 LT PUSH2 0x1BB JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23E JUMPI PUSH2 0x23B DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x223 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD SLOAD DUP3 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x252 JUMPI PUSH2 0x2D8 JUMP JUMPDEST DUP2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x272 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x293 JUMPI PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD PUSH1 0x7 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2EC JUMPI PUSH2 0x3B9 JUMP JUMPDEST DUP3 SLOAD DUP3 LT PUSH2 0x2F9 JUMPI PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 DUP5 DUP5 DUP5 PUSH2 0x5A1 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x329 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x382 DUP2 DUP6 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x362 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x714 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3A2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH2 0x3C9 JUMPI PUSH2 0x2D8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x3D6 JUMPI PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x445 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 SLOAD PUSH2 0x456 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 SLOAD DUP6 LT PUSH2 0x469 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST DUP6 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x489 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x4B0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DC DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x4D6 PUSH1 0x8 PUSH1 0xA PUSH2 0x4CB SWAP2 SWAP1 PUSH2 0xB0C JUMP JUMPDEST PUSH1 0x4 DUP10 ADD SLOAD SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 PUSH2 0x72C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x51E DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD DUP9 PUSH2 0x738 JUMP JUMPDEST SWAP1 POP PUSH2 0x541 PUSH2 0x53A DUP3 DUP11 PUSH1 0x5 ADD SLOAD PUSH2 0x7D3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP3 POP PUSH2 0x557 PUSH2 0x550 DUP6 DUP4 PUSH2 0x7D3 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x714 JUMP JUMPDEST PUSH1 0x7 DUP10 ADD SLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x590 JUMPI PUSH1 0x7 DUP9 ADD SLOAD PUSH2 0x574 SWAP1 DUP5 SWAP1 PUSH2 0x7E5 JUMP JUMPDEST SWAP3 POP PUSH2 0x58D DUP9 PUSH1 0x7 ADD SLOAD DUP4 PUSH2 0x7E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x5C7 SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 TIMESTAMP GT PUSH2 0x5D8 JUMPI TIMESTAMP PUSH2 0x5DA JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 DUP6 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x62B JUMPI PUSH2 0x628 DUP8 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x610 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x80D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x6C2 PUSH2 0x647 DUP4 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x714 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x68B DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x66A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x8C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 DUP11 DUP2 SLOAD DUP2 LT PUSH2 0x6AB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP PUSH2 0x708 DUP9 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x6E7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x8C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xBED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x7C9 JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x765 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 GT PUSH2 0x7B7 JUMPI DUP3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x79D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP PUSH2 0x241 JUMP JUMPDEST DUP1 PUSH2 0x7C1 DUP2 PUSH2 0xC23 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x73C JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH2 0x2710 PUSH2 0x4D6 DUP6 DUP6 PUSH2 0x720 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7F4 JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST DUP2 PUSH2 0x800 JUMPI POP DUP2 PUSH2 0x241 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x53A DUP5 DUP5 PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x8 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x824 JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x846 DUP3 DUP7 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 POP PUSH3 0x2A300 DUP2 LT ISZERO PUSH2 0x85E JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x3F480 DUP2 LT ISZERO PUSH2 0x874 JUMPI PUSH1 0x64 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x54600 DUP2 LT ISZERO PUSH2 0x88A JUMPI PUSH1 0xC8 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x69780 DUP2 LT ISZERO PUSH2 0x8A1 JUMPI PUSH2 0x12C SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH3 0x7E900 DUP2 LT ISZERO PUSH2 0x8B8 JUMPI PUSH2 0x190 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH2 0x1F4 SWAP3 POP POP POP PUSH2 0x241 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E DUP3 DUP5 PUSH2 0xC0C JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 DUP2 PUSH2 0x8F1 PUSH4 0x5F5E100 PUSH2 0x8EB PUSH1 0x2 DUP6 PUSH2 0xB1B JUMP JUMPDEST SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x907 PUSH2 0x1388 PUSH2 0x8EB DUP6 DUP2 DUP11 DUP13 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x926 PUSH2 0x1388 PUSH2 0x8EB PUSH2 0x91F PUSH1 0x2 DUP9 PUSH2 0xB1B JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x948 PUSH1 0x6 PUSH2 0x4D6 PUSH2 0x93D PUSH1 0x2 DUP14 PUSH2 0xB1B JUMP JUMPDEST PUSH2 0x8EB PUSH1 0x2 DUP14 PUSH2 0xB1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x96C PUSH1 0x2 PUSH2 0x4D6 DUP9 PUSH2 0x8EB PUSH1 0x2 DUP16 PUSH2 0x965 SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST DUP15 SWAP1 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x990 PUSH1 0x3 PUSH2 0x4D6 PUSH2 0x983 PUSH1 0x2 DUP12 PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x2 DUP16 PUSH2 0x8EB SWAP2 SWAP1 PUSH2 0xB1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9AA DUP3 PUSH2 0x9A4 DUP7 DUP2 DUP12 DUP12 PUSH2 0x714 JUMP JUMPDEST SWAP1 PUSH2 0x714 JUMP JUMPDEST SWAP1 POP PUSH2 0x9C0 DUP4 PUSH2 0x9BA DUP4 DUP9 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 PUSH2 0x8C4 JUMP JUMPDEST SWAP1 POP PUSH2 0x9D0 DUP12 PUSH2 0x8EB DUP4 DUP16 PUSH2 0x720 JUMP JUMPDEST SWAP1 POP PUSH2 0x9F3 PUSH5 0xE8D4A51000 PUSH2 0x4D6 PUSH2 0x9E9 PUSH1 0x3 DUP13 PUSH2 0xB1B JUMP JUMPDEST PUSH2 0x4D6 DUP6 DUP16 PUSH2 0x720 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA15 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA38 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA64 JUMPI DUP1 DUP2 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAAA JUMPI PUSH2 0xAAA PUSH2 0xC3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xACA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0xAE1 JUMPI POP PUSH2 0x598 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0xAF3 JUMPI PUSH2 0xAF3 PUSH2 0xC3E JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0xB00 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB38 JUMPI POP PUSH1 0x1 PUSH2 0x193 JUMP JUMPDEST DUP2 PUSH2 0xB45 JUMPI POP PUSH1 0x0 PUSH2 0x193 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB5B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB65 JUMPI PUSH2 0xB92 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x193 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB76 JUMPI PUSH2 0xB76 PUSH2 0xC3E JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xB8C JUMPI PUSH2 0xB8C PUSH2 0xC3E JUMP JUMPDEST POP PUSH2 0x193 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBC5 JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0xBC0 JUMPI PUSH2 0xBC0 PUSH2 0xC3E JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH2 0xBD2 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xACF JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xBE4 PUSH2 0xC3E JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC07 JUMPI PUSH2 0xC07 PUSH2 0xC3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC1E JUMPI PUSH2 0xC1E PUSH2 0xC3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xC37 JUMPI PUSH2 0xC37 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x12CA171D2E8798C8AEBD4DA5AA007F72D5C9A7982AE5EAD6 PUSH22 0xAAA314A4031F64736F6C634300080000330000000000 ",
      "sourceMap": "192:4214:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2298:629;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1727:565;;;;;;:::i;:::-;;:::i;1066:332::-;;;;;;;;;;-1:-1:-1;1066:332:40;;;;;:::i;:::-;;:::i;:::-;;334:41;;;:::i;382:678::-;;;;;;;;;;-1:-1:-1;382:678:40;;;;;:::i;:::-;;:::i;1404:317::-;;;;;;;;;;-1:-1:-1;1404:317:40;;;;;:::i;:::-;;:::i;2933:1471::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2298:629::-;2577:14;;2549:7;;2573:33;;-1:-1:-1;2605:1:40;2598:8;;2573:33;2635:14;;2620:29;;2616:43;;-1:-1:-1;2658:1:40;2651:8;;2616:43;2670:14;2707:22;2732:119;2790:7;2812:11;2837:4;2732:44;:119::i;:::-;2707:144;-1:-1:-1;2870:26:40;:6;2707:144;2870:10;:26::i;:::-;2861:35;-1:-1:-1;;;2298:629:40;;;;;;:::o;1727:565::-;1943:14;;1916:7;;1939:33;;-1:-1:-1;1971:1:40;1964:8;;1939:33;2001:14;;1986:29;;1982:43;;-1:-1:-1;2024:1:40;2017:8;;1982:43;2037:26;2083:7;2091:11;2083:20;;;;;;-1:-1:-1;;;2083:20:40;;;;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;2078:172;;2151:88;2191:7;2199:11;2191:20;;;;;;-1:-1:-1;;;2191:20:40;;;;;;;;;;;;;;;;;;;;;;:34;2151:18;;:22;:88::i;:::-;2130:109;;2078:172;2267:18;-1:-1:-1;1727:565:40;;;;;:::o;1066:332::-;1242:14;;1238:32;;1263:7;;1238:32;1283:7;1291:11;1283:20;;;;;;-1:-1:-1;;;1283:20:40;;;;;;;;;;;;;;;;;:41;:20;;;;;:41;;;;1279:54;;;1326:7;;1279:54;1387:4;1343:7;1351:11;1343:20;;;;;;-1:-1:-1;;;1343:20:40;;;;;;;;;;;;;;;;;;;;;;:41;;:48;;-1:-1:-1;;1343:48:40;;;;;;;;;;1066:332;;;:::o;334:41::-;374:1;334:41;:::o;382:678::-;625:14;;621:32;;646:7;;621:32;681:14;;666:29;;662:42;;697:7;;662:42;714:22;739:119;797:7;819:11;844:4;739:44;:119::i;:::-;714:144;;911:15;869:7;877:11;869:20;;;;;;-1:-1:-1;;;869:20:40;;;;;;;;;;;;;;;;;;;:39;;:57;;;;975:78;1029:14;975:7;983:11;975:20;;;;;;-1:-1:-1;;;975:20:40;;;;;;;;;;;;;;;;;;;:36;;;:40;;:78;;;;:::i;:::-;936:7;944:11;936:20;;;;;;-1:-1:-1;;;936:20:40;;;;;;;;;;;;;;;;;;;:36;;:117;;;;382:678;;;;;:::o;1404:317::-;1587:14;;1583:32;;1608:7;;1583:32;1643:14;;1628:29;;1624:42;;1659:7;;1624:42;1710:4;1676:7;1684:11;1676:20;;;;;;-1:-1:-1;;;1676:20:40;;;;;;;;;;;;;;;;;;;:31;;;:38;;;;;;;;;;;;;;;;;;1404:317;;:::o;2933:1471::-;3292:14;;;;3255:7;;;;3292:14;;;;;3287:34;;-1:-1:-1;3316:1:40;;-1:-1:-1;3316:1:40;3308:13;;3287:34;3336:14;;3332:38;;-1:-1:-1;3365:1:40;;-1:-1:-1;3365:1:40;3357:13;;3332:38;3400:14;;3385:29;;3381:47;;-1:-1:-1;3424:1:40;;-1:-1:-1;3424:1:40;3416:12;;3381:47;3443:7;3451:11;3443:20;;;;;;-1:-1:-1;;;3443:20:40;;;;;;;;;;;;;;;;;:41;:20;;;;;:41;;;;3439:60;;;-1:-1:-1;3494:1:40;;-1:-1:-1;3494:1:40;3486:13;;3439:60;3510:39;3564:68;3613:4;:18;;;3565:42;374:1;3589:2;:17;;;;:::i;:::-;3565:19;;;;;:23;:42::i;:::-;3564:48;;:68::i;:::-;3510:122;;3643:14;3671:26;3712:16;3731:119;3784:7;3792:11;3784:20;;;;;;-1:-1:-1;;;3784:20:40;;;;;;;;;;;;;;;;;;;:25;;;3823:17;3731:39;:119::i;:::-;3712:138;;3870:90;3906:32;3929:8;3906:4;:16;;;:22;;:32;;;;:::i;:::-;3870:6;;:10;:90::i;:::-;3861:99;-1:-1:-1;3992:146:40;4040:76;:31;4107:8;4040:66;:76::i;:::-;3992:18;;:22;:146::i;:::-;4165:24;;;;3971:167;;-1:-1:-1;4165:28:40;4161:191;;4231:24;;;;4218:38;;:6;;:12;:38::i;:::-;4209:47;;4291:50;4316:4;:24;;;4291:18;:24;;:50;;;;:::i;:::-;4270:71;;4161:191;-1:-1:-1;4370:6:40;;-1:-1:-1;4378:18:40;-1:-1:-1;;2933:1471:40;;;;;;;;:::o;994:1043:38:-;1247:7;1270:20;1366:4;:17;;;1337:4;:13;;;1306:4;:15;;;:44;;;;:::i;:::-;:77;;;;:::i;:::-;1270:113;;1394:14;1441:12;1423:15;:30;:63;;1471:15;1423:63;;;1456:12;1423:63;1531:22;;;;1394:92;;-1:-1:-1;1497:19:38;;1531:22;;1526:176;;;1584:107;1624:7;1632:11;1624:20;;;;;;-1:-1:-1;;;1624:20:38;;;;;;;;;;;;;;;;;;;:31;;;1673:4;1584:22;:107::i;:::-;1570:121;;1526:176;1712:22;1737:177;1769:30;1787:11;1769:4;:13;;;:17;;:30;;;;:::i;:::-;1813:43;1824:7;1832:11;1824:20;;;;;;-1:-1:-1;;;1824:20:38;;;;;;;;;;;;;;;;;;;:31;;;1813:6;:10;;:43;;;;:::i;:::-;1870:7;1878:11;1870:20;;;;;;-1:-1:-1;;;1870:20:38;;;;;;;;;;;;;;;;;;;:34;;;1737:18;:177::i;:::-;1712:202;;1942:56;1961:7;1969:11;1961:20;;;;;;-1:-1:-1;;;1961:20:38;;;;;;;;;;;;;;;;;;;:36;;;1942:14;:18;;:56;;;;:::i;:::-;1925:73;994:1043;-1:-1:-1;;;;;;;;994:1043:38:o;2672:96:9:-;2730:7;2756:5;2760:1;2756;:5;:::i;3382:96::-;3440:7;3466:5;3470:1;3466;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;4096:426:38:-;4284:7;;4307:190;4331:24;;4327:28;;4307:190;;;4389:17;4407:1;4389:20;;;;;;-1:-1:-1;;;4389:20:38;;;;;;;;;;;;;;;;;;;:25;;;4380:5;:34;4376:111;;4441:17;4459:1;4441:20;;;;;;-1:-1:-1;;;4441:20:38;;;;;;;;;;;;;;;;;;;:31;;;4434:38;;;;;4376:111;4357:3;;;;:::i;:::-;;;;4307:190;;;-1:-1:-1;4514:1:38;;4096:426;-1:-1:-1;;;4096:426:38:o;234:125:37:-;297:7;323:29;222:5;323:11;:3;331:2;323:7;:11::i;547:184::-;610:7;633:8;629:22;;-1:-1:-1;650:1:37;643:8;;629:22;665:7;661:23;;-1:-1:-1;681:3:37;674:10;;661:23;701;709:14;715:3;720:2;709:5;:14::i;2043:769:38:-;2245:22;;;;2216:7;;2245:22;;2240:62;;-1:-1:-1;2290:1:38;2283:8;;2240:62;2351:13;;;;2331:15;;2312:16;;2331:34;;:15;:19;:34::i;:::-;2312:53;-1:-1:-1;2375:18:38;2396:24;2312:53;2409:10;2396:12;:24::i;:::-;2375:45;;2448:8;2435:10;:21;2431:375;;;2479:1;2472:8;;;;;;2431:375;2514:8;2501:10;:21;2497:309;;;2545:3;2538:10;;;;;;2497:309;2582:8;2569:10;:21;2565:241;;;2613:3;2606:10;;;;;;2565:241;2650:9;2637:10;:22;2633:173;;;2682:3;2675:10;;;;;;2633:173;2719:9;2706:10;:22;2702:104;;;2751:3;2744:10;;;;;;2702:104;2792:3;2785:10;;;;;;3039:96:9;3097:7;3123:5;3127:1;3123;:5;:::i;2818:1272:38:-;2970:7;3018:8;2970:7;3053:42;3089:5;3054:16;3069:1;3018:8;3054:16;:::i;:::-;3053:35;;:42::i;:::-;3037:58;-1:-1:-1;3106:14:38;3123:102;3220:4;3123:79;3188:13;3123:79;:12;3153:15;3123:29;:46::i;:102::-;3106:119;-1:-1:-1;3244:13:38;3260:73;3328:4;3260:50;3293:16;3308:1;3293:13;:16;:::i;:::-;3260:15;;:32;:50::i;:73::-;3244:89;-1:-1:-1;3344:13:38;3360:74;3432:1;3360:54;3395:18;3412:1;3395:15;:18;:::i;:::-;3361:15;3375:1;3361:12;:15;:::i;3360:74::-;3344:90;;3445:13;3461:101;3560:1;3461:81;3528:13;3461:49;3508:1;3491:15;:18;;;;:::i;:::-;3461:12;;:29;:49::i;:101::-;3445:117;-1:-1:-1;3573:13:38;3589:75;3662:1;3589:55;3627:16;3642:1;3627:13;:16;:::i;:::-;3607:1;3590:15;:18;;;;:::i;3589:75::-;3573:91;-1:-1:-1;3676:22:38;3701:39;3573:91;3701:28;3723:5;3701:28;:5;3711:6;3701:9;:17::i;:::-;:21;;:28::i;:39::-;3676:64;-1:-1:-1;3768:36:38;3798:5;3768:25;3676:64;3787:5;3768:18;:25::i;:::-;:29;;:36::i;:::-;3751:53;-1:-1:-1;3832:79:38;3898:12;3832:48;3751:53;3864:15;3832:31;:48::i;:79::-;3815:96;-1:-1:-1;3939:111:38;4043:6;3939:86;4008:16;4023:1;4008:13;:16;:::i;:::-;3939:51;:14;3971:18;3939:31;:51::i;:111::-;3922:128;2818:1272;-1:-1:-1;;;;;;;;;;;;2818:1272:38:o;14:318:41:-;;;203:2;191:9;182:7;178:23;174:32;171:2;;;224:6;216;209:22;171:2;-1:-1:-1;;252:23:41;;;322:2;307:18;;;294:32;;-1:-1:-1;161:171:41:o;337:414::-;;;;571:2;559:9;550:7;546:23;542:32;539:2;;;592:6;584;577:22;539:2;-1:-1:-1;;620:23:41;;;690:2;675:18;;662:32;;-1:-1:-1;741:2:41;726:18;;;713:32;;529:222;-1:-1:-1;529:222:41:o;756:539::-;;;;;1063:3;1051:9;1042:7;1038:23;1034:33;1031:2;;;1085:6;1077;1070:22;1031:2;-1:-1:-1;;1113:23:41;;;1183:2;1168:18;;1155:32;;-1:-1:-1;1234:2:41;1219:18;;1206:32;;1285:2;1270:18;1257:32;;-1:-1:-1;1021:274:41;-1:-1:-1;1021:274:41:o;1300:185::-;1454:25;;;1442:2;1427:18;;1409:76::o;1490:256::-;1672:25;;;1728:2;1713:18;;1706:34;1660:2;1645:18;;1627:119::o;1751:128::-;;1822:1;1818:6;1815:1;1812:13;1809:2;;;1828:18;;:::i;:::-;-1:-1:-1;1864:9:41;;1799:80::o;1884:217::-;;1950:1;1940:2;;-1:-1:-1;;;1975:31:41;;2029:4;2026:1;2019:15;2057:4;1982:1;2047:15;1940:2;-1:-1:-1;2086:9:41;;1930:171::o;2106:453::-;2202:6;2225:5;2239:314;2288:1;2325:2;2315:8;2312:16;2302:2;;2332:5;;;2302:2;2373:4;2368:3;2364:14;2358:4;2355:24;2352:2;;;2382:18;;:::i;:::-;2432:2;2422:8;2418:17;2415:2;;;2447:16;;;;2415:2;2526:17;;;;;2486:15;;2239:314;;2564:139;;2653:44;-1:-1:-1;;2680:8:41;2674:4;2653:44;:::i;2708:148::-;;2795:55;-1:-1:-1;;2836:4:41;2822:19;;2816:4;2861:922;;2945:8;2935:2;;-1:-1:-1;2986:1:41;3000:5;;2935:2;3034:4;3024:2;;-1:-1:-1;3071:1:41;3085:5;;3024:2;3116:4;3134:1;3129:59;;;;3202:1;3197:183;;;;3109:271;;3129:59;3159:1;3150:10;;3173:5;;;3197:183;3234:3;3224:8;3221:17;3218:2;;;3241:18;;:::i;:::-;3297:1;3287:8;3283:16;3274:25;;3325:3;3318:5;3315:14;3312:2;;;3332:18;;:::i;:::-;3365:5;;;3109:271;;3464:2;3454:8;3451:16;3445:3;3439:4;3436:13;3432:36;3426:2;3416:8;3413:16;3408:2;3402:4;3399:12;3395:35;3392:77;3389:2;;;-1:-1:-1;3501:19:41;;;3536:14;;;3533:2;;;3553:18;;:::i;:::-;3586:5;;3389:2;3633:42;3671:3;3661:8;3655:4;3652:1;3633:42;:::i;:::-;3708:6;3703:3;3699:16;3690:7;3687:29;3684:2;;;3719:18;;:::i;:::-;3757:20;;2925:858;-1:-1:-1;;;;2925:858:41:o;3788:168::-;;3894:1;3890;3886:6;3882:14;3879:1;3876:21;3871:1;3864:9;3857:17;3853:45;3850:2;;;3901:18;;:::i;:::-;-1:-1:-1;3941:9:41;;3840:116::o;3961:125::-;;4029:1;4026;4023:8;4020:2;;;4034:18;;:::i;:::-;-1:-1:-1;4071:9:41;;4010:76::o;4091:135::-;;-1:-1:-1;;4151:17:41;;4148:2;;;4171:18;;:::i;:::-;-1:-1:-1;4218:1:41;4207:13;;4138:88::o;4231:127::-;4292:10;4287:3;4283:20;4280:1;4273:31;4323:4;4320:1;4313:15;4347:4;4344:1;4337:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "642000",
        "executionCost": "707",
        "totalCost": "642707"
      },
      "external": {
        "getIndexedPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage,StakingPoolStorageStructure.PrizeRewardRate[] storage)": "infinite",
        "getIndexedStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "infinite",
        "getIndexedStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage)": "infinite",
        "oracleDecimal()": "212",
        "withdrawIndexedPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "24600",
        "withdrawIndexedStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "23755",
        "withdrawIndexedStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getIndexedPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage,StakingPoolStorageStructure.PrizeRewardRate[] storage)": "f7ac9cba",
      "getIndexedStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "5eac7af3",
      "getIndexedStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage)": "4f160423",
      "oracleDecimal()": "a150194b",
      "withdrawIndexedPrize(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "93aaeaf9",
      "withdrawIndexedStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256)": "ec8ecc02",
      "withdrawIndexedStakingReturn(StakingPoolStorageStructure.StakeWithPrediction[] storage,uint256,StakingPoolStorageStructure.LibParams storage)": "eaff3050"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"oracleDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/IndexedClaimRewardLib.sol\":\"IndexedClaimRewardLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ce825a5e793fc484345dc3f0a6740a30789f5350e78e88ec8299a37b5f6e29\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributorUpgradeable is Initializable{\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    function __WrappedTokenDistributor_initialize(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) public initializer {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    // the function should be rename to getSwapRouter\\n    function getswapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0x42e153750df685de4b049d47eabd1509a5f80371ec82b8e4c5091614b433344b\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PriceConsumerUpgradeable is Initializable {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n    */\\n    function __PriceConsumer_initialize(address _oracle) public initializer {\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * @notice Returns decimals for oracle contract\\n    */\\n    function getDecimals() external view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the latest price from oracle contract\\n    */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9775a722a16c168720b5f8480797739dd78055a664e517620ee454cd6d8642b8\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"../Price/PriceConsumerUpgradeable.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributorUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../libraries/CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/IndexedClaimRewardLib.sol\\\";\\nimport \\\"../libraries/ClaimRewardLib.sol\\\";\\n\\nimport \\\"../interfaces/ITotemToken.sol\\\";\\nimport \\\"../interfaces/IRewardManager.sol\\\";\\n\\ncontract StakingPoolStorageStructure is \\n    OwnableUpgradeable,  \\n    PriceConsumerUpgradeable,\\n    USDRetriever,\\n    WrappedTokenDistributorUpgradeable\\n{\\n    address public stakingPoolImplementation;\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    /**\\n     * @notice Declared for passing the needed params to libraries.\\n     */\\n    struct LibParams {\\n        uint256 launchDate;\\n        uint256 lockTime;\\n        uint256 maturityTime;\\n        uint256 maturingPrice;\\n        uint256 usdPrizeAmount;\\n        uint256 prizeAmount;\\n        uint256 stakeApr;\\n        uint256 collaborativeReward;\\n        bool isEnhancedEnabled;\\n        bool isMatured;\\n    }\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    LibParams public lps;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n\\n    ITotemToken public totemToken;\\n    IRewardManager public rewardManager;\\n    IERC20 public wrappedToken;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public constant sizeLimitRangeRate = 5;\\n    uint256 public constant oracleDecimal = 8;\\n\\n    uint256 public launchDate;\\n    uint256 public lockTime;\\n    uint256 public maturityTime;\\n    uint256 public sizeAllocation;\\n    uint256 public stakeApr;\\n    uint256 public prizeAmount;\\n    /**\\n     * @notice usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0 \\n            then the pool is only TOTM rewarder.\\n     */\\n    uint256 public usdPrizeAmount;\\n    uint256 public stakeTaxRate;\\n    uint256 public minimumStakeAmount;\\n    uint256 public totalStaked;\\n    uint256 public maturingPrice;\\n    uint256 public potentialCollabReward;\\n    uint256 public collaborativeRange;\\n    /**\\n     * @notice Based on the white paper, the collaborative reward can be 20% (2000),\\n             25% (2500) or 35% (3500).\\n     */\\n    uint256 public collaborativeReward; \\n\\n    bool public isAnEmergency;\\n    bool public isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    /**\\n     * @dev StakingPoolImplementation can't be upgraded unless superAdmin sets this flag.\\n     */\\n    bool public upgradeEnabled;\\n}\\n\",\"keccak256\":\"0xdfdb9c2bfa497dfc55fd6f39bf684769e6ca9901b104f9eac0c54a7a8f7bc71a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n}\",\"keccak256\":\"0xab39a767c897abdfa93b0a33593cd3c179fd5222f2a37de798d298ccf66e5adb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITotemToken {\\n    \\n    function setLocker(address _locker) external;\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function taxRate() external returns (uint256);\\n\\n    function taxationWallet() external returns (address);\\n\\n    function taxExempt(address _msgSender) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ba963229ac039a0550990884eb976a06fb2fe7691848ff27af1c14574346531\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xcbe25ead953d92501d8fc100fbc9d1c5d3885b6360b3619309063fdd3b874a31\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CalculateRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary CalculateRewardLib {\\n\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function getTotalStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage _staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    _staker[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    /**\\n     * @notice the reward formula is:\\n          ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n    */\\n    function _getStakingRewardPerStake(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maturityDate = \\n            _lps.launchDate + \\n            _lps.lockTime + \\n            _lps.maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr;\\n        if ( _lps.isEnhancedEnabled ) {\\n            enhancedApr = _getEnhancedRewardRate(\\n                _staker[_stakeIndex].stakedTime,\\n                _lps\\n            );\\n        }\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            _lps.stakeApr.add(enhancedApr),\\n            timeTo.sub(_staker[_stakeIndex].stakedTime),\\n            _staker[_stakeIndex].stakedBalance\\n        );\\n\\n        rewardPerStake = rewardPerStake.sub(_staker[_stakeIndex].amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _getEnhancedRewardRate(\\n        uint256 stakedTime,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        if (!_lps.isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = _lps.launchDate.add(_lps.lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getPercentageReward(\\n        uint256 _rank, \\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _prizeRewardRates.length; i++) {\\n            if (_rank <= _prizeRewardRates[i].rank) {\\n                return _prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n\\n\\n}\",\"keccak256\":\"0xb36457e2da467488583be3093c215fc5c318981de43b77afd7c0c03716ae3b3b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary ClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function withdrawStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker, \\n                i, \\n                _lps);\\n\\n            _staker[i].lastWithdrawalTime = block.timestamp;\\n            _staker[i].amountWithdrawn = _staker[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function withdrawPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function withdrawStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].didUnstake = true;\\n        }\\n    }\\n\\n    function getStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps  \\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker,\\n                i, \\n                _lps\\n            );\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function getPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**oracleDecimal)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = CalculateRewardLib._getPercentageReward(\\n                    _staker[i].rank,\\n                    _prizeRewardRates\\n                );\\n\\n                reward = reward.add(\\n                            _lps.prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xc57a6bd1fce9f48bf3a62b555acfec1b1a7ddba984dd534da4bf75fabb8b9a93\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IndexedClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary IndexedClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant oracleDecimal = 8;\\n\\n    function withdrawIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n\\n        _staker[_stakeIndex].lastWithdrawalTime = block.timestamp;\\n        _staker[_stakeIndex].amountWithdrawn = _staker[_stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function withdrawIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public \\n    {\\n        if (_staker.length == 0) return;\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return;\\n\\n        _staker[_stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    function withdrawIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        _staker[_stakeIndex].didUnstake = true;\\n    }\\n\\n    function getIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!_staker[_stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                _staker[_stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function getIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function getIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        if (_stakeIndex >= _staker.length) return (0,0);\\n\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**oracleDecimal)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = CalculateRewardLib._getPercentageReward(\\n            _staker[_stakeIndex].rank,\\n            _prizeRewardRates\\n        );\\n\\n        reward = reward.add(\\n                        _lps.prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x5c150375f4c5381c70540c62529dfde8cc15e3bffd033458837c8ba463aab7e7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}