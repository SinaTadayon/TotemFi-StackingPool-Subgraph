type Summary @entity {
    id: ID!
    totalPools: Int!
    totalStaked: BigInt!
    totalUnstaked: BigInt!
    timestamp: BigInt!
}

type User @entity {
    id: ID!
    totalStakes: BigInt!
    totalUnStakes: BigInt!
    totalStaked: BigInt!
    totalUnStaked: BigInt!
    totalTotmReward: BigInt!
    totalStakingReward:BigInt!
    totalERC20Reward:BigInt!
    timestamp: BigInt!
}

type StakingPool @entity {
    id: ID!
    poolType: String!
    wrappedTokenSymbol: String!
    totalStakes: Int!
    totalStaked: BigInt!
    totalUnStakes: BigInt!
    totalUnStaked: BigInt!
    totalWithdrawedReward:BigInt!
    totalWithdrawsReward:BigInt!
    totalWithdraws: BigInt!
    totalWithdrawed: BigInt!
    totalWithdrawedToken: BigInt!
    totalWithdrawsToken: BigInt!
    startDate: BigInt!
    lockTime: BigInt!
    launchDate: BigInt!
    maturityTime: BigInt!
    sizeAllocation: BigInt!
    stakeApr: BigInt!
    prizeAmount: BigInt!
    usdPrizeAmount: BigInt!
    stakingPoolTaxRate: BigInt!
    burnRate: BigInt!
    potentialCollabReward: BigInt!
    collaborativeRange: BigInt!
    minimumStakeAmount: BigInt!
    variables: [BigInt!]
    ranks: [BigInt!]
    percentages: [BigInt!]
    isEnhancedEnabled: Boolean!
    isEmergencyEnabled: Boolean!
    isLocked: Boolean!
    isMatured: Boolean!
    isActive: Boolean!
    timestamp: BigInt!
}

type Stake @entity {
    id: ID!
    pool: StakingPool!
    user: User!
    value: BigInt!
    pricePrediction: BigInt!
    idx: BigInt
    timestamp: BigInt!
}

type Withdraw @entity {
    id: ID!
    pool: StakingPool!
    user: User!
    totmPrize: BigInt!
    stakingReward: BigInt!
    tokenReward: BigInt!
    timestamp: BigInt!
}

type Unstake @entity {
    id: ID!
    pool: StakingPool!
    user: User!
    value: BigInt!
    timestamp: BigInt!
}
